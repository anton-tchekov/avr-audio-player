
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000194  00800100  00002526  000025ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002526  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000480  00800294  00800294  0000274e  2**0
                  ALLOC
  3 .comment      00000024  00000000  00000000  0000274e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002774  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000028  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000381b  00000000  00000000  000027dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000b62  00000000  00000000  00005ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   000038c2  00000000  00000000  00006b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000594  00000000  00000000  0000a41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000994  00000000  00000000  0000a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00002e33  00000000  00000000  0000b344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000238  00000000  00000000  0000e177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__ctors_end>
       4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
       8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
       c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      1c:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__vector_7>
      20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      2c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      54:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      58:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      5c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      60:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      64:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>

00000068 <dir_empty.0>:
      68:	5b 20 44 49 52 20 45 4d 50 54 59 20 5d 00           [ DIR EMPTY ].

00000076 <notice.1>:
      76:	52 65 73 65 74 20 72 65 71 75 69 72 65 64 00        Reset required.

00000085 <error_fat>:
      85:	46 41 54 33 32 20 45 72 72 6f 72 00                 FAT32 Error.

00000091 <error_sd>:
      91:	53 44 2d 43 61 72 64 20 45 72 72 6f 72 00           SD-Card Error.

0000009f <player_skip_interval_str>:
      9f:	30 35 73 31 30 73 33 30 73 30 35 6d 31 30 6d 33     05s10s30s05m10m3
      af:	30 6d 00                                            0m.

000000b2 <__ctors_end>:
      b2:	11 24       	eor	r1, r1
      b4:	1f be       	out	0x3f, r1	; 63
      b6:	cf ef       	ldi	r28, 0xFF	; 255
      b8:	d8 e0       	ldi	r29, 0x08	; 8
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
      be:	12 e0       	ldi	r17, 0x02	; 2
      c0:	a0 e0       	ldi	r26, 0x00	; 0
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	e6 e2       	ldi	r30, 0x26	; 38
      c6:	f5 e2       	ldi	r31, 0x25	; 37
      c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x10>
      ca:	05 90       	lpm	r0, Z+
      cc:	0d 92       	st	X+, r0
      ce:	a4 39       	cpi	r26, 0x94	; 148
      d0:	b1 07       	cpc	r27, r17
      d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0xc>

000000d4 <__do_clear_bss>:
      d4:	27 e0       	ldi	r18, 0x07	; 7
      d6:	a4 e9       	ldi	r26, 0x94	; 148
      d8:	b2 e0       	ldi	r27, 0x02	; 2
      da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
      dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
      de:	a4 31       	cpi	r26, 0x14	; 20
      e0:	b2 07       	cpc	r27, r18
      e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
      e4:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <main>
      e8:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <_exit>

000000ec <__bad_interrupt>:
      ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <button_check>:
	PORTB |= (1 << PB0) | (1 << PB1);
	PORTC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3) | (1 << PC4);
}

static void button_check(void (*button_event)(uint8_t))
{
      f0:	af 92       	push	r10
      f2:	bf 92       	push	r11
      f4:	cf 92       	push	r12
      f6:	df 92       	push	r13
      f8:	ef 92       	push	r14
      fa:	ff 92       	push	r15
      fc:	0f 93       	push	r16
      fe:	1f 93       	push	r17
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	7c 01       	movw	r14, r24
	uint8_t i;
	for(i = 0; i < 7; ++i)
     106:	83 e5       	ldi	r24, 0x53	; 83
     108:	a8 2e       	mov	r10, r24
     10a:	82 e0       	ldi	r24, 0x02	; 2
     10c:	b8 2e       	mov	r11, r24
     10e:	9c e4       	ldi	r25, 0x4C	; 76
     110:	c9 2e       	mov	r12, r25
     112:	92 e0       	ldi	r25, 0x02	; 2
     114:	d9 2e       	mov	r13, r25
     116:	cd e0       	ldi	r28, 0x0D	; 13
     118:	d7 e0       	ldi	r29, 0x07	; 7
     11a:	10 e0       	ldi	r17, 0x00	; 0
			{
				++_buttons[i];
			}
			else if(_buttons[i] == BUTTON_DEBOUNCE_TICKS)
			{
				_buttons[i] = BUTTON_DEBOUNCE_TICKS + 1;
     11c:	09 ec       	ldi	r16, 0xC9	; 201
		if(!(*_button_ports[i] & _button_pins[i]))
     11e:	d5 01       	movw	r26, r10
     120:	ed 91       	ld	r30, X+
     122:	fd 91       	ld	r31, X+
     124:	5d 01       	movw	r10, r26
     126:	80 81       	ld	r24, Z
     128:	f6 01       	movw	r30, r12
     12a:	91 91       	ld	r25, Z+
     12c:	6f 01       	movw	r12, r30
     12e:	89 23       	and	r24, r25
     130:	d9 f4       	brne	.+54     	; 0x168 <button_check+0x78>
			if(_buttons[i] < BUTTON_DEBOUNCE_TICKS)
     132:	88 81       	ld	r24, Y
     134:	88 3c       	cpi	r24, 0xC8	; 200
     136:	88 f4       	brcc	.+34     	; 0x15a <button_check+0x6a>
				++_buttons[i];
     138:	8f 5f       	subi	r24, 0xFF	; 255
     13a:	88 83       	st	Y, r24
	for(i = 0; i < 7; ++i)
     13c:	1f 5f       	subi	r17, 0xFF	; 255
     13e:	21 96       	adiw	r28, 0x01	; 1
     140:	17 30       	cpi	r17, 0x07	; 7
     142:	69 f7       	brne	.-38     	; 0x11e <button_check+0x2e>
		else
		{
			_buttons[i] = 0;
		}
	}
}
     144:	df 91       	pop	r29
     146:	cf 91       	pop	r28
     148:	1f 91       	pop	r17
     14a:	0f 91       	pop	r16
     14c:	ff 90       	pop	r15
     14e:	ef 90       	pop	r14
     150:	df 90       	pop	r13
     152:	cf 90       	pop	r12
     154:	bf 90       	pop	r11
     156:	af 90       	pop	r10
     158:	08 95       	ret
			else if(_buttons[i] == BUTTON_DEBOUNCE_TICKS)
     15a:	88 3c       	cpi	r24, 0xC8	; 200
     15c:	79 f7       	brne	.-34     	; 0x13c <button_check+0x4c>
				_buttons[i] = BUTTON_DEBOUNCE_TICKS + 1;
     15e:	08 83       	st	Y, r16
				button_event(i);
     160:	81 2f       	mov	r24, r17
     162:	f7 01       	movw	r30, r14
     164:	09 95       	icall
     166:	ea cf       	rjmp	.-44     	; 0x13c <button_check+0x4c>
			_buttons[i] = 0;
     168:	18 82       	st	Y, r1
     16a:	e8 cf       	rjmp	.-48     	; 0x13c <button_check+0x4c>

0000016c <ld_u32>:
static uint32_t ld_u32(const uint8_t *p)
{
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	00 d0       	rcall	.+0      	; 0x172 <ld_u32+0x6>
     172:	00 d0       	rcall	.+0      	; 0x174 <ld_u32+0x8>
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
	return ((uint32_t)p[0]) | (((uint32_t)p[1]) << 8) |
		(((uint32_t)p[2]) << 16) | (((uint32_t)p[3]) << 24);
     178:	fc 01       	movw	r30, r24
     17a:	20 81       	ld	r18, Z
     17c:	31 81       	ldd	r19, Z+1	; 0x01
     17e:	42 81       	ldd	r20, Z+2	; 0x02
     180:	53 81       	ldd	r21, Z+3	; 0x03
}
     182:	ca 01       	movw	r24, r20
     184:	b9 01       	movw	r22, r18
     186:	0f 90       	pop	r0
     188:	0f 90       	pop	r0
     18a:	0f 90       	pop	r0
     18c:	0f 90       	pop	r0
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	08 95       	ret

00000194 <mem_cmp>:
	}
}

static uint8_t mem_cmp
	(const uint8_t *dst, const uint8_t *src, uint16_t cnt)
{
     194:	9c 01       	movw	r18, r24
	uint8_t r = 0;
	while(cnt-- && (r = *dst++ == *src++)) ;
     196:	48 0f       	add	r20, r24
     198:	59 1f       	adc	r21, r25
	uint8_t r = 0;
     19a:	80 e0       	ldi	r24, 0x00	; 0
	while(cnt-- && (r = *dst++ == *src++)) ;
     19c:	24 17       	cp	r18, r20
     19e:	35 07       	cpc	r19, r21
     1a0:	49 f0       	breq	.+18     	; 0x1b4 <mem_cmp+0x20>
     1a2:	fb 01       	movw	r30, r22
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	d9 01       	movw	r26, r18
     1a8:	6d 91       	ld	r22, X+
     1aa:	9d 01       	movw	r18, r26
     1ac:	91 91       	ld	r25, Z+
     1ae:	69 17       	cp	r22, r25
     1b0:	11 f0       	breq	.+4      	; 0x1b6 <mem_cmp+0x22>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
	return r;
}
     1b4:	08 95       	ret
	while(cnt-- && (r = *dst++ == *src++)) ;
     1b6:	bf 01       	movw	r22, r30
     1b8:	f1 cf       	rjmp	.-30     	; 0x19c <mem_cmp+0x8>

000001ba <_spi_xchg>:

static uint8_t _card_type;

static uint8_t _spi_xchg(uint8_t b)
{
	SPDR = b;
     1ba:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF))) ;
     1bc:	0d b4       	in	r0, 0x2d	; 45
     1be:	07 fe       	sbrs	r0, 7
     1c0:	fd cf       	rjmp	.-6      	; 0x1bc <_spi_xchg+0x2>
	SPSR &= ~(1 << SPIF);
     1c2:	8d b5       	in	r24, 0x2d	; 45
     1c4:	8f 77       	andi	r24, 0x7F	; 127
     1c6:	8d bd       	out	0x2d, r24	; 45
	return SPDR;
     1c8:	8e b5       	in	r24, 0x2e	; 46
}
     1ca:	08 95       	ret

000001cc <_command>:

static uint8_t _command(uint8_t cmd, uint32_t arg)
{
     1cc:	ff 92       	push	r15
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	c8 2f       	mov	r28, r24
     1d8:	d4 2f       	mov	r29, r20
     1da:	15 2f       	mov	r17, r21
     1dc:	06 2f       	mov	r16, r22
     1de:	f7 2e       	mov	r15, r23
	uint8_t i, response;
	_spi_xchg(0xFF);
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
     1e2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
	_spi_xchg(0x40 | cmd);
     1e6:	8c 2f       	mov	r24, r28
     1e8:	80 64       	ori	r24, 0x40	; 64
     1ea:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
	_spi_xchg((arg >> 24) & 0xFF);
     1ee:	8f 2d       	mov	r24, r15
     1f0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
	_spi_xchg((arg >> 16) & 0xFF);
     1f4:	80 2f       	mov	r24, r16
     1f6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
	_spi_xchg((arg >> 8) & 0xFF);
     1fa:	81 2f       	mov	r24, r17
     1fc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
	_spi_xchg((arg >> 0) & 0xFF);
     200:	8d 2f       	mov	r24, r29
     202:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
	switch(cmd)
	{
	case CMD_GO_IDLE_STATE:
		_spi_xchg(0x95);
     206:	85 e9       	ldi	r24, 0x95	; 149
	switch(cmd)
     208:	cc 23       	and	r28, r28
     20a:	21 f0       	breq	.+8      	; 0x214 <_command+0x48>
		break;

	case CMD_SEND_IF_COND:
		_spi_xchg(0x87);
     20c:	87 e8       	ldi	r24, 0x87	; 135
	switch(cmd)
     20e:	c8 30       	cpi	r28, 0x08	; 8
     210:	09 f0       	breq	.+2      	; 0x214 <_command+0x48>
		break;

	default:
		_spi_xchg(0xFF);
     212:	8f ef       	ldi	r24, 0xFF	; 255
		_spi_xchg(0x87);
     214:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
{
     218:	ca e0       	ldi	r28, 0x0A	; 10
		break;
	}

	for(i = 0; i < 10 && ((response = _spi_xchg(0xFF)) == 0xFF); ++i) ;
     21a:	8f ef       	ldi	r24, 0xFF	; 255
     21c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
     220:	8f 3f       	cpi	r24, 0xFF	; 255
     222:	11 f4       	brne	.+4      	; 0x228 <_command+0x5c>
     224:	c1 50       	subi	r28, 0x01	; 1
     226:	c9 f7       	brne	.-14     	; 0x21a <_command+0x4e>
	return response;
}
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	08 95       	ret

00000234 <clust2sect>:

	return ld_u32(buf) & 0x0FFFFFFF;
}

static uint32_t clust2sect(uint32_t cluster)
{
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	00 d0       	rcall	.+0      	; 0x23a <clust2sect+0x6>
     23a:	00 d0       	rcall	.+0      	; 0x23c <clust2sect+0x8>
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
	cluster -= 2;
     240:	9b 01       	movw	r18, r22
     242:	ac 01       	movw	r20, r24
     244:	22 50       	subi	r18, 0x02	; 2
     246:	31 09       	sbc	r19, r1
     248:	41 09       	sbc	r20, r1
     24a:	51 09       	sbc	r21, r1
	if(cluster >= (_fs.n_fatent - 2))
     24c:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <_fs+0x3>
     250:	90 91 e9 06 	lds	r25, 0x06E9	; 0x8006e9 <_fs+0x4>
     254:	a0 91 ea 06 	lds	r26, 0x06EA	; 0x8006ea <_fs+0x5>
     258:	b0 91 eb 06 	lds	r27, 0x06EB	; 0x8006eb <_fs+0x6>
     25c:	02 97       	sbiw	r24, 0x02	; 2
     25e:	a1 09       	sbc	r26, r1
     260:	b1 09       	sbc	r27, r1
     262:	28 17       	cp	r18, r24
     264:	39 07       	cpc	r19, r25
     266:	4a 07       	cpc	r20, r26
     268:	5b 07       	cpc	r21, r27
     26a:	40 f5       	brcc	.+80     	; 0x2bc <clust2sect+0x88>
	{
		return 0;
	}

	return cluster * _fs.csize + _fs.database;
     26c:	a0 91 e5 06 	lds	r26, 0x06E5	; 0x8006e5 <_fs>
     270:	b0 e0       	ldi	r27, 0x00	; 0
     272:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__muluhisi3>
     276:	69 83       	std	Y+1, r22	; 0x01
     278:	7a 83       	std	Y+2, r23	; 0x02
     27a:	8b 83       	std	Y+3, r24	; 0x03
     27c:	9c 83       	std	Y+4, r25	; 0x04
     27e:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <_fs+0xf>
     282:	90 91 f5 06 	lds	r25, 0x06F5	; 0x8006f5 <_fs+0x10>
     286:	a0 91 f6 06 	lds	r26, 0x06F6	; 0x8006f6 <_fs+0x11>
     28a:	b0 91 f7 06 	lds	r27, 0x06F7	; 0x8006f7 <_fs+0x12>
     28e:	29 81       	ldd	r18, Y+1	; 0x01
     290:	3a 81       	ldd	r19, Y+2	; 0x02
     292:	4b 81       	ldd	r20, Y+3	; 0x03
     294:	5c 81       	ldd	r21, Y+4	; 0x04
     296:	28 0f       	add	r18, r24
     298:	39 1f       	adc	r19, r25
     29a:	4a 1f       	adc	r20, r26
     29c:	5b 1f       	adc	r21, r27
     29e:	29 83       	std	Y+1, r18	; 0x01
     2a0:	3a 83       	std	Y+2, r19	; 0x02
     2a2:	4b 83       	std	Y+3, r20	; 0x03
     2a4:	5c 83       	std	Y+4, r21	; 0x04
}
     2a6:	69 81       	ldd	r22, Y+1	; 0x01
     2a8:	7a 81       	ldd	r23, Y+2	; 0x02
     2aa:	8b 81       	ldd	r24, Y+3	; 0x03
     2ac:	9c 81       	ldd	r25, Y+4	; 0x04
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret
		return 0;
     2bc:	19 82       	std	Y+1, r1	; 0x01
     2be:	1a 82       	std	Y+2, r1	; 0x02
     2c0:	1b 82       	std	Y+3, r1	; 0x03
     2c2:	1c 82       	std	Y+4, r1	; 0x04
     2c4:	f0 cf       	rjmp	.-32     	; 0x2a6 <clust2sect+0x72>

000002c6 <dir_rewind>:
	sfn[11] = (c <= ' ');
	return 0;
}

static uint8_t dir_rewind(dir_t *dj)
{
     2c6:	0f 93       	push	r16
     2c8:	1f 93       	push	r17
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	ec 01       	movw	r28, r24
	uint32_t cluster;
	dj->index = 0;
     2d0:	19 82       	std	Y+1, r1	; 0x01
     2d2:	18 82       	st	Y, r1
	cluster = dj->sclust;
     2d4:	6c 81       	ldd	r22, Y+4	; 0x04
     2d6:	7d 81       	ldd	r23, Y+5	; 0x05
     2d8:	8e 81       	ldd	r24, Y+6	; 0x06
     2da:	9f 81       	ldd	r25, Y+7	; 0x07
	if(cluster == 1 || cluster >= _fs.n_fatent)
     2dc:	61 30       	cpi	r22, 0x01	; 1
     2de:	71 05       	cpc	r23, r1
     2e0:	81 05       	cpc	r24, r1
     2e2:	91 05       	cpc	r25, r1
     2e4:	51 f1       	breq	.+84     	; 0x33a <dir_rewind+0x74>
     2e6:	00 91 e8 06 	lds	r16, 0x06E8	; 0x8006e8 <_fs+0x3>
     2ea:	10 91 e9 06 	lds	r17, 0x06E9	; 0x8006e9 <_fs+0x4>
     2ee:	20 91 ea 06 	lds	r18, 0x06EA	; 0x8006ea <_fs+0x5>
     2f2:	30 91 eb 06 	lds	r19, 0x06EB	; 0x8006eb <_fs+0x6>
     2f6:	60 17       	cp	r22, r16
     2f8:	71 07       	cpc	r23, r17
     2fa:	82 07       	cpc	r24, r18
     2fc:	93 07       	cpc	r25, r19
     2fe:	e8 f4       	brcc	.+58     	; 0x33a <dir_rewind+0x74>
	{
		return 1;
	}

	if(!cluster)
     300:	61 15       	cp	r22, r1
     302:	71 05       	cpc	r23, r1
     304:	81 05       	cpc	r24, r1
     306:	91 05       	cpc	r25, r1
     308:	41 f4       	brne	.+16     	; 0x31a <dir_rewind+0x54>
	{
		cluster = (uint32_t)_fs.dirbase;
     30a:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <_fs+0xb>
     30e:	70 91 f1 06 	lds	r23, 0x06F1	; 0x8006f1 <_fs+0xc>
     312:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <_fs+0xd>
     316:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <_fs+0xe>
	}

	dj->clust = cluster;
     31a:	68 87       	std	Y+8, r22	; 0x08
     31c:	79 87       	std	Y+9, r23	; 0x09
     31e:	8a 87       	std	Y+10, r24	; 0x0a
     320:	9b 87       	std	Y+11, r25	; 0x0b
	dj->sect = clust2sect(cluster);
     322:	0e 94 1a 01 	call	0x234	; 0x234 <clust2sect>
     326:	6c 87       	std	Y+12, r22	; 0x0c
     328:	7d 87       	std	Y+13, r23	; 0x0d
     32a:	8e 87       	std	Y+14, r24	; 0x0e
     32c:	9f 87       	std	Y+15, r25	; 0x0f
	return 0;
     32e:	80 e0       	ldi	r24, 0x00	; 0
}
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	1f 91       	pop	r17
     336:	0f 91       	pop	r16
     338:	08 95       	ret
		return 1;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	f9 cf       	rjmp	.-14     	; 0x330 <dir_rewind+0x6a>

0000033e <player_audio_start>:
	return 0;
}

static void player_audio_start(void)
{
	TCCR0B = (1 << CS00);
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	85 bd       	out	0x25, r24	; 37
	TCCR2B = (1 << CS21);
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TCCR2A = (1 << WGM21);
     348:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TIMSK2 = (1 << OCIE2A);
     34c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TCCR0A = (1 << COM0A1) | (1 << COM0B1) |
     350:	83 ea       	ldi	r24, 0xA3	; 163
     352:	84 bd       	out	0x24, r24	; 36
		(1 << WGM01) | (1 << WGM00);
	OCR0A = 0;
     354:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
     356:	18 bc       	out	0x28, r1	; 40
	sei();
     358:	78 94       	sei
}
     35a:	08 95       	ret

0000035c <player_audio_stop>:

static void player_audio_stop(void)
{
	TCCR0B = 0;
     35c:	15 bc       	out	0x25, r1	; 37
	TCCR2B = 0;
     35e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TCCR2A = 0;
     362:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TIMSK2 = 0;
     366:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TCCR0A = 0;
     36a:	14 bc       	out	0x24, r1	; 36
	OCR0A = 0;
     36c:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
     36e:	18 bc       	out	0x28, r1	; 40
	cli();
     370:	f8 94       	cli
}
     372:	08 95       	ret

00000374 <path_up>:
}

static void path_up(void)
{
	char *s;
	for(s = dir_path + dir_path_len; s >= dir_path; --s)
     374:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <dir_path_len>
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	e0 50       	subi	r30, 0x00	; 0
     37c:	ff 4f       	sbci	r31, 0xFF	; 255
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	e0 30       	cpi	r30, 0x00	; 0
     382:	f8 07       	cpc	r31, r24
     384:	18 f0       	brcs	.+6      	; 0x38c <path_up+0x18>
	{
		if(*s == '/')
     386:	80 81       	ld	r24, Z
     388:	8f 32       	cpi	r24, 0x2F	; 47
     38a:	31 f4       	brne	.+12     	; 0x398 <path_up+0x24>
		{
			break;
		}
	}

	*s = '\0';
     38c:	10 82       	st	Z, r1
	dir_path_len = s - dir_path;
     38e:	e0 50       	subi	r30, 0x00	; 0
     390:	f1 40       	sbci	r31, 0x01	; 1
     392:	e0 93 94 02 	sts	0x0294, r30	; 0x800294 <dir_path_len>
}
     396:	08 95       	ret
	for(s = dir_path + dir_path_len; s >= dir_path; --s)
     398:	31 97       	sbiw	r30, 0x01	; 1
     39a:	f1 cf       	rjmp	.-30     	; 0x37e <path_up+0xa>

0000039c <lcd_enable>:
#define lcd_cursor(x, y) \
	lcd_command(LCD_SET_DDADR + (x) + ((y) ? LCD_OFFSET_SECOND_ROW : 0))

static void lcd_enable(void)
{
	LCD_OUT |= (1 << LCD_EN);
     39c:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     39e:	8a e6       	ldi	r24, 0x6A	; 106
     3a0:	8a 95       	dec	r24
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <lcd_enable+0x4>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <lcd_enable+0xa>
	LCD_DELAY_US(LCD_DELAY_US_ENABLE);
	LCD_OUT &= ~(1 << LCD_EN);
     3a6:	5c 98       	cbi	0x0b, 4	; 11
}
     3a8:	08 95       	ret

000003aa <lcd_out>:

static void lcd_out(uint8_t data)
{
	data &= 0xF0;
	LCD_OUT &= ~(0xF0 >> (4 - LCD_DB));
     3aa:	9b b1       	in	r25, 0x0b	; 11
     3ac:	90 7f       	andi	r25, 0xF0	; 240
     3ae:	9b b9       	out	0x0b, r25	; 11
	LCD_OUT |= (data >> (4 - LCD_DB));
     3b0:	9b b1       	in	r25, 0x0b	; 11
     3b2:	82 95       	swap	r24
     3b4:	8f 70       	andi	r24, 0x0F	; 15
     3b6:	89 2b       	or	r24, r25
     3b8:	8b b9       	out	0x0b, r24	; 11
	lcd_enable();
     3ba:	0c 94 ce 01 	jmp	0x39c	; 0x39c <lcd_enable>

000003be <lcd_data>:
		LCD_ENTRY_NOSHIFT);
	lcd_clear();
}

static void lcd_data(uint8_t data)
{
     3be:	cf 93       	push	r28
     3c0:	c8 2f       	mov	r28, r24
	LCD_OUT |= (1 << LCD_RS);
     3c2:	5f 9a       	sbi	0x0b, 7	; 11
	lcd_out(data);
     3c4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <lcd_out>
	lcd_out(data << 4);
     3c8:	8c 2f       	mov	r24, r28
     3ca:	82 95       	swap	r24
     3cc:	80 7f       	andi	r24, 0xF0	; 240
     3ce:	0e 94 d5 01 	call	0x3aa	; 0x3aa <lcd_out>
     3d2:	85 ef       	ldi	r24, 0xF5	; 245
     3d4:	8a 95       	dec	r24
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_data+0x16>
     3d8:	00 00       	nop
	LCD_DELAY_US(LCD_DELAY_US_DATA);
}
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <lcd_string>:
	lcd_command(LCD_CLEAR_DISPLAY);
	LCD_DELAY_MS(LCD_DELAY_MS_CLEAR);
}

static void lcd_string(const char *s)
{
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	ec 01       	movw	r28, r24
	register uint8_t c;
	for(; (c = (uint8_t)*s); ++s)
     3e4:	89 91       	ld	r24, Y+
     3e6:	81 11       	cpse	r24, r1
     3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <lcd_string+0x12>
	{
		lcd_data(c);
	}
}
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret
		lcd_data(c);
     3f0:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_data>
	for(; (c = (uint8_t)*s); ++s)
     3f4:	f7 cf       	rjmp	.-18     	; 0x3e4 <lcd_string+0x6>

000003f6 <lcd_string_P>:

static void lcd_string_P(const char *s)
{
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	ec 01       	movw	r28, r24
	register uint8_t c;
	for(; (c = (uint8_t)pgm_read_byte(s)); ++s)
     3fc:	fe 01       	movw	r30, r28
     3fe:	84 91       	lpm	r24, Z
     400:	81 11       	cpse	r24, r1
     402:	03 c0       	rjmp	.+6      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
	{
		lcd_data(c);
	}
}
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret
		lcd_data(c);
     40a:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_data>
	for(; (c = (uint8_t)pgm_read_byte(s)); ++s)
     40e:	21 96       	adiw	r28, 0x01	; 1
     410:	f5 cf       	rjmp	.-22     	; 0x3fc <lcd_string_P+0x6>

00000412 <lcd_command>:
{
     412:	cf 93       	push	r28
     414:	c8 2f       	mov	r28, r24
	LCD_OUT &= ~(1 << LCD_RS);
     416:	5f 98       	cbi	0x0b, 7	; 11
	lcd_out(data);
     418:	0e 94 d5 01 	call	0x3aa	; 0x3aa <lcd_out>
	lcd_out(data << 4);
     41c:	8c 2f       	mov	r24, r28
     41e:	82 95       	swap	r24
     420:	80 7f       	andi	r24, 0xF0	; 240
     422:	0e 94 d5 01 	call	0x3aa	; 0x3aa <lcd_out>
     426:	80 ee       	ldi	r24, 0xE0	; 224
     428:	8a 95       	dec	r24
     42a:	f1 f7       	brne	.-4      	; 0x428 <lcd_command+0x16>
}
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <lcd_gchar>:

static void lcd_gchar(uint8_t addr, const uint8_t *data)
{
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	8b 01       	movw	r16, r22
	uint8_t i;
	lcd_command(LCD_SET_CGADR | (addr << 3));
     43a:	28 e0       	ldi	r18, 0x08	; 8
     43c:	82 9f       	mul	r24, r18
     43e:	c0 01       	movw	r24, r0
     440:	11 24       	eor	r1, r1
     442:	80 64       	ori	r24, 0x40	; 64
     444:	0e 94 09 02 	call	0x412	; 0x412 <lcd_command>
	for(i = 0; i < 8; ++i)
     448:	e8 01       	movw	r28, r16
     44a:	08 5f       	subi	r16, 0xF8	; 248
     44c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_data(data[i]);
     44e:	89 91       	ld	r24, Y+
     450:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_data>
	for(i = 0; i < 8; ++i)
     454:	c0 17       	cp	r28, r16
     456:	d1 07       	cpc	r29, r17
     458:	d1 f7       	brne	.-12     	; 0x44e <lcd_gchar+0x1e>
	}

	lcd_command(LCD_SET_DDADR);
     45a:	80 e8       	ldi	r24, 0x80	; 128
}
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
	lcd_command(LCD_SET_DDADR);
     464:	0c 94 09 02 	jmp	0x412	; 0x412 <lcd_command>

00000468 <player_render_pause>:
	}
}

static void player_render_pause(void)
{
	lcd_cursor(0, 0);
     468:	80 e8       	ldi	r24, 0x80	; 128
     46a:	0e 94 09 02 	call	0x412	; 0x412 <lcd_command>
	lcd_char(player_flags.Paused ? LCD_CHAR_PAUSE : LCD_CHAR_PLAY);
     46e:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <player_flags>
     472:	86 95       	lsr	r24
     474:	81 70       	andi	r24, 0x01	; 1
     476:	0c 94 df 01 	jmp	0x3be	; 0x3be <lcd_data>

0000047a <player_render_interval>:
	lcd_cursor(12, 0);
	lcd_char(LCD_CHAR_PLUS_MINUS);
}

static void player_render_interval(void)
{
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
	const char *s = player_skip_interval_str + 3 * player_skip_idx;
     47e:	c0 91 d1 06 	lds	r28, 0x06D1	; 0x8006d1 <player_skip_idx>
     482:	83 e0       	ldi	r24, 0x03	; 3
     484:	c8 9f       	mul	r28, r24
     486:	e0 01       	movw	r28, r0
     488:	11 24       	eor	r1, r1
     48a:	c1 56       	subi	r28, 0x61	; 97
     48c:	df 4f       	sbci	r29, 0xFF	; 255
	lcd_cursor(13, 0);
     48e:	8d e8       	ldi	r24, 0x8D	; 141
     490:	0e 94 09 02 	call	0x412	; 0x412 <lcd_command>
	lcd_char(pgm_read_byte(s));
     494:	fe 01       	movw	r30, r28
     496:	84 91       	lpm	r24, Z
     498:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_data>
	lcd_char(pgm_read_byte(s + 1));
     49c:	fe 01       	movw	r30, r28
     49e:	31 96       	adiw	r30, 0x01	; 1
     4a0:	84 91       	lpm	r24, Z
     4a2:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_data>
	lcd_char(pgm_read_byte(s + 2));
     4a6:	fe 01       	movw	r30, r28
     4a8:	32 96       	adiw	r30, 0x02	; 2
     4aa:	84 91       	lpm	r24, Z
}
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
	lcd_char(pgm_read_byte(s + 2));
     4b0:	0c 94 df 01 	jmp	0x3be	; 0x3be <lcd_data>

000004b4 <player_event>:
	switch(button)
     4b4:	87 30       	cpi	r24, 0x07	; 7
     4b6:	c8 f5       	brcc	.+114    	; 0x52a <player_event+0x76>
     4b8:	e8 2f       	mov	r30, r24
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	e4 57       	subi	r30, 0x74	; 116
     4be:	fd 4e       	sbci	r31, 0xED	; 237
     4c0:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__tablejump2__>
			if(player_flags.Paused)
     4c4:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <player_flags>
     4c8:	81 ff       	sbrs	r24, 1
     4ca:	07 c0       	rjmp	.+14     	; 0x4da <player_event+0x26>
				player_flags.Paused = 0;
     4cc:	8d 7f       	andi	r24, 0xFD	; 253
     4ce:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <player_flags>
				player_render_pause();
     4d2:	0e 94 34 02 	call	0x468	; 0x468 <player_render_pause>
				player_audio_start();
     4d6:	0c 94 9f 01 	jmp	0x33e	; 0x33e <player_audio_start>
				player_flags.Paused = 1;
     4da:	82 60       	ori	r24, 0x02	; 2
     4dc:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <player_flags>
				player_render_pause();
     4e0:	0e 94 34 02 	call	0x468	; 0x468 <player_render_pause>
				player_audio_stop();
     4e4:	0c 94 ae 01 	jmp	0x35c	; 0x35c <player_audio_stop>
			player_flags.SkipFwd = 1;
     4e8:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <player_flags>
     4ec:	88 60       	ori	r24, 0x08	; 8
			player_flags.SkipBwd = 1;
     4ee:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <player_flags>
			break;
     4f2:	08 95       	ret
			if(player_skip_idx < PLAYER_NUM_INTERVALS - 1)
     4f4:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <player_skip_idx>
     4f8:	85 30       	cpi	r24, 0x05	; 5
     4fa:	b8 f4       	brcc	.+46     	; 0x52a <player_event+0x76>
				++player_skip_idx;
     4fc:	8f 5f       	subi	r24, 0xFF	; 255
				--player_skip_idx;
     4fe:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <player_skip_idx>
				player_render_interval();
     502:	0c 94 3d 02 	jmp	0x47a	; 0x47a <player_render_interval>
			player_flags.Rewind = 1;
     506:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <player_flags>
     50a:	84 60       	ori	r24, 0x04	; 4
     50c:	f0 cf       	rjmp	.-32     	; 0x4ee <player_event+0x3a>
			player_flags.Exit = 1;
     50e:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <player_flags>
     512:	81 60       	ori	r24, 0x01	; 1
     514:	ec cf       	rjmp	.-40     	; 0x4ee <player_event+0x3a>
			player_flags.SkipBwd = 1;
     516:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <player_flags>
     51a:	80 61       	ori	r24, 0x10	; 16
     51c:	e8 cf       	rjmp	.-48     	; 0x4ee <player_event+0x3a>
			if(player_skip_idx > 0)
     51e:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <player_skip_idx>
     522:	88 23       	and	r24, r24
     524:	11 f0       	breq	.+4      	; 0x52a <player_event+0x76>
				--player_skip_idx;
     526:	81 50       	subi	r24, 0x01	; 1
     528:	ea cf       	rjmp	.-44     	; 0x4fe <player_event+0x4a>
}
     52a:	08 95       	ret

0000052c <dir_out_file>:

static void dir_out_file(uint8_t line)
{
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	c8 2f       	mov	r28, r24
	char *s, c;
	lcd_cursor(2, line);
     53e:	82 e8       	ldi	r24, 0x82	; 130
     540:	c1 11       	cpse	r28, r1
     542:	82 ec       	ldi	r24, 0xC2	; 194
     544:	0e 94 09 02 	call	0x412	; 0x412 <lcd_command>
	s = dirent[line].name;
     548:	cc 2e       	mov	r12, r28
     54a:	d1 2c       	mov	r13, r1
     54c:	82 e1       	ldi	r24, 0x12	; 18
     54e:	c8 9f       	mul	r28, r24
     550:	80 01       	movw	r16, r0
     552:	11 24       	eor	r1, r1
     554:	05 56       	subi	r16, 0x65	; 101
     556:	1d 4f       	sbci	r17, 0xFD	; 253
     558:	78 01       	movw	r14, r16
	for(; (c = *s) && c != '.'; ++s)
     55a:	f8 01       	movw	r30, r16
     55c:	81 91       	ld	r24, Z+
     55e:	8f 01       	movw	r16, r30
     560:	81 11       	cpse	r24, r1
     562:	1f c0       	rjmp	.+62     	; 0x5a2 <dir_out_file+0x76>
	{
		lcd_char(c);
	}

	lcd_cursor(13, line);
     564:	8d ec       	ldi	r24, 0xCD	; 205
     566:	c1 11       	cpse	r28, r1
     568:	01 c0       	rjmp	.+2      	; 0x56c <dir_out_file+0x40>
     56a:	8d e8       	ldi	r24, 0x8D	; 141
     56c:	0e 94 09 02 	call	0x412	; 0x412 <lcd_command>
	if(dirent[line].type & AM_DIR)
     570:	82 e1       	ldi	r24, 0x12	; 18
     572:	8c 9d       	mul	r24, r12
     574:	f0 01       	movw	r30, r0
     576:	8d 9d       	mul	r24, r13
     578:	f0 0d       	add	r31, r0
     57a:	11 24       	eor	r1, r1
     57c:	ea 56       	subi	r30, 0x6A	; 106
     57e:	fd 4f       	sbci	r31, 0xFD	; 253
     580:	84 81       	ldd	r24, Z+4	; 0x04
	{
		lcd_string("DIR");
	}
	else
	{
		for(++s; (c = *s); ++s)
     582:	e7 01       	movw	r28, r14
     584:	21 96       	adiw	r28, 0x01	; 1
	if(dirent[line].type & AM_DIR)
     586:	84 ff       	sbrs	r24, 4
     588:	13 c0       	rjmp	.+38     	; 0x5b0 <dir_out_file+0x84>
		lcd_string("DIR");
     58a:	81 e6       	ldi	r24, 0x61	; 97
     58c:	92 e0       	ldi	r25, 0x02	; 2
		{
			lcd_char(c);
		}
	}
}
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
     596:	ff 90       	pop	r15
     598:	ef 90       	pop	r14
     59a:	df 90       	pop	r13
     59c:	cf 90       	pop	r12
		lcd_string("DIR");
     59e:	0c 94 ef 01 	jmp	0x3de	; 0x3de <lcd_string>
	for(; (c = *s) && c != '.'; ++s)
     5a2:	8e 32       	cpi	r24, 0x2E	; 46
     5a4:	f9 f2       	breq	.-66     	; 0x564 <dir_out_file+0x38>
		lcd_char(c);
     5a6:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_data>
	for(; (c = *s) && c != '.'; ++s)
     5aa:	d6 cf       	rjmp	.-84     	; 0x558 <dir_out_file+0x2c>
			lcd_char(c);
     5ac:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_data>
		for(++s; (c = *s); ++s)
     5b0:	89 91       	ld	r24, Y+
     5b2:	81 11       	cpse	r24, r1
     5b4:	fb cf       	rjmp	.-10     	; 0x5ac <dir_out_file+0x80>
}
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	08 95       	ret

000005c8 <lcd_clear>:
	lcd_command(LCD_CLEAR_DISPLAY);
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	0e 94 09 02 	call	0x412	; 0x412 <lcd_command>
	__builtin_avr_delay_cycles(__ticks_dc);
     5ce:	8f e3       	ldi	r24, 0x3F	; 63
     5d0:	9f e1       	ldi	r25, 0x1F	; 31
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <lcd_clear+0xa>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <lcd_clear+0x10>
     5d8:	00 00       	nop
}
     5da:	08 95       	ret

000005dc <mode_error>:
static const char error_sd[] PROGMEM = "SD-Card Error";
static const char error_fat[] PROGMEM = "FAT32 Error";
static const char error_io[] PROGMEM = "I/O Error";

static void mode_error(const char *msg)
{
     5dc:	d8 2f       	mov	r29, r24
     5de:	c9 2f       	mov	r28, r25
	static const char notice[] PROGMEM = "Reset required";
	player_audio_stop();
     5e0:	0e 94 ae 01 	call	0x35c	; 0x35c <player_audio_stop>
	lcd_clear();
     5e4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_clear>

	/* First Line */
	lcd_string_P(msg);
     5e8:	8d 2f       	mov	r24, r29
     5ea:	9c 2f       	mov	r25, r28
     5ec:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_string_P>

	/* Second Line */
	lcd_cursor(0, 1);
     5f0:	80 ec       	ldi	r24, 0xC0	; 192
     5f2:	0e 94 09 02 	call	0x412	; 0x412 <lcd_command>
	lcd_string_P(notice);
     5f6:	86 e7       	ldi	r24, 0x76	; 118
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_string_P>
	for(;;) ;
     5fe:	ff cf       	rjmp	.-2      	; 0x5fe <mode_error+0x22>

00000600 <dir_render>:

static void dir_render(void)
{
	lcd_clear();
     600:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_clear>

	/* Selected file */
	lcd_cursor(0, dir_sel & 1);
     604:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <dir_sel>
     608:	20 e4       	ldi	r18, 0x40	; 64
     60a:	82 9f       	mul	r24, r18
     60c:	c0 01       	movw	r24, r0
     60e:	11 24       	eor	r1, r1
     610:	80 74       	andi	r24, 0x40	; 64
     612:	80 58       	subi	r24, 0x80	; 128
     614:	0e 94 09 02 	call	0x412	; 0x412 <lcd_command>
	lcd_char('>');
     618:	8e e3       	ldi	r24, 0x3E	; 62
     61a:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_data>

	/* Filenames */
	dir_out_file(0);
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	0e 94 96 02 	call	0x52c	; 0x52c <dir_out_file>
	if(dir_sel != 2)
     624:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <dir_sel>
     628:	82 30       	cpi	r24, 0x02	; 2
     62a:	19 f0       	breq	.+6      	; 0x632 <dir_render+0x32>
	{
		dir_out_file(1);
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	0c 94 96 02 	jmp	0x52c	; 0x52c <dir_out_file>
	}
}
     632:	08 95       	ret

00000634 <sd_read>:
	return 0;
}

static uint8_t sd_read
	(uint8_t *buffer, uint32_t block, uint16_t offset, uint16_t count)
{
     634:	af 92       	push	r10
     636:	bf 92       	push	r11
     638:	cf 92       	push	r12
     63a:	df 92       	push	r13
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	b8 2e       	mov	r11, r24
     64a:	a9 2e       	mov	r10, r25
     64c:	e9 01       	movw	r28, r18
     64e:	78 01       	movw	r14, r16
	uint16_t i;
	SELECT();
     650:	2a 98       	cbi	0x05, 2	; 5
	if(_command(CMD_READ_SINGLE_BLOCK,
     652:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <_card_type>
     656:	82 fd       	sbrc	r24, 2
     658:	07 c0       	rjmp	.+14     	; 0x668 <sd_read+0x34>
     65a:	89 e0       	ldi	r24, 0x09	; 9
     65c:	76 95       	lsr	r23
     65e:	67 95       	ror	r22
     660:	57 95       	ror	r21
     662:	47 95       	ror	r20
     664:	8a 95       	dec	r24
     666:	d1 f7       	brne	.-12     	; 0x65c <sd_read+0x28>
     668:	81 e1       	ldi	r24, 0x11	; 17
     66a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_command>
     66e:	18 2f       	mov	r17, r24
	{
		DESELECT();
		return 1;
	}

	for(i = 0; ; ++i)
     670:	d1 2c       	mov	r13, r1
     672:	c1 2c       	mov	r12, r1
	if(_command(CMD_READ_SINGLE_BLOCK,
     674:	88 23       	and	r24, r24
     676:	71 f0       	breq	.+28     	; 0x694 <sd_read+0x60>
			break;
		}

		if(i == 0xFFFF)
		{
			DESELECT();
     678:	2a 9a       	sbi	0x05, 2	; 5
			return 1;
     67a:	11 e0       	ldi	r17, 0x01	; 1
	_spi_xchg(0xFF);
	_spi_xchg(0xFF);
	DESELECT();
	_spi_xchg(0xFF);
	return 0;
}
     67c:	81 2f       	mov	r24, r17
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	bf 90       	pop	r11
     690:	af 90       	pop	r10
     692:	08 95       	ret
		if(_spi_xchg(0xFF) == 0xFE)
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
     69a:	8e 3f       	cpi	r24, 0xFE	; 254
     69c:	29 f1       	breq	.+74     	; 0x6e8 <sd_read+0xb4>
		if(i == 0xFFFF)
     69e:	8f ef       	ldi	r24, 0xFF	; 255
     6a0:	c8 16       	cp	r12, r24
     6a2:	d8 06       	cpc	r13, r24
     6a4:	49 f3       	breq	.-46     	; 0x678 <sd_read+0x44>
	for(i = 0; ; ++i)
     6a6:	ef ef       	ldi	r30, 0xFF	; 255
     6a8:	ce 1a       	sub	r12, r30
     6aa:	de 0a       	sbc	r13, r30
		if(_spi_xchg(0xFF) == 0xFE)
     6ac:	f3 cf       	rjmp	.-26     	; 0x694 <sd_read+0x60>
		_spi_xchg(0xFF);
     6ae:	8f ef       	ldi	r24, 0xFF	; 255
     6b0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
	for(i = 0; i < offset; ++i)
     6b4:	ff ef       	ldi	r31, 0xFF	; 255
     6b6:	cf 1a       	sub	r12, r31
     6b8:	df 0a       	sbc	r13, r31
     6ba:	cc 15       	cp	r28, r12
     6bc:	dd 05       	cpc	r29, r13
     6be:	b9 f7       	brne	.-18     	; 0x6ae <sd_read+0x7a>
	for(; i < offset + count; ++i)
     6c0:	ec 0e       	add	r14, r28
     6c2:	fd 1e       	adc	r15, r29
     6c4:	ce 15       	cp	r28, r14
     6c6:	df 05       	cpc	r29, r15
     6c8:	90 f0       	brcs	.+36     	; 0x6ee <sd_read+0xba>
		_spi_xchg(0xFF);
     6ca:	8f ef       	ldi	r24, 0xFF	; 255
	for(; i < 512; ++i)
     6cc:	c1 15       	cp	r28, r1
     6ce:	f2 e0       	ldi	r31, 0x02	; 2
     6d0:	df 07       	cpc	r29, r31
     6d2:	c8 f0       	brcs	.+50     	; 0x706 <sd_read+0xd2>
	_spi_xchg(0xFF);
     6d4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
	_spi_xchg(0xFF);
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
	DESELECT();
     6de:	2a 9a       	sbi	0x05, 2	; 5
	_spi_xchg(0xFF);
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
	return 0;
     6e6:	ca cf       	rjmp	.-108    	; 0x67c <sd_read+0x48>
	for(i = 0; i < offset; ++i)
     6e8:	d1 2c       	mov	r13, r1
     6ea:	c1 2c       	mov	r12, r1
     6ec:	e6 cf       	rjmp	.-52     	; 0x6ba <sd_read+0x86>
		*buffer++ = _spi_xchg(0xFF);
     6ee:	cb 2c       	mov	r12, r11
     6f0:	da 2c       	mov	r13, r10
     6f2:	8f ef       	ldi	r24, 0xFF	; 255
     6f4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
     6f8:	f6 01       	movw	r30, r12
     6fa:	81 93       	st	Z+, r24
     6fc:	6f 01       	movw	r12, r30
	for(; i < offset + count; ++i)
     6fe:	21 96       	adiw	r28, 0x01	; 1
		*buffer++ = _spi_xchg(0xFF);
     700:	be 2e       	mov	r11, r30
     702:	ad 2c       	mov	r10, r13
     704:	df cf       	rjmp	.-66     	; 0x6c4 <sd_read+0x90>
		_spi_xchg(0xFF);
     706:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
	for(; i < 512; ++i)
     70a:	21 96       	adiw	r28, 0x01	; 1
     70c:	de cf       	rjmp	.-68     	; 0x6ca <sd_read+0x96>

0000070e <get_fat>:
{
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	28 97       	sbiw	r28, 0x08	; 8
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	de bf       	out	0x3e, r29	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	cd bf       	out	0x3d, r28	; 61
     726:	46 2f       	mov	r20, r22
     728:	57 2f       	mov	r21, r23
     72a:	bc 01       	movw	r22, r24
	if(cluster < 2 || cluster >= _fs.n_fatent)
     72c:	42 30       	cpi	r20, 0x02	; 2
     72e:	51 05       	cpc	r21, r1
     730:	61 05       	cpc	r22, r1
     732:	71 05       	cpc	r23, r1
     734:	08 f4       	brcc	.+2      	; 0x738 <get_fat+0x2a>
     736:	49 c0       	rjmp	.+146    	; 0x7ca <get_fat+0xbc>
     738:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <_fs+0x3>
     73c:	90 91 e9 06 	lds	r25, 0x06E9	; 0x8006e9 <_fs+0x4>
     740:	a0 91 ea 06 	lds	r26, 0x06EA	; 0x8006ea <_fs+0x5>
     744:	b0 91 eb 06 	lds	r27, 0x06EB	; 0x8006eb <_fs+0x6>
     748:	48 17       	cp	r20, r24
     74a:	59 07       	cpc	r21, r25
     74c:	6a 07       	cpc	r22, r26
     74e:	7b 07       	cpc	r23, r27
     750:	e0 f5       	brcc	.+120    	; 0x7ca <get_fat+0xbc>
		((uint16_t)cluster % 128) * 4, 4))
     752:	9a 01       	movw	r18, r20
     754:	2f 77       	andi	r18, 0x7F	; 127
     756:	33 27       	eor	r19, r19
	if(sd_read(buf, _fs.fatbase + cluster / 128,
     758:	22 0f       	add	r18, r18
     75a:	33 1f       	adc	r19, r19
     75c:	22 0f       	add	r18, r18
     75e:	33 1f       	adc	r19, r19
     760:	97 e0       	ldi	r25, 0x07	; 7
     762:	76 95       	lsr	r23
     764:	67 95       	ror	r22
     766:	57 95       	ror	r21
     768:	47 95       	ror	r20
     76a:	9a 95       	dec	r25
     76c:	d1 f7       	brne	.-12     	; 0x762 <get_fat+0x54>
     76e:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <_fs+0x7>
     772:	90 91 ed 06 	lds	r25, 0x06ED	; 0x8006ed <_fs+0x8>
     776:	a0 91 ee 06 	lds	r26, 0x06EE	; 0x8006ee <_fs+0x9>
     77a:	b0 91 ef 06 	lds	r27, 0x06EF	; 0x8006ef <_fs+0xa>
     77e:	48 0f       	add	r20, r24
     780:	59 1f       	adc	r21, r25
     782:	6a 1f       	adc	r22, r26
     784:	7b 1f       	adc	r23, r27
     786:	04 e0       	ldi	r16, 0x04	; 4
     788:	10 e0       	ldi	r17, 0x00	; 0
     78a:	ce 01       	movw	r24, r28
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	0e 94 1a 03 	call	0x634	; 0x634 <sd_read>
     792:	81 11       	cpse	r24, r1
     794:	1a c0       	rjmp	.+52     	; 0x7ca <get_fat+0xbc>
	return ld_u32(buf) & 0x0FFFFFFF;
     796:	ce 01       	movw	r24, r28
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_u32>
     79e:	dc 01       	movw	r26, r24
     7a0:	cb 01       	movw	r24, r22
     7a2:	bf 70       	andi	r27, 0x0F	; 15
		return 1;
     7a4:	8d 83       	std	Y+5, r24	; 0x05
     7a6:	9e 83       	std	Y+6, r25	; 0x06
     7a8:	af 83       	std	Y+7, r26	; 0x07
     7aa:	b8 87       	std	Y+8, r27	; 0x08
}
     7ac:	6d 81       	ldd	r22, Y+5	; 0x05
     7ae:	7e 81       	ldd	r23, Y+6	; 0x06
     7b0:	8f 81       	ldd	r24, Y+7	; 0x07
     7b2:	98 85       	ldd	r25, Y+8	; 0x08
     7b4:	28 96       	adiw	r28, 0x08	; 8
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	de bf       	out	0x3e, r29	; 62
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	cd bf       	out	0x3d, r28	; 61
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	1f 91       	pop	r17
     7c6:	0f 91       	pop	r16
     7c8:	08 95       	ret
		return 1;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	a0 e0       	ldi	r26, 0x00	; 0
     7d0:	b0 e0       	ldi	r27, 0x00	; 0
     7d2:	e8 cf       	rjmp	.-48     	; 0x7a4 <get_fat+0x96>

000007d4 <dir_next>:

static uint8_t dir_next(dir_t *dj)
{
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	2a 97       	sbiw	r28, 0x0a	; 10
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	8d 83       	std	Y+5, r24	; 0x05
     7f6:	9e 83       	std	Y+6, r25	; 0x06
	uint32_t clst;
	uint16_t i;
	if(!(i = dj->index + 1) || !dj->sect)
     7f8:	ad 81       	ldd	r26, Y+5	; 0x05
     7fa:	be 81       	ldd	r27, Y+6	; 0x06
     7fc:	0d 91       	ld	r16, X+
     7fe:	1c 91       	ld	r17, X
     800:	0f 5f       	subi	r16, 0xFF	; 255
     802:	1f 4f       	sbci	r17, 0xFF	; 255
     804:	81 f4       	brne	.+32     	; 0x826 <dir_next+0x52>
	{
		return 1;
     806:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	dj->index = i;
	return 0;
}
     808:	2a 96       	adiw	r28, 0x0a	; 10
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	cf 90       	pop	r12
     824:	08 95       	ret
	if(!(i = dj->index + 1) || !dj->sect)
     826:	ed 81       	ldd	r30, Y+5	; 0x05
     828:	fe 81       	ldd	r31, Y+6	; 0x06
     82a:	84 85       	ldd	r24, Z+12	; 0x0c
     82c:	95 85       	ldd	r25, Z+13	; 0x0d
     82e:	a6 85       	ldd	r26, Z+14	; 0x0e
     830:	b7 85       	ldd	r27, Z+15	; 0x0f
     832:	00 97       	sbiw	r24, 0x00	; 0
     834:	a1 05       	cpc	r26, r1
     836:	b1 05       	cpc	r27, r1
     838:	31 f3       	breq	.-52     	; 0x806 <dir_next+0x32>
	if(!(i % 16))
     83a:	98 01       	movw	r18, r16
     83c:	2f 70       	andi	r18, 0x0F	; 15
     83e:	33 27       	eor	r19, r19
     840:	23 2b       	or	r18, r19
     842:	d1 f4       	brne	.+52     	; 0x878 <dir_next+0xa4>
		dj->sect++;
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	a1 1d       	adc	r26, r1
     848:	b1 1d       	adc	r27, r1
     84a:	84 87       	std	Z+12, r24	; 0x0c
     84c:	95 87       	std	Z+13, r25	; 0x0d
     84e:	a6 87       	std	Z+14, r26	; 0x0e
     850:	b7 87       	std	Z+15, r27	; 0x0f
		if(dj->clust == 0)
     852:	80 85       	ldd	r24, Z+8	; 0x08
     854:	91 85       	ldd	r25, Z+9	; 0x09
     856:	a2 85       	ldd	r26, Z+10	; 0x0a
     858:	b3 85       	ldd	r27, Z+11	; 0x0b
     85a:	89 83       	std	Y+1, r24	; 0x01
     85c:	9a 83       	std	Y+2, r25	; 0x02
     85e:	ab 83       	std	Y+3, r26	; 0x03
     860:	bc 83       	std	Y+4, r27	; 0x04
     862:	89 2b       	or	r24, r25
     864:	8a 2b       	or	r24, r26
     866:	8b 2b       	or	r24, r27
     868:	69 f4       	brne	.+26     	; 0x884 <dir_next+0xb0>
			if(i >= _fs.n_rootdir)
     86a:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <_fs+0x1>
     86e:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <_fs+0x2>
     872:	08 17       	cp	r16, r24
     874:	19 07       	cpc	r17, r25
     876:	38 f6       	brcc	.-114    	; 0x806 <dir_next+0x32>
	dj->index = i;
     878:	ed 81       	ldd	r30, Y+5	; 0x05
     87a:	fe 81       	ldd	r31, Y+6	; 0x06
     87c:	11 83       	std	Z+1, r17	; 0x01
     87e:	00 83       	st	Z, r16
	return 0;
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	c2 cf       	rjmp	.-124    	; 0x808 <dir_next+0x34>
			if(((i / 16) & (_fs.csize - 1)) == 0)
     884:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <_fs>
     888:	81 50       	subi	r24, 0x01	; 1
     88a:	99 0b       	sbc	r25, r25
     88c:	98 01       	movw	r18, r16
     88e:	44 e0       	ldi	r20, 0x04	; 4
     890:	36 95       	lsr	r19
     892:	27 95       	ror	r18
     894:	4a 95       	dec	r20
     896:	e1 f7       	brne	.-8      	; 0x890 <dir_next+0xbc>
     898:	82 23       	and	r24, r18
     89a:	93 23       	and	r25, r19
     89c:	89 2b       	or	r24, r25
     89e:	61 f7       	brne	.-40     	; 0x878 <dir_next+0xa4>
				clst = get_fat(dj->clust);
     8a0:	69 81       	ldd	r22, Y+1	; 0x01
     8a2:	7a 81       	ldd	r23, Y+2	; 0x02
     8a4:	8b 81       	ldd	r24, Y+3	; 0x03
     8a6:	9c 81       	ldd	r25, Y+4	; 0x04
     8a8:	0e 94 87 03 	call	0x70e	; 0x70e <get_fat>
				if(clst <= 1)
     8ac:	62 30       	cpi	r22, 0x02	; 2
     8ae:	71 05       	cpc	r23, r1
     8b0:	81 05       	cpc	r24, r1
     8b2:	91 05       	cpc	r25, r1
     8b4:	08 f4       	brcc	.+2      	; 0x8b8 <dir_next+0xe4>
     8b6:	a7 cf       	rjmp	.-178    	; 0x806 <dir_next+0x32>
				if(clst >= _fs.n_fatent)
     8b8:	c0 90 e8 06 	lds	r12, 0x06E8	; 0x8006e8 <_fs+0x3>
     8bc:	d0 90 e9 06 	lds	r13, 0x06E9	; 0x8006e9 <_fs+0x4>
     8c0:	e0 90 ea 06 	lds	r14, 0x06EA	; 0x8006ea <_fs+0x5>
     8c4:	f0 90 eb 06 	lds	r15, 0x06EB	; 0x8006eb <_fs+0x6>
     8c8:	6c 15       	cp	r22, r12
     8ca:	7d 05       	cpc	r23, r13
     8cc:	8e 05       	cpc	r24, r14
     8ce:	9f 05       	cpc	r25, r15
     8d0:	08 f0       	brcs	.+2      	; 0x8d4 <dir_next+0x100>
     8d2:	99 cf       	rjmp	.-206    	; 0x806 <dir_next+0x32>
				dj->clust = clst;
     8d4:	ed 81       	ldd	r30, Y+5	; 0x05
     8d6:	fe 81       	ldd	r31, Y+6	; 0x06
     8d8:	60 87       	std	Z+8, r22	; 0x08
     8da:	71 87       	std	Z+9, r23	; 0x09
     8dc:	82 87       	std	Z+10, r24	; 0x0a
     8de:	93 87       	std	Z+11, r25	; 0x0b
				dj->sect = clust2sect(clst);
     8e0:	0e 94 1a 01 	call	0x234	; 0x234 <clust2sect>
     8e4:	ad 81       	ldd	r26, Y+5	; 0x05
     8e6:	be 81       	ldd	r27, Y+6	; 0x06
     8e8:	1c 96       	adiw	r26, 0x0c	; 12
     8ea:	6d 93       	st	X+, r22
     8ec:	7d 93       	st	X+, r23
     8ee:	8d 93       	st	X+, r24
     8f0:	9c 93       	st	X, r25
     8f2:	1f 97       	sbiw	r26, 0x0f	; 15
     8f4:	c1 cf       	rjmp	.-126    	; 0x878 <dir_next+0xa4>

000008f6 <check_fs>:

	return res;
}

static uint8_t check_fs(uint8_t *buf, uint32_t sect)
{
     8f6:	cf 92       	push	r12
     8f8:	df 92       	push	r13
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
     908:	6a 01       	movw	r12, r20
     90a:	7b 01       	movw	r14, r22
	if(sd_read(buf, sect, 510, 2))
     90c:	02 e0       	ldi	r16, 0x02	; 2
     90e:	10 e0       	ldi	r17, 0x00	; 0
     910:	2e ef       	ldi	r18, 0xFE	; 254
     912:	31 e0       	ldi	r19, 0x01	; 1
     914:	0e 94 1a 03 	call	0x634	; 0x634 <sd_read>
     918:	81 11       	cpse	r24, r1
     91a:	1e c0       	rjmp	.+60     	; 0x958 <__stack+0x59>
	{
		return 3;
	}

	if(ld_u16(buf) != 0xAA55)
     91c:	88 81       	ld	r24, Y
     91e:	99 81       	ldd	r25, Y+1	; 0x01
     920:	85 35       	cpi	r24, 0x55	; 85
     922:	9a 4a       	sbci	r25, 0xAA	; 170
     924:	d9 f4       	brne	.+54     	; 0x95c <__stack+0x5d>
	{
		return 2;
	}

	if(!sd_read(buf, sect, BS_FILESYSTEM_TYPE_32, 2)
     926:	22 e5       	ldi	r18, 0x52	; 82
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	a6 01       	movw	r20, r12
     92c:	b7 01       	movw	r22, r14
     92e:	ce 01       	movw	r24, r28
     930:	0e 94 1a 03 	call	0x634	; 0x634 <sd_read>
     934:	81 11       	cpse	r24, r1
     936:	14 c0       	rjmp	.+40     	; 0x960 <__stack+0x61>
		&& ld_u16(buf) == 0x4146)
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	28 81       	ld	r18, Y
     93c:	39 81       	ldd	r19, Y+1	; 0x01
     93e:	26 34       	cpi	r18, 0x46	; 70
     940:	31 44       	sbci	r19, 0x41	; 65
     942:	09 f4       	brne	.+2      	; 0x946 <__stack+0x47>
     944:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;
	}

	return 1;
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	df 90       	pop	r13
     954:	cf 90       	pop	r12
     956:	08 95       	ret
		return 3;
     958:	83 e0       	ldi	r24, 0x03	; 3
     95a:	f5 cf       	rjmp	.-22     	; 0x946 <__stack+0x47>
		return 2;
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	f3 cf       	rjmp	.-26     	; 0x946 <__stack+0x47>
	return 1;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	f1 cf       	rjmp	.-30     	; 0x946 <__stack+0x47>

00000964 <fat_readdir.constprop.0>:
	}

	return res;
}

static uint8_t fat_readdir(dir_t *dj, direntry_t *fno)
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	ac 97       	sbiw	r28, 0x2c	; 44
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	f8 94       	cli
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	cd bf       	out	0x3d, r28	; 61
     980:	7c 01       	movw	r14, r24
{
	uint8_t res, sp[12], dir[32];
	dj->fn = sp;
     982:	ce 01       	movw	r24, r28
     984:	81 96       	adiw	r24, 0x21	; 33
     986:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <dir+0x3>
     98a:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <dir+0x2>
	res = 2;
     98e:	82 e0       	ldi	r24, 0x02	; 2
	while(dj->sect)
     990:	40 91 c6 02 	lds	r20, 0x02C6	; 0x8002c6 <dir+0xc>
     994:	50 91 c7 02 	lds	r21, 0x02C7	; 0x8002c7 <dir+0xd>
     998:	60 91 c8 02 	lds	r22, 0x02C8	; 0x8002c8 <dir+0xe>
     99c:	70 91 c9 02 	lds	r23, 0x02C9	; 0x8002c9 <dir+0xf>
     9a0:	41 15       	cp	r20, r1
     9a2:	51 05       	cpc	r21, r1
     9a4:	61 05       	cpc	r22, r1
     9a6:	71 05       	cpc	r23, r1
     9a8:	e1 f4       	brne	.+56     	; 0x9e2 <fat_readdir.constprop.0+0x7e>
	if(res)
     9aa:	81 11       	cpse	r24, r1
     9ac:	3e c0       	rjmp	.+124    	; 0xa2a <fat_readdir.constprop.0+0xc6>
	p = fno->name;
     9ae:	87 01       	movw	r16, r14
     9b0:	0b 5f       	subi	r16, 0xFB	; 251
     9b2:	1f 4f       	sbci	r17, 0xFF	; 255
	if(dj->sect)
     9b4:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <dir+0xc>
     9b8:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <dir+0xd>
     9bc:	a0 91 c8 02 	lds	r26, 0x02C8	; 0x8002c8 <dir+0xe>
     9c0:	b0 91 c9 02 	lds	r27, 0x02C9	; 0x8002c9 <dir+0xf>
     9c4:	89 2b       	or	r24, r25
     9c6:	8a 2b       	or	r24, r26
     9c8:	8b 2b       	or	r24, r27
     9ca:	09 f0       	breq	.+2      	; 0x9ce <fat_readdir.constprop.0+0x6a>
     9cc:	48 c0       	rjmp	.+144    	; 0xa5e <fat_readdir.constprop.0+0xfa>
	*p = 0;
     9ce:	d8 01       	movw	r26, r16
     9d0:	1c 92       	st	X, r1
		}

		if(!res)
		{
			get_fileinfo(dj, dir, fno);
			if((res = dir_next(dj)) == 2)
     9d2:	8a eb       	ldi	r24, 0xBA	; 186
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <dir_next>
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	89 f5       	brne	.+98     	; 0xa40 <fat_readdir.constprop.0+0xdc>
			{
				res = 0;
     9de:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	return res;
     9e0:	2f c0       	rjmp	.+94     	; 0xa40 <fat_readdir.constprop.0+0xdc>
		if((res = sd_read(dir, dj->sect, (dj->index % 16) * 32, 32)))
     9e2:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <dir>
     9e6:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <dir+0x1>
     9ea:	2f 70       	andi	r18, 0x0F	; 15
     9ec:	33 27       	eor	r19, r19
     9ee:	85 e0       	ldi	r24, 0x05	; 5
     9f0:	22 0f       	add	r18, r18
     9f2:	33 1f       	adc	r19, r19
     9f4:	8a 95       	dec	r24
     9f6:	e1 f7       	brne	.-8      	; 0x9f0 <fat_readdir.constprop.0+0x8c>
     9f8:	00 e2       	ldi	r16, 0x20	; 32
     9fa:	10 e0       	ldi	r17, 0x00	; 0
     9fc:	ce 01       	movw	r24, r28
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	0e 94 1a 03 	call	0x634	; 0x634 <sd_read>
     a04:	81 11       	cpse	r24, r1
     a06:	11 c0       	rjmp	.+34     	; 0xa2a <fat_readdir.constprop.0+0xc6>
		c = dir[DIR_NAME];
     a08:	89 81       	ldd	r24, Y+1	; 0x01
		if(!c)
     a0a:	88 23       	and	r24, r24
     a0c:	31 f1       	breq	.+76     	; 0xa5a <fat_readdir.constprop.0+0xf6>
		if(c != 0xE5 && c != '.' && !(a & AM_VOL))
     a0e:	85 3e       	cpi	r24, 0xE5	; 229
     a10:	29 f0       	breq	.+10     	; 0xa1c <fat_readdir.constprop.0+0xb8>
     a12:	8e 32       	cpi	r24, 0x2E	; 46
     a14:	19 f0       	breq	.+6      	; 0xa1c <fat_readdir.constprop.0+0xb8>
     a16:	8c 85       	ldd	r24, Y+12	; 0x0c
     a18:	83 ff       	sbrs	r24, 3
     a1a:	c9 cf       	rjmp	.-110    	; 0x9ae <fat_readdir.constprop.0+0x4a>
		if((res = dir_next(dj)))
     a1c:	8a eb       	ldi	r24, 0xBA	; 186
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <dir_next>
     a24:	88 23       	and	r24, r24
     a26:	09 f4       	brne	.+2      	; 0xa2a <fat_readdir.constprop.0+0xc6>
     a28:	b3 cf       	rjmp	.-154    	; 0x990 <fat_readdir.constprop.0+0x2c>
		dj->sect = 0;
     a2a:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <dir+0xc>
     a2e:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <dir+0xd>
     a32:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <dir+0xe>
     a36:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <dir+0xf>
		if((res = dir_read(dj, dir)) == 2)
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	09 f4       	brne	.+2      	; 0xa40 <fat_readdir.constprop.0+0xdc>
     a3e:	b7 cf       	rjmp	.-146    	; 0x9ae <fat_readdir.constprop.0+0x4a>
}
     a40:	ac 96       	adiw	r28, 0x2c	; 44
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	08 95       	ret
			res = 2;
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	e6 cf       	rjmp	.-52     	; 0xa2a <fat_readdir.constprop.0+0xc6>
     a5e:	de 01       	movw	r26, r28
     a60:	11 96       	adiw	r26, 0x01	; 1
     a62:	97 01       	movw	r18, r14
     a64:	23 5f       	subi	r18, 0xF3	; 243
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
			c = dir[i];
     a68:	8d 91       	ld	r24, X+
			if(c == ' ')
     a6a:	80 32       	cpi	r24, 0x20	; 32
     a6c:	49 f0       	breq	.+18     	; 0xa80 <fat_readdir.constprop.0+0x11c>
			if(c == 0x05)
     a6e:	85 30       	cpi	r24, 0x05	; 5
     a70:	09 f4       	brne	.+2      	; 0xa74 <fat_readdir.constprop.0+0x110>
				c = 0xE5;
     a72:	85 ee       	ldi	r24, 0xE5	; 229
			*p++ = c;
     a74:	f8 01       	movw	r30, r16
     a76:	81 93       	st	Z+, r24
		for(i = 0; i < 8; i++)
     a78:	e2 17       	cp	r30, r18
     a7a:	f3 07       	cpc	r31, r19
     a7c:	19 f5       	brne	.+70     	; 0xac4 <fat_readdir.constprop.0+0x160>
     a7e:	89 01       	movw	r16, r18
		if(dir[8] != ' ')
     a80:	89 85       	ldd	r24, Y+9	; 0x09
     a82:	80 32       	cpi	r24, 0x20	; 32
     a84:	81 f0       	breq	.+32     	; 0xaa6 <fat_readdir.constprop.0+0x142>
			*p++ = '.';
     a86:	f8 01       	movw	r30, r16
     a88:	8e e2       	ldi	r24, 0x2E	; 46
     a8a:	81 93       	st	Z+, r24
			for(i = 8; i < 11; i++)
     a8c:	de 01       	movw	r26, r28
     a8e:	19 96       	adiw	r26, 0x09	; 9
     a90:	c8 01       	movw	r24, r16
     a92:	04 96       	adiw	r24, 0x04	; 4
     a94:	8f 01       	movw	r16, r30
				c = dir[i];
     a96:	2d 91       	ld	r18, X+
				if (c == ' ')
     a98:	20 32       	cpi	r18, 0x20	; 32
     a9a:	29 f0       	breq	.+10     	; 0xaa6 <fat_readdir.constprop.0+0x142>
				*p++ = c;
     a9c:	21 93       	st	Z+, r18
			for(i = 8; i < 11; i++)
     a9e:	e8 17       	cp	r30, r24
     aa0:	f9 07       	cpc	r31, r25
     aa2:	c1 f7       	brne	.-16     	; 0xa94 <fat_readdir.constprop.0+0x130>
     aa4:	8c 01       	movw	r16, r24
		fno->type = dir[DIR_ATTR] & AM_DIR;
     aa6:	8c 85       	ldd	r24, Y+12	; 0x0c
     aa8:	80 71       	andi	r24, 0x10	; 16
     aaa:	d7 01       	movw	r26, r14
     aac:	14 96       	adiw	r26, 0x04	; 4
     aae:	8c 93       	st	X, r24
		fno->size = ld_u32(dir + DIR_FILESIZE);
     ab0:	ce 01       	movw	r24, r28
     ab2:	4d 96       	adiw	r24, 0x1d	; 29
     ab4:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_u32>
     ab8:	f7 01       	movw	r30, r14
     aba:	60 83       	st	Z, r22
     abc:	71 83       	std	Z+1, r23	; 0x01
     abe:	82 83       	std	Z+2, r24	; 0x02
     ac0:	93 83       	std	Z+3, r25	; 0x03
     ac2:	85 cf       	rjmp	.-246    	; 0x9ce <fat_readdir.constprop.0+0x6a>
     ac4:	8f 01       	movw	r16, r30
     ac6:	d0 cf       	rjmp	.-96     	; 0xa68 <fat_readdir.constprop.0+0x104>

00000ac8 <fat_fread.constprop.0>:
static uint8_t fat_fread(void *buf, uint16_t btr, uint16_t *br)
     ac8:	4f 92       	push	r4
     aca:	5f 92       	push	r5
     acc:	6f 92       	push	r6
     ace:	7f 92       	push	r7
     ad0:	8f 92       	push	r8
     ad2:	9f 92       	push	r9
     ad4:	af 92       	push	r10
     ad6:	bf 92       	push	r11
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	00 d0       	rcall	.+0      	; 0xaea <fat_fread.constprop.0+0x22>
     aea:	00 d0       	rcall	.+0      	; 0xaec <fat_fread.constprop.0+0x24>
     aec:	00 d0       	rcall	.+0      	; 0xaee <fat_fread.constprop.0+0x26>
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	6c 01       	movw	r12, r24
     af4:	5b 01       	movw	r10, r22
	*br = 0;
     af6:	db 01       	movw	r26, r22
     af8:	1d 92       	st	X+, r1
     afa:	1c 92       	st	X, r1
	remain = fat_fsize - fat_ftell;
     afc:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <fat_fsize>
     b00:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <fat_fsize+0x1>
     b04:	a0 91 0a 07 	lds	r26, 0x070A	; 0x80070a <fat_fsize+0x2>
     b08:	b0 91 0b 07 	lds	r27, 0x070B	; 0x80070b <fat_fsize+0x3>
     b0c:	40 91 04 07 	lds	r20, 0x0704	; 0x800704 <fat_ftell>
     b10:	50 91 05 07 	lds	r21, 0x0705	; 0x800705 <fat_ftell+0x1>
     b14:	60 91 06 07 	lds	r22, 0x0706	; 0x800706 <fat_ftell+0x2>
     b18:	70 91 07 07 	lds	r23, 0x0707	; 0x800707 <fat_ftell+0x3>
     b1c:	84 1b       	sub	r24, r20
     b1e:	95 0b       	sbc	r25, r21
     b20:	a6 0b       	sbc	r26, r22
     b22:	b7 0b       	sbc	r27, r23
	if(btr > remain)
     b24:	81 15       	cp	r24, r1
     b26:	e2 e0       	ldi	r30, 0x02	; 2
     b28:	9e 07       	cpc	r25, r30
     b2a:	a1 05       	cpc	r26, r1
     b2c:	b1 05       	cpc	r27, r1
     b2e:	20 f0       	brcs	.+8      	; 0xb38 <fat_fread.constprop.0+0x70>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	9e 83       	std	Y+6, r25	; 0x06
     b3a:	8d 83       	std	Y+5, r24	; 0x05
		if((rcnt = 512 - (uint16_t)fat_ftell % 512) > btr)
     b3c:	81 2c       	mov	r8, r1
     b3e:	32 e0       	ldi	r19, 0x02	; 2
     b40:	93 2e       	mov	r9, r19
	while(btr)
     b42:	ed 81       	ldd	r30, Y+5	; 0x05
     b44:	fe 81       	ldd	r31, Y+6	; 0x06
     b46:	ef 2b       	or	r30, r31
     b48:	11 f4       	brne	.+4      	; 0xb4e <fat_fread.constprop.0+0x86>
	return 0;
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	3b c0       	rjmp	.+118    	; 0xbc4 <fat_fread.constprop.0+0xfc>
		if((fat_ftell % 512) == 0)
     b4e:	40 90 04 07 	lds	r4, 0x0704	; 0x800704 <fat_ftell>
     b52:	50 90 05 07 	lds	r5, 0x0705	; 0x800705 <fat_ftell+0x1>
     b56:	60 90 06 07 	lds	r6, 0x0706	; 0x800706 <fat_ftell+0x2>
     b5a:	70 90 07 07 	lds	r7, 0x0707	; 0x800707 <fat_ftell+0x3>
     b5e:	d3 01       	movw	r26, r6
     b60:	c2 01       	movw	r24, r4
     b62:	91 70       	andi	r25, 0x01	; 1
     b64:	aa 27       	eor	r26, r26
     b66:	bb 27       	eor	r27, r27
     b68:	89 2b       	or	r24, r25
     b6a:	8a 2b       	or	r24, r26
     b6c:	8b 2b       	or	r24, r27
     b6e:	09 f0       	breq	.+2      	; 0xb72 <fat_fread.constprop.0+0xaa>
     b70:	76 c0       	rjmp	.+236    	; 0xc5e <fat_fread.constprop.0+0x196>
			if(!(cs = (uint8_t)(fat_ftell / 512 & (_fs.csize - 1))))
     b72:	f0 90 e5 06 	lds	r15, 0x06E5	; 0x8006e5 <_fs>
     b76:	fa 94       	dec	r15
     b78:	d3 01       	movw	r26, r6
     b7a:	c2 01       	movw	r24, r4
     b7c:	29 e0       	ldi	r18, 0x09	; 9
     b7e:	b6 95       	lsr	r27
     b80:	a7 95       	ror	r26
     b82:	97 95       	ror	r25
     b84:	87 95       	ror	r24
     b86:	2a 95       	dec	r18
     b88:	d1 f7       	brne	.-12     	; 0xb7e <fat_fread.constprop.0+0xb6>
     b8a:	f8 22       	and	r15, r24
     b8c:	09 f0       	breq	.+2      	; 0xb90 <fat_fread.constprop.0+0xc8>
     b8e:	42 c0       	rjmp	.+132    	; 0xc14 <fat_fread.constprop.0+0x14c>
					get_fat(_fs.curr_clust) : _fs.org_clust) <= 1)
     b90:	41 14       	cp	r4, r1
     b92:	51 04       	cpc	r5, r1
     b94:	61 04       	cpc	r6, r1
     b96:	71 04       	cpc	r7, r1
     b98:	61 f1       	breq	.+88     	; 0xbf2 <fat_fread.constprop.0+0x12a>
     b9a:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <_fs+0x17>
     b9e:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <_fs+0x18>
     ba2:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <_fs+0x19>
     ba6:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <_fs+0x1a>
     baa:	bc 01       	movw	r22, r24
     bac:	cd 01       	movw	r24, r26
     bae:	0e 94 87 03 	call	0x70e	; 0x70e <get_fat>
     bb2:	46 2f       	mov	r20, r22
     bb4:	57 2f       	mov	r21, r23
     bb6:	bc 01       	movw	r22, r24
				if((clst = fat_ftell ?
     bb8:	42 30       	cpi	r20, 0x02	; 2
     bba:	51 05       	cpc	r21, r1
     bbc:	61 05       	cpc	r22, r1
     bbe:	71 05       	cpc	r23, r1
     bc0:	08 f5       	brcc	.+66     	; 0xc04 <fat_fread.constprop.0+0x13c>
					return 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
}
     bc4:	26 96       	adiw	r28, 0x06	; 6
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
     be0:	bf 90       	pop	r11
     be2:	af 90       	pop	r10
     be4:	9f 90       	pop	r9
     be6:	8f 90       	pop	r8
     be8:	7f 90       	pop	r7
     bea:	6f 90       	pop	r6
     bec:	5f 90       	pop	r5
     bee:	4f 90       	pop	r4
     bf0:	08 95       	ret
					get_fat(_fs.curr_clust) : _fs.org_clust) <= 1)
     bf2:	40 91 f8 06 	lds	r20, 0x06F8	; 0x8006f8 <_fs+0x13>
     bf6:	50 91 f9 06 	lds	r21, 0x06F9	; 0x8006f9 <_fs+0x14>
     bfa:	60 91 fa 06 	lds	r22, 0x06FA	; 0x8006fa <_fs+0x15>
     bfe:	70 91 fb 06 	lds	r23, 0x06FB	; 0x8006fb <_fs+0x16>
     c02:	da cf       	rjmp	.-76     	; 0xbb8 <fat_fread.constprop.0+0xf0>
				_fs.curr_clust = clst;
     c04:	40 93 fc 06 	sts	0x06FC, r20	; 0x8006fc <_fs+0x17>
     c08:	50 93 fd 06 	sts	0x06FD, r21	; 0x8006fd <_fs+0x18>
     c0c:	60 93 fe 06 	sts	0x06FE, r22	; 0x8006fe <_fs+0x19>
     c10:	70 93 ff 06 	sts	0x06FF, r23	; 0x8006ff <_fs+0x1a>
			if(!(sect = clust2sect(_fs.curr_clust)))
     c14:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <_fs+0x17>
     c18:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <_fs+0x18>
     c1c:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <_fs+0x19>
     c20:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <_fs+0x1a>
     c24:	89 83       	std	Y+1, r24	; 0x01
     c26:	9a 83       	std	Y+2, r25	; 0x02
     c28:	ab 83       	std	Y+3, r26	; 0x03
     c2a:	bc 83       	std	Y+4, r27	; 0x04
     c2c:	bc 01       	movw	r22, r24
     c2e:	cd 01       	movw	r24, r26
     c30:	0e 94 1a 01 	call	0x234	; 0x234 <clust2sect>
     c34:	46 2f       	mov	r20, r22
     c36:	57 2f       	mov	r21, r23
     c38:	bc 01       	movw	r22, r24
     c3a:	41 15       	cp	r20, r1
     c3c:	51 05       	cpc	r21, r1
     c3e:	61 05       	cpc	r22, r1
     c40:	71 05       	cpc	r23, r1
     c42:	09 f4       	brne	.+2      	; 0xc46 <fat_fread.constprop.0+0x17e>
     c44:	be cf       	rjmp	.-132    	; 0xbc2 <fat_fread.constprop.0+0xfa>
			_fs.dsect = sect + cs;
     c46:	4f 0d       	add	r20, r15
     c48:	51 1d       	adc	r21, r1
     c4a:	61 1d       	adc	r22, r1
     c4c:	71 1d       	adc	r23, r1
     c4e:	40 93 00 07 	sts	0x0700, r20	; 0x800700 <_fs+0x1b>
     c52:	50 93 01 07 	sts	0x0701, r21	; 0x800701 <_fs+0x1c>
     c56:	60 93 02 07 	sts	0x0702, r22	; 0x800702 <_fs+0x1d>
     c5a:	70 93 03 07 	sts	0x0703, r23	; 0x800703 <_fs+0x1e>
		if((rcnt = 512 - (uint16_t)fat_ftell % 512) > btr)
     c5e:	92 01       	movw	r18, r4
     c60:	31 70       	andi	r19, 0x01	; 1
     c62:	74 01       	movw	r14, r8
     c64:	e2 1a       	sub	r14, r18
     c66:	f3 0a       	sbc	r15, r19
     c68:	ad 81       	ldd	r26, Y+5	; 0x05
     c6a:	be 81       	ldd	r27, Y+6	; 0x06
     c6c:	ae 15       	cp	r26, r14
     c6e:	bf 05       	cpc	r27, r15
     c70:	08 f4       	brcc	.+2      	; 0xc74 <fat_fread.constprop.0+0x1ac>
     c72:	7d 01       	movw	r14, r26
		if(sd_read(rbuf, _fs.dsect, (uint16_t)fat_ftell % 512, rcnt))
     c74:	40 91 00 07 	lds	r20, 0x0700	; 0x800700 <_fs+0x1b>
     c78:	50 91 01 07 	lds	r21, 0x0701	; 0x800701 <_fs+0x1c>
     c7c:	60 91 02 07 	lds	r22, 0x0702	; 0x800702 <_fs+0x1d>
     c80:	70 91 03 07 	lds	r23, 0x0703	; 0x800703 <_fs+0x1e>
     c84:	87 01       	movw	r16, r14
     c86:	c6 01       	movw	r24, r12
     c88:	0e 94 1a 03 	call	0x634	; 0x634 <sd_read>
     c8c:	81 11       	cpse	r24, r1
     c8e:	99 cf       	rjmp	.-206    	; 0xbc2 <fat_fread.constprop.0+0xfa>
		fat_ftell += rcnt;
     c90:	4e 0c       	add	r4, r14
     c92:	5f 1c       	adc	r5, r15
     c94:	61 1c       	adc	r6, r1
     c96:	71 1c       	adc	r7, r1
     c98:	40 92 04 07 	sts	0x0704, r4	; 0x800704 <fat_ftell>
     c9c:	50 92 05 07 	sts	0x0705, r5	; 0x800705 <fat_ftell+0x1>
     ca0:	60 92 06 07 	sts	0x0706, r6	; 0x800706 <fat_ftell+0x2>
     ca4:	70 92 07 07 	sts	0x0707, r7	; 0x800707 <fat_ftell+0x3>
		btr -= rcnt;
     ca8:	ed 81       	ldd	r30, Y+5	; 0x05
     caa:	fe 81       	ldd	r31, Y+6	; 0x06
     cac:	ee 19       	sub	r30, r14
     cae:	ff 09       	sbc	r31, r15
     cb0:	fe 83       	std	Y+6, r31	; 0x06
     cb2:	ed 83       	std	Y+5, r30	; 0x05
		*br += rcnt;
     cb4:	d5 01       	movw	r26, r10
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	11 97       	sbiw	r26, 0x01	; 1
     cbc:	8e 0d       	add	r24, r14
     cbe:	9f 1d       	adc	r25, r15
     cc0:	8d 93       	st	X+, r24
     cc2:	9c 93       	st	X, r25
		if(rbuf)
     cc4:	c1 14       	cp	r12, r1
     cc6:	d1 04       	cpc	r13, r1
     cc8:	09 f4       	brne	.+2      	; 0xccc <fat_fread.constprop.0+0x204>
     cca:	3b cf       	rjmp	.-394    	; 0xb42 <fat_fread.constprop.0+0x7a>
			rbuf += rcnt;
     ccc:	ce 0c       	add	r12, r14
     cce:	df 1c       	adc	r13, r15
     cd0:	38 cf       	rjmp	.-400    	; 0xb42 <fat_fread.constprop.0+0x7a>

00000cd2 <fat_fseek.isra.0>:
static uint8_t fat_fseek(uint32_t offset)
     cd2:	4f 92       	push	r4
     cd4:	5f 92       	push	r5
     cd6:	6f 92       	push	r6
     cd8:	7f 92       	push	r7
     cda:	8f 92       	push	r8
     cdc:	9f 92       	push	r9
     cde:	af 92       	push	r10
     ce0:	bf 92       	push	r11
     ce2:	cf 92       	push	r12
     ce4:	df 92       	push	r13
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	29 97       	sbiw	r28, 0x09	; 9
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	46 2f       	mov	r20, r22
     d00:	57 2f       	mov	r21, r23
     d02:	bc 01       	movw	r22, r24
	if(offset > fat_fsize)
     d04:	80 90 08 07 	lds	r8, 0x0708	; 0x800708 <fat_fsize>
     d08:	90 90 09 07 	lds	r9, 0x0709	; 0x800709 <fat_fsize+0x1>
     d0c:	a0 90 0a 07 	lds	r10, 0x070A	; 0x80070a <fat_fsize+0x2>
     d10:	b0 90 0b 07 	lds	r11, 0x070B	; 0x80070b <fat_fsize+0x3>
     d14:	48 15       	cp	r20, r8
     d16:	59 05       	cpc	r21, r9
     d18:	6a 05       	cpc	r22, r10
     d1a:	7b 05       	cpc	r23, r11
     d1c:	10 f4       	brcc	.+4      	; 0xd22 <fat_fseek.isra.0+0x50>
     d1e:	4a 01       	movw	r8, r20
     d20:	5c 01       	movw	r10, r24
	ifptr = fat_ftell;
     d22:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <fat_ftell>
     d26:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <fat_ftell+0x1>
     d2a:	a0 91 06 07 	lds	r26, 0x0706	; 0x800706 <fat_ftell+0x2>
     d2e:	b0 91 07 07 	lds	r27, 0x0707	; 0x800707 <fat_ftell+0x3>
	fat_ftell = 0;
     d32:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <fat_ftell>
     d36:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <fat_ftell+0x1>
     d3a:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <fat_ftell+0x2>
     d3e:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <fat_ftell+0x3>
	if(offset > 0)
     d42:	81 14       	cp	r8, r1
     d44:	91 04       	cpc	r9, r1
     d46:	a1 04       	cpc	r10, r1
     d48:	b1 04       	cpc	r11, r1
     d4a:	09 f4       	brne	.+2      	; 0xd4e <fat_fseek.isra.0+0x7c>
     d4c:	a0 c0       	rjmp	.+320    	; 0xe8e <fat_fseek.isra.0+0x1bc>
		bcs = (uint32_t)_fs.csize * 512;
     d4e:	20 91 e5 06 	lds	r18, 0x06E5	; 0x8006e5 <_fs>
     d52:	29 87       	std	Y+9, r18	; 0x09
     d54:	42 2e       	mov	r4, r18
     d56:	51 2c       	mov	r5, r1
     d58:	71 2c       	mov	r7, r1
     d5a:	61 2c       	mov	r6, r1
     d5c:	29 e0       	ldi	r18, 0x09	; 9
     d5e:	44 0c       	add	r4, r4
     d60:	55 1c       	adc	r5, r5
     d62:	66 1c       	adc	r6, r6
     d64:	77 1c       	adc	r7, r7
     d66:	2a 95       	dec	r18
     d68:	d1 f7       	brne	.-12     	; 0xd5e <fat_fseek.isra.0+0x8c>
		if(ifptr > 0 && (offset - 1) / bcs >= (ifptr - 1) / bcs)
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	a1 05       	cpc	r26, r1
     d6e:	b1 05       	cpc	r27, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <fat_fseek.isra.0+0xa2>
     d72:	a2 c0       	rjmp	.+324    	; 0xeb8 <fat_fseek.isra.0+0x1e6>
     d74:	9c 01       	movw	r18, r24
     d76:	ad 01       	movw	r20, r26
     d78:	21 50       	subi	r18, 0x01	; 1
     d7a:	31 09       	sbc	r19, r1
     d7c:	41 09       	sbc	r20, r1
     d7e:	51 09       	sbc	r21, r1
     d80:	29 83       	std	Y+1, r18	; 0x01
     d82:	3a 83       	std	Y+2, r19	; 0x02
     d84:	4b 83       	std	Y+3, r20	; 0x03
     d86:	5c 83       	std	Y+4, r21	; 0x04
     d88:	d5 01       	movw	r26, r10
     d8a:	c4 01       	movw	r24, r8
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	a1 09       	sbc	r26, r1
     d90:	b1 09       	sbc	r27, r1
     d92:	bc 01       	movw	r22, r24
     d94:	cd 01       	movw	r24, r26
     d96:	a3 01       	movw	r20, r6
     d98:	92 01       	movw	r18, r4
     d9a:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
     d9e:	69 01       	movw	r12, r18
     da0:	7a 01       	movw	r14, r20
     da2:	69 81       	ldd	r22, Y+1	; 0x01
     da4:	7a 81       	ldd	r23, Y+2	; 0x02
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	9c 81       	ldd	r25, Y+4	; 0x04
     daa:	a3 01       	movw	r20, r6
     dac:	92 01       	movw	r18, r4
     dae:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
     db2:	c2 16       	cp	r12, r18
     db4:	d3 06       	cpc	r13, r19
     db6:	e4 06       	cpc	r14, r20
     db8:	f5 06       	cpc	r15, r21
     dba:	08 f4       	brcc	.+2      	; 0xdbe <fat_fseek.isra.0+0xec>
     dbc:	7d c0       	rjmp	.+250    	; 0xeb8 <fat_fseek.isra.0+0x1e6>
			fat_ftell = (ifptr - 1) & ~(bcs - 1);
     dbe:	88 27       	eor	r24, r24
     dc0:	99 27       	eor	r25, r25
     dc2:	dc 01       	movw	r26, r24
     dc4:	84 19       	sub	r24, r4
     dc6:	95 09       	sbc	r25, r5
     dc8:	a6 09       	sbc	r26, r6
     dca:	b7 09       	sbc	r27, r7
     dcc:	29 81       	ldd	r18, Y+1	; 0x01
     dce:	3a 81       	ldd	r19, Y+2	; 0x02
     dd0:	4b 81       	ldd	r20, Y+3	; 0x03
     dd2:	5c 81       	ldd	r21, Y+4	; 0x04
     dd4:	82 23       	and	r24, r18
     dd6:	93 23       	and	r25, r19
     dd8:	a4 23       	and	r26, r20
     dda:	b5 23       	and	r27, r21
     ddc:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <fat_ftell>
     de0:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <fat_ftell+0x1>
     de4:	a0 93 06 07 	sts	0x0706, r26	; 0x800706 <fat_ftell+0x2>
     de8:	b0 93 07 07 	sts	0x0707, r27	; 0x800707 <fat_ftell+0x3>
			offset -= fat_ftell;
     dec:	88 1a       	sub	r8, r24
     dee:	99 0a       	sbc	r9, r25
     df0:	aa 0a       	sbc	r10, r26
     df2:	bb 0a       	sbc	r11, r27
			clst = _fs.curr_clust;
     df4:	60 91 fc 06 	lds	r22, 0x06FC	; 0x8006fc <_fs+0x17>
     df8:	70 91 fd 06 	lds	r23, 0x06FD	; 0x8006fd <_fs+0x18>
     dfc:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <_fs+0x19>
     e00:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <_fs+0x1a>
		while(offset > bcs)
     e04:	48 14       	cp	r4, r8
     e06:	59 04       	cpc	r5, r9
     e08:	6a 04       	cpc	r6, r10
     e0a:	7b 04       	cpc	r7, r11
     e0c:	08 f4       	brcc	.+2      	; 0xe10 <fat_fseek.isra.0+0x13e>
     e0e:	65 c0       	rjmp	.+202    	; 0xeda <fat_fseek.isra.0+0x208>
		fat_ftell += offset;
     e10:	c0 90 04 07 	lds	r12, 0x0704	; 0x800704 <fat_ftell>
     e14:	d0 90 05 07 	lds	r13, 0x0705	; 0x800705 <fat_ftell+0x1>
     e18:	e0 90 06 07 	lds	r14, 0x0706	; 0x800706 <fat_ftell+0x2>
     e1c:	f0 90 07 07 	lds	r15, 0x0707	; 0x800707 <fat_ftell+0x3>
     e20:	c8 0c       	add	r12, r8
     e22:	d9 1c       	adc	r13, r9
     e24:	ea 1c       	adc	r14, r10
     e26:	fb 1c       	adc	r15, r11
     e28:	c0 92 04 07 	sts	0x0704, r12	; 0x800704 <fat_ftell>
     e2c:	d0 92 05 07 	sts	0x0705, r13	; 0x800705 <fat_ftell+0x1>
     e30:	e0 92 06 07 	sts	0x0706, r14	; 0x800706 <fat_ftell+0x2>
     e34:	f0 92 07 07 	sts	0x0707, r15	; 0x800707 <fat_ftell+0x3>
		if(!(sect = clust2sect(clst)))
     e38:	0e 94 1a 01 	call	0x234	; 0x234 <clust2sect>
     e3c:	46 2f       	mov	r20, r22
     e3e:	57 2f       	mov	r21, r23
     e40:	bc 01       	movw	r22, r24
     e42:	41 15       	cp	r20, r1
     e44:	51 05       	cpc	r21, r1
     e46:	61 05       	cpc	r22, r1
     e48:	71 05       	cpc	r23, r1
     e4a:	09 f1       	breq	.+66     	; 0xe8e <fat_fseek.isra.0+0x1bc>
		_fs.dsect = sect + (fat_ftell / 512 & (_fs.csize - 1));
     e4c:	89 e0       	ldi	r24, 0x09	; 9
     e4e:	f6 94       	lsr	r15
     e50:	e7 94       	ror	r14
     e52:	d7 94       	ror	r13
     e54:	c7 94       	ror	r12
     e56:	8a 95       	dec	r24
     e58:	d1 f7       	brne	.-12     	; 0xe4e <fat_fseek.isra.0+0x17c>
     e5a:	a9 85       	ldd	r26, Y+9	; 0x09
     e5c:	a1 50       	subi	r26, 0x01	; 1
     e5e:	bb 0b       	sbc	r27, r27
     e60:	cd 01       	movw	r24, r26
     e62:	09 2e       	mov	r0, r25
     e64:	00 0c       	add	r0, r0
     e66:	aa 0b       	sbc	r26, r26
     e68:	bb 0b       	sbc	r27, r27
     e6a:	8c 21       	and	r24, r12
     e6c:	9d 21       	and	r25, r13
     e6e:	ae 21       	and	r26, r14
     e70:	bf 21       	and	r27, r15
     e72:	6c 01       	movw	r12, r24
     e74:	7d 01       	movw	r14, r26
     e76:	c4 0e       	add	r12, r20
     e78:	d5 1e       	adc	r13, r21
     e7a:	e6 1e       	adc	r14, r22
     e7c:	f7 1e       	adc	r15, r23
     e7e:	c0 92 00 07 	sts	0x0700, r12	; 0x800700 <_fs+0x1b>
     e82:	d0 92 01 07 	sts	0x0701, r13	; 0x800701 <_fs+0x1c>
     e86:	e0 92 02 07 	sts	0x0702, r14	; 0x800702 <_fs+0x1d>
     e8a:	f0 92 03 07 	sts	0x0703, r15	; 0x800703 <_fs+0x1e>
}
     e8e:	29 96       	adiw	r28, 0x09	; 9
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	df 90       	pop	r13
     ea4:	cf 90       	pop	r12
     ea6:	bf 90       	pop	r11
     ea8:	af 90       	pop	r10
     eaa:	9f 90       	pop	r9
     eac:	8f 90       	pop	r8
     eae:	7f 90       	pop	r7
     eb0:	6f 90       	pop	r6
     eb2:	5f 90       	pop	r5
     eb4:	4f 90       	pop	r4
     eb6:	08 95       	ret
			clst = _fs.org_clust;
     eb8:	60 91 f8 06 	lds	r22, 0x06F8	; 0x8006f8 <_fs+0x13>
     ebc:	70 91 f9 06 	lds	r23, 0x06F9	; 0x8006f9 <_fs+0x14>
     ec0:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <_fs+0x15>
     ec4:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <_fs+0x16>
			_fs.curr_clust = clst;
     ec8:	60 93 fc 06 	sts	0x06FC, r22	; 0x8006fc <_fs+0x17>
     ecc:	70 93 fd 06 	sts	0x06FD, r23	; 0x8006fd <_fs+0x18>
     ed0:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <_fs+0x19>
     ed4:	90 93 ff 06 	sts	0x06FF, r25	; 0x8006ff <_fs+0x1a>
     ed8:	95 cf       	rjmp	.-214    	; 0xe04 <fat_fseek.isra.0+0x132>
			clst = get_fat(clst);
     eda:	0e 94 87 03 	call	0x70e	; 0x70e <get_fat>
			if(clst <= 1 || clst >= _fs.n_fatent)
     ede:	62 30       	cpi	r22, 0x02	; 2
     ee0:	71 05       	cpc	r23, r1
     ee2:	81 05       	cpc	r24, r1
     ee4:	91 05       	cpc	r25, r1
     ee6:	98 f2       	brcs	.-90     	; 0xe8e <fat_fseek.isra.0+0x1bc>
     ee8:	c0 90 e8 06 	lds	r12, 0x06E8	; 0x8006e8 <_fs+0x3>
     eec:	d0 90 e9 06 	lds	r13, 0x06E9	; 0x8006e9 <_fs+0x4>
     ef0:	e0 90 ea 06 	lds	r14, 0x06EA	; 0x8006ea <_fs+0x5>
     ef4:	f0 90 eb 06 	lds	r15, 0x06EB	; 0x8006eb <_fs+0x6>
     ef8:	6c 15       	cp	r22, r12
     efa:	7d 05       	cpc	r23, r13
     efc:	8e 05       	cpc	r24, r14
     efe:	9f 05       	cpc	r25, r15
     f00:	30 f6       	brcc	.-116    	; 0xe8e <fat_fseek.isra.0+0x1bc>
			_fs.curr_clust = clst;
     f02:	60 93 fc 06 	sts	0x06FC, r22	; 0x8006fc <_fs+0x17>
     f06:	70 93 fd 06 	sts	0x06FD, r23	; 0x8006fd <_fs+0x18>
     f0a:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <_fs+0x19>
     f0e:	90 93 ff 06 	sts	0x06FF, r25	; 0x8006ff <_fs+0x1a>
			fat_ftell += bcs;
     f12:	c0 90 04 07 	lds	r12, 0x0704	; 0x800704 <fat_ftell>
     f16:	d0 90 05 07 	lds	r13, 0x0705	; 0x800705 <fat_ftell+0x1>
     f1a:	e0 90 06 07 	lds	r14, 0x0706	; 0x800706 <fat_ftell+0x2>
     f1e:	f0 90 07 07 	lds	r15, 0x0707	; 0x800707 <fat_ftell+0x3>
     f22:	c4 0c       	add	r12, r4
     f24:	d5 1c       	adc	r13, r5
     f26:	e6 1c       	adc	r14, r6
     f28:	f7 1c       	adc	r15, r7
     f2a:	c0 92 04 07 	sts	0x0704, r12	; 0x800704 <fat_ftell>
     f2e:	d0 92 05 07 	sts	0x0705, r13	; 0x800705 <fat_ftell+0x1>
     f32:	e0 92 06 07 	sts	0x0706, r14	; 0x800706 <fat_ftell+0x2>
     f36:	f0 92 07 07 	sts	0x0707, r15	; 0x800707 <fat_ftell+0x3>
			offset -= bcs;
     f3a:	84 18       	sub	r8, r4
     f3c:	95 08       	sbc	r9, r5
     f3e:	a6 08       	sbc	r10, r6
     f40:	b7 08       	sbc	r11, r7
     f42:	60 cf       	rjmp	.-320    	; 0xe04 <fat_fseek.isra.0+0x132>

00000f44 <follow_path.constprop.0>:
static uint8_t follow_path(dir_t *dj, uint8_t *dir, const char *path)
     f44:	af 92       	push	r10
     f46:	bf 92       	push	r11
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	7c 01       	movw	r14, r24
     f5a:	6b 01       	movw	r12, r22
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	5c 01       	movw	r10, r24
	while(*path == ' ')
     f62:	fc 01       	movw	r30, r24
     f64:	20 81       	ld	r18, Z
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	20 32       	cpi	r18, 0x20	; 32
     f6a:	d1 f3       	breq	.-12     	; 0xf60 <follow_path.constprop.0+0x1c>
	if(*path == '/')
     f6c:	2f 32       	cpi	r18, 0x2F	; 47
     f6e:	09 f4       	brne	.+2      	; 0xf72 <follow_path.constprop.0+0x2e>
		++path;
     f70:	5c 01       	movw	r10, r24
	dj->sclust = 0;
     f72:	f7 01       	movw	r30, r14
     f74:	14 82       	std	Z+4, r1	; 0x04
     f76:	15 82       	std	Z+5, r1	; 0x05
     f78:	16 82       	std	Z+6, r1	; 0x06
     f7a:	17 82       	std	Z+7, r1	; 0x07
	if(*path < ' ')
     f7c:	f5 01       	movw	r30, r10
     f7e:	80 81       	ld	r24, Z
     f80:	80 32       	cpi	r24, 0x20	; 32
     f82:	08 f0       	brcs	.+2      	; 0xf86 <follow_path.constprop.0+0x42>
     f84:	6a c0       	rjmp	.+212    	; 0x105a <follow_path.constprop.0+0x116>
		res = dir_rewind(dj);
     f86:	c7 01       	movw	r24, r14
     f88:	0e 94 63 01 	call	0x2c6	; 0x2c6 <dir_rewind>
     f8c:	c8 2f       	mov	r28, r24
		dir[0] = 0;
     f8e:	f6 01       	movw	r30, r12
     f90:	10 82       	st	Z, r1
}
     f92:	8c 2f       	mov	r24, r28
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	ff 90       	pop	r15
     f9e:	ef 90       	pop	r14
     fa0:	df 90       	pop	r13
     fa2:	cf 90       	pop	r12
     fa4:	bf 90       	pop	r11
     fa6:	af 90       	pop	r10
     fa8:	08 95       	ret
	*path = &p[si];
     faa:	a4 0e       	add	r10, r20
     fac:	b1 1c       	adc	r11, r1
	sfn[11] = (c <= ' ');
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	81 32       	cpi	r24, 0x21	; 33
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <follow_path.constprop.0+0x72>
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	9b 87       	std	Y+11, r25	; 0x0b
	if((res = dir_rewind(dj)))
     fb8:	c7 01       	movw	r24, r14
     fba:	0e 94 63 01 	call	0x2c6	; 0x2c6 <dir_rewind>
     fbe:	c8 2f       	mov	r28, r24
     fc0:	81 11       	cpse	r24, r1
     fc2:	e7 cf       	rjmp	.-50     	; 0xf92 <follow_path.constprop.0+0x4e>
		if((res = sd_read(dir, dj->sect, (dj->index % 16) * 32, 32)))
     fc4:	f7 01       	movw	r30, r14
     fc6:	20 81       	ld	r18, Z
     fc8:	31 81       	ldd	r19, Z+1	; 0x01
     fca:	2f 70       	andi	r18, 0x0F	; 15
     fcc:	33 27       	eor	r19, r19
     fce:	45 e0       	ldi	r20, 0x05	; 5
     fd0:	22 0f       	add	r18, r18
     fd2:	33 1f       	adc	r19, r19
     fd4:	4a 95       	dec	r20
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <follow_path.constprop.0+0x8c>
     fd8:	44 85       	ldd	r20, Z+12	; 0x0c
     fda:	55 85       	ldd	r21, Z+13	; 0x0d
     fdc:	66 85       	ldd	r22, Z+14	; 0x0e
     fde:	77 85       	ldd	r23, Z+15	; 0x0f
     fe0:	00 e2       	ldi	r16, 0x20	; 32
     fe2:	10 e0       	ldi	r17, 0x00	; 0
     fe4:	c6 01       	movw	r24, r12
     fe6:	0e 94 1a 03 	call	0x634	; 0x634 <sd_read>
     fea:	c8 2f       	mov	r28, r24
     fec:	81 11       	cpse	r24, r1
     fee:	d1 cf       	rjmp	.-94     	; 0xf92 <follow_path.constprop.0+0x4e>
		if(dir[DIR_NAME] == 0)
     ff0:	f6 01       	movw	r30, r12
     ff2:	80 81       	ld	r24, Z
     ff4:	88 23       	and	r24, r24
     ff6:	a1 f0       	breq	.+40     	; 0x1020 <follow_path.constprop.0+0xdc>
		if(!(dir[DIR_ATTR] & AM_VOL) && mem_cmp(dir, dj->fn, 11))
     ff8:	d3 85       	ldd	r29, Z+11	; 0x0b
     ffa:	cd 2f       	mov	r28, r29
     ffc:	c8 70       	andi	r28, 0x08	; 8
     ffe:	d3 fd       	sbrc	r29, 3
    1000:	0b c0       	rjmp	.+22     	; 0x1018 <follow_path.constprop.0+0xd4>
    1002:	f7 01       	movw	r30, r14
    1004:	02 81       	ldd	r16, Z+2	; 0x02
    1006:	13 81       	ldd	r17, Z+3	; 0x03
    1008:	4b e0       	ldi	r20, 0x0B	; 11
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	b8 01       	movw	r22, r16
    100e:	c6 01       	movw	r24, r12
    1010:	0e 94 ca 00 	call	0x194	; 0x194 <mem_cmp>
    1014:	81 11       	cpse	r24, r1
    1016:	06 c0       	rjmp	.+12     	; 0x1024 <follow_path.constprop.0+0xe0>
		res = dir_next(dj);
    1018:	c7 01       	movw	r24, r14
    101a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <dir_next>
    101e:	cf cf       	rjmp	.-98     	; 0xfbe <follow_path.constprop.0+0x7a>
			res = 1;
    1020:	c1 e0       	ldi	r28, 0x01	; 1
	return res;
    1022:	b7 cf       	rjmp	.-146    	; 0xf92 <follow_path.constprop.0+0x4e>
			if(dj->fn[11])
    1024:	f8 01       	movw	r30, r16
    1026:	83 85       	ldd	r24, Z+11	; 0x0b
    1028:	81 11       	cpse	r24, r1
    102a:	b3 cf       	rjmp	.-154    	; 0xf92 <follow_path.constprop.0+0x4e>
			if(!(dir[DIR_ATTR] & AM_DIR))
    102c:	d4 ff       	sbrs	r29, 4
    102e:	f8 cf       	rjmp	.-16     	; 0x1020 <follow_path.constprop.0+0xdc>
	cluster = ld_u16(dir + DIR_CLUSTER_HI);
    1030:	f6 01       	movw	r30, r12
    1032:	84 89       	ldd	r24, Z+20	; 0x14
    1034:	95 89       	ldd	r25, Z+21	; 0x15
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	a0 e0       	ldi	r26, 0x00	; 0
	cluster <<= 16;
    103a:	dc 01       	movw	r26, r24
    103c:	99 27       	eor	r25, r25
    103e:	88 27       	eor	r24, r24
	cluster |= ld_u16(dir + DIR_CLUSTER_LO);
    1040:	42 8d       	ldd	r20, Z+26	; 0x1a
    1042:	53 8d       	ldd	r21, Z+27	; 0x1b
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	84 2b       	or	r24, r20
    104a:	95 2b       	or	r25, r21
    104c:	a6 2b       	or	r26, r22
    104e:	b7 2b       	or	r27, r23
			dj->sclust = get_cluster(dir);
    1050:	f7 01       	movw	r30, r14
    1052:	84 83       	std	Z+4, r24	; 0x04
    1054:	95 83       	std	Z+5, r25	; 0x05
    1056:	a6 83       	std	Z+6, r26	; 0x06
    1058:	b7 83       	std	Z+7, r27	; 0x07
			if((res = create_name(dj, &path)))
    105a:	f7 01       	movw	r30, r14
    105c:	c2 81       	ldd	r28, Z+2	; 0x02
    105e:	d3 81       	ldd	r29, Z+3	; 0x03
		*dst++ = val;
    1060:	4b e0       	ldi	r20, 0x0B	; 11
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	60 e2       	ldi	r22, 0x20	; 32
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	ce 01       	movw	r24, r28
    106a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <memset>
	i = 0;
    106e:	20 e0       	ldi	r18, 0x00	; 0
	si = 0;
    1070:	80 e0       	ldi	r24, 0x00	; 0
	ni = 8;
    1072:	98 e0       	ldi	r25, 0x08	; 8
		c = p[si++];
    1074:	41 e0       	ldi	r20, 0x01	; 1
    1076:	48 0f       	add	r20, r24
    1078:	f5 01       	movw	r30, r10
    107a:	e8 0f       	add	r30, r24
    107c:	f1 1d       	adc	r31, r1
    107e:	80 81       	ld	r24, Z
		if(c <= ' ' || c == '/')
    1080:	81 32       	cpi	r24, 0x21	; 33
    1082:	08 f4       	brcc	.+2      	; 0x1086 <follow_path.constprop.0+0x142>
    1084:	92 cf       	rjmp	.-220    	; 0xfaa <follow_path.constprop.0+0x66>
    1086:	8f 32       	cpi	r24, 0x2F	; 47
    1088:	09 f4       	brne	.+2      	; 0x108c <follow_path.constprop.0+0x148>
    108a:	8f cf       	rjmp	.-226    	; 0xfaa <follow_path.constprop.0+0x66>
		if(c == '.' || i >= ni)
    108c:	8e 32       	cpi	r24, 0x2E	; 46
    108e:	99 f0       	breq	.+38     	; 0x10b6 <follow_path.constprop.0+0x172>
    1090:	29 17       	cp	r18, r25
    1092:	08 f0       	brcs	.+2      	; 0x1096 <follow_path.constprop.0+0x152>
    1094:	8a cf       	rjmp	.-236    	; 0xfaa <follow_path.constprop.0+0x66>
		if(c >= 'a' && c <= 'z')
    1096:	3f e9       	ldi	r19, 0x9F	; 159
    1098:	38 0f       	add	r19, r24
    109a:	3a 31       	cpi	r19, 0x1A	; 26
    109c:	08 f4       	brcc	.+2      	; 0x10a0 <follow_path.constprop.0+0x15c>
			c -= 'a' - 'A';
    109e:	80 52       	subi	r24, 0x20	; 32
		sfn[i++] = c;
    10a0:	fe 01       	movw	r30, r28
    10a2:	e2 0f       	add	r30, r18
    10a4:	f1 1d       	adc	r31, r1
    10a6:	80 83       	st	Z, r24
    10a8:	39 2f       	mov	r19, r25
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	92 0f       	add	r25, r18
			ni = 11;
    10ae:	29 2f       	mov	r18, r25
		c = p[si++];
    10b0:	84 2f       	mov	r24, r20
    10b2:	93 2f       	mov	r25, r19
    10b4:	df cf       	rjmp	.-66     	; 0x1074 <follow_path.constprop.0+0x130>
			if(ni != 8 || c != '.')
    10b6:	98 30       	cpi	r25, 0x08	; 8
    10b8:	09 f0       	breq	.+2      	; 0x10bc <follow_path.constprop.0+0x178>
    10ba:	77 cf       	rjmp	.-274    	; 0xfaa <follow_path.constprop.0+0x66>
			ni = 11;
    10bc:	3b e0       	ldi	r19, 0x0B	; 11
    10be:	f7 cf       	rjmp	.-18     	; 0x10ae <follow_path.constprop.0+0x16a>

000010c0 <fat_opendir.constprop.0.isra.0>:
static uint8_t fat_opendir(dir_t *dj, const char *path)
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	ac 97       	sbiw	r28, 0x2c	; 44
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
	dj->fn = sp;
    10d4:	ce 01       	movw	r24, r28
    10d6:	81 96       	adiw	r24, 0x21	; 33
    10d8:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <dir+0x3>
    10dc:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <dir+0x2>
	if(!(res = follow_path(dj, dir, path)))
    10e0:	be 01       	movw	r22, r28
    10e2:	6f 5f       	subi	r22, 0xFF	; 255
    10e4:	7f 4f       	sbci	r23, 0xFF	; 255
    10e6:	8a eb       	ldi	r24, 0xBA	; 186
    10e8:	92 e0       	ldi	r25, 0x02	; 2
    10ea:	0e 94 a2 07 	call	0xf44	; 0xf44 <follow_path.constprop.0>
    10ee:	81 11       	cpse	r24, r1
    10f0:	21 c0       	rjmp	.+66     	; 0x1134 <fat_opendir.constprop.0.isra.0+0x74>
		if(dir[0])
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	88 23       	and	r24, r24
    10f6:	d1 f0       	breq	.+52     	; 0x112c <fat_opendir.constprop.0.isra.0+0x6c>
			if(dir[DIR_ATTR] & AM_DIR)
    10f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10fa:	84 ff       	sbrs	r24, 4
    10fc:	1b c0       	rjmp	.+54     	; 0x1134 <fat_opendir.constprop.0.isra.0+0x74>
	cluster = ld_u16(dir + DIR_CLUSTER_HI);
    10fe:	8d 89       	ldd	r24, Y+21	; 0x15
    1100:	9e 89       	ldd	r25, Y+22	; 0x16
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	a0 e0       	ldi	r26, 0x00	; 0
	cluster <<= 16;
    1106:	dc 01       	movw	r26, r24
    1108:	99 27       	eor	r25, r25
    110a:	88 27       	eor	r24, r24
	cluster |= ld_u16(dir + DIR_CLUSTER_LO);
    110c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    110e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	84 2b       	or	r24, r20
    1116:	95 2b       	or	r25, r21
    1118:	a6 2b       	or	r26, r22
    111a:	b7 2b       	or	r27, r23
				dj->sclust = get_cluster(dir);
    111c:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <dir+0x4>
    1120:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <dir+0x5>
    1124:	a0 93 c0 02 	sts	0x02C0, r26	; 0x8002c0 <dir+0x6>
    1128:	b0 93 c1 02 	sts	0x02C1, r27	; 0x8002c1 <dir+0x7>
			res = dir_rewind(dj);
    112c:	8a eb       	ldi	r24, 0xBA	; 186
    112e:	92 e0       	ldi	r25, 0x02	; 2
    1130:	0e 94 63 01 	call	0x2c6	; 0x2c6 <dir_rewind>
}
    1134:	ac 96       	adiw	r28, 0x2c	; 44
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <dir_prepare>:

static void dir_prepare(void)
{
	dir_sel = 0;
    1146:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <dir_sel>
	fat_opendir(&dir, dir_path);
    114a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <fat_opendir.constprop.0.isra.0>
	if(fat_readdir(&dir, &dirent[0]))
    114e:	86 e9       	ldi	r24, 0x96	; 150
    1150:	92 e0       	ldi	r25, 0x02	; 2
    1152:	0e 94 b2 04 	call	0x964	; 0x964 <fat_readdir.constprop.0>
    1156:	88 23       	and	r24, r24
    1158:	51 f0       	breq	.+20     	; 0x116e <dir_prepare+0x28>
	{
		static const char dir_empty[] PROGMEM = "[ DIR EMPTY ]";
		lcd_clear();
    115a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_clear>
		lcd_string_P(dir_empty);
    115e:	88 e6       	ldi	r24, 0x68	; 104
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_string_P>
		dir_sel = 3;
    1166:	83 e0       	ldi	r24, 0x03	; 3
    1168:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <dir_sel>
	{
		dir_sel = 2;
	}

	dir_render();
}
    116c:	08 95       	ret
	if(fat_readdir(&dir, &dirent[1]))
    116e:	88 ea       	ldi	r24, 0xA8	; 168
    1170:	92 e0       	ldi	r25, 0x02	; 2
    1172:	0e 94 b2 04 	call	0x964	; 0x964 <fat_readdir.constprop.0>
    1176:	88 23       	and	r24, r24
    1178:	19 f0       	breq	.+6      	; 0x1180 <dir_prepare+0x3a>
		dir_sel = 2;
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <dir_sel>
	dir_render();
    1180:	0c 94 00 03 	jmp	0x600	; 0x600 <dir_render>

00001184 <dir_event>:

static void dir_event(uint8_t button)
{
    1184:	2f 92       	push	r2
    1186:	3f 92       	push	r3
    1188:	4f 92       	push	r4
    118a:	5f 92       	push	r5
    118c:	6f 92       	push	r6
    118e:	7f 92       	push	r7
    1190:	8f 92       	push	r8
    1192:	9f 92       	push	r9
    1194:	af 92       	push	r10
    1196:	bf 92       	push	r11
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	c8 54       	subi	r28, 0x48	; 72
    11ae:	d1 09       	sbc	r29, r1
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
	switch(button)
    11ba:	82 30       	cpi	r24, 0x02	; 2
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <dir_event+0x3c>
    11be:	2d c3       	rjmp	.+1626   	; 0x181a <dir_event+0x696>
    11c0:	30 f5       	brcc	.+76     	; 0x120e <dir_event+0x8a>
    11c2:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <dir_sel>
    11c6:	81 11       	cpse	r24, r1
    11c8:	72 c0       	rjmp	.+228    	; 0x12ae <dir_event+0x12a>
	{
		case 0:
			/* Up */
			if(dir_sel > 2)
    11ca:	19 2f       	mov	r17, r25
    11cc:	93 30       	cpi	r25, 0x03	; 3
    11ce:	10 f5       	brcc	.+68     	; 0x1214 <dir_event+0x90>
			{
				return;
			}

			if(dir_sel == 1)
    11d0:	91 30       	cpi	r25, 0x01	; 1
    11d2:	d1 f5       	brne	.+116    	; 0x1248 <dir_event+0xc4>
			{
				dir_sel = 0;
    11d4:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <dir_sel>
				dir_prepare();
			}
			break;
		}
	}
}
    11d8:	c8 5b       	subi	r28, 0xB8	; 184
    11da:	df 4f       	sbci	r29, 0xFF	; 255
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	df 90       	pop	r13
    11f4:	cf 90       	pop	r12
    11f6:	bf 90       	pop	r11
    11f8:	af 90       	pop	r10
    11fa:	9f 90       	pop	r9
    11fc:	8f 90       	pop	r8
    11fe:	7f 90       	pop	r7
    1200:	6f 90       	pop	r6
    1202:	5f 90       	pop	r5
    1204:	4f 90       	pop	r4
    1206:	3f 90       	pop	r3
    1208:	2f 90       	pop	r2
					dir_render();
    120a:	0c 94 00 03 	jmp	0x600	; 0x600 <dir_render>
	switch(button)
    120e:	84 30       	cpi	r24, 0x04	; 4
    1210:	09 f4       	brne	.+2      	; 0x1214 <dir_event+0x90>
    1212:	24 c3       	rjmp	.+1608   	; 0x185c <dir_event+0x6d8>
}
    1214:	c8 5b       	subi	r28, 0xB8	; 184
    1216:	df 4f       	sbci	r29, 0xFF	; 255
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	ff 90       	pop	r15
    122c:	ef 90       	pop	r14
    122e:	df 90       	pop	r13
    1230:	cf 90       	pop	r12
    1232:	bf 90       	pop	r11
    1234:	af 90       	pop	r10
    1236:	9f 90       	pop	r9
    1238:	8f 90       	pop	r8
    123a:	7f 90       	pop	r7
    123c:	6f 90       	pop	r6
    123e:	5f 90       	pop	r5
    1240:	4f 90       	pop	r4
    1242:	3f 90       	pop	r3
    1244:	2f 90       	pop	r2
    1246:	08 95       	ret
			else if(dir_sel == 0)
    1248:	91 11       	cpse	r25, r1
    124a:	c6 cf       	rjmp	.-116    	; 0x11d8 <dir_event+0x54>
				fat_opendir(&dir, dir_path);
    124c:	0e 94 60 08 	call	0x10c0	; 0x10c0 <fat_opendir.constprop.0.isra.0>
				while(!fat_readdir(&dir, &de))
    1250:	ce 01       	movw	r24, r28
    1252:	81 96       	adiw	r24, 0x21	; 33
    1254:	0e 94 b2 04 	call	0x964	; 0x964 <fat_readdir.constprop.0>
    1258:	81 11       	cpse	r24, r1
    125a:	be cf       	rjmp	.-132    	; 0x11d8 <dir_event+0x54>
					if(strcmp(de.name, dirent[0].name) == 0)
    125c:	6b e9       	ldi	r22, 0x9B	; 155
    125e:	72 e0       	ldi	r23, 0x02	; 2
    1260:	ce 01       	movw	r24, r28
    1262:	86 96       	adiw	r24, 0x26	; 38
    1264:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <strcmp>
    1268:	89 2b       	or	r24, r25
    126a:	b1 f4       	brne	.+44     	; 0x1298 <dir_event+0x114>
				if(flag == 2)
    126c:	11 30       	cpi	r17, 0x01	; 1
    126e:	09 f0       	breq	.+2      	; 0x1272 <dir_event+0xee>
    1270:	b3 cf       	rjmp	.-154    	; 0x11d8 <dir_event+0x54>
					memcpy(&dirent[0], &prev, sizeof(direntry_t));
    1272:	82 e1       	ldi	r24, 0x12	; 18
    1274:	fe 01       	movw	r30, r28
    1276:	31 96       	adiw	r30, 0x01	; 1
    1278:	a6 e9       	ldi	r26, 0x96	; 150
    127a:	b2 e0       	ldi	r27, 0x02	; 2
    127c:	01 90       	ld	r0, Z+
    127e:	0d 92       	st	X+, r0
    1280:	8a 95       	dec	r24
    1282:	e1 f7       	brne	.-8      	; 0x127c <dir_event+0xf8>
					memcpy(&dirent[1], &de, sizeof(direntry_t));
    1284:	82 e1       	ldi	r24, 0x12	; 18
    1286:	fe 01       	movw	r30, r28
    1288:	b1 96       	adiw	r30, 0x21	; 33
    128a:	a8 ea       	ldi	r26, 0xA8	; 168
    128c:	b2 e0       	ldi	r27, 0x02	; 2
    128e:	01 90       	ld	r0, Z+
    1290:	0d 92       	st	X+, r0
    1292:	8a 95       	dec	r24
    1294:	e1 f7       	brne	.-8      	; 0x128e <dir_event+0x10a>
			dir_render();
    1296:	a0 cf       	rjmp	.-192    	; 0x11d8 <dir_event+0x54>
					memcpy(&prev, &de, sizeof(direntry_t));
    1298:	82 e1       	ldi	r24, 0x12	; 18
    129a:	fe 01       	movw	r30, r28
    129c:	b1 96       	adiw	r30, 0x21	; 33
    129e:	de 01       	movw	r26, r28
    12a0:	11 96       	adiw	r26, 0x01	; 1
    12a2:	01 90       	ld	r0, Z+
    12a4:	0d 92       	st	X+, r0
    12a6:	8a 95       	dec	r24
    12a8:	e1 f7       	brne	.-8      	; 0x12a2 <dir_event+0x11e>
					flag = 1;
    12aa:	11 e0       	ldi	r17, 0x01	; 1
    12ac:	d1 cf       	rjmp	.-94     	; 0x1250 <dir_event+0xcc>
			if(dir_sel > 2)
    12ae:	93 30       	cpi	r25, 0x03	; 3
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <dir_event+0x130>
    12b2:	b0 cf       	rjmp	.-160    	; 0x1214 <dir_event+0x90>
				direntry_t *de = &dirent[dir_sel & 1];
    12b4:	a9 2f       	mov	r26, r25
    12b6:	a1 70       	andi	r26, 0x01	; 1
    12b8:	29 2f       	mov	r18, r25
    12ba:	21 70       	andi	r18, 0x01	; 1
    12bc:	30 e0       	ldi	r19, 0x00	; 0
	dir_path[dir_path_len++] = '/';
    12be:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <dir_path_len>
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	8e 0f       	add	r24, r30
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	e0 50       	subi	r30, 0x00	; 0
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	9f e2       	ldi	r25, 0x2F	; 47
    12ce:	90 83       	st	Z, r25
				path_append(de->name);
    12d0:	42 e1       	ldi	r20, 0x12	; 18
    12d2:	a4 9f       	mul	r26, r20
    12d4:	d0 01       	movw	r26, r0
    12d6:	11 24       	eor	r1, r1
    12d8:	a5 56       	subi	r26, 0x65	; 101
    12da:	bd 4f       	sbci	r27, 0xFD	; 253
	for(; (c = *s); ++s)
    12dc:	9d 91       	ld	r25, X+
		dir_path[dir_path_len++] = c;
    12de:	e8 2f       	mov	r30, r24
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
	for(; (c = *s); ++s)
    12e2:	41 e0       	ldi	r20, 0x01	; 1
    12e4:	48 0f       	add	r20, r24
    12e6:	e0 50       	subi	r30, 0x00	; 0
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	91 11       	cpse	r25, r1
    12ec:	ea c0       	rjmp	.+468    	; 0x14c2 <dir_event+0x33e>
    12ee:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <dir_path_len>
	dir_path[dir_path_len] = '\0';
    12f2:	10 82       	st	Z, r1
				if(de->type & AM_DIR)
    12f4:	82 e1       	ldi	r24, 0x12	; 18
    12f6:	82 9f       	mul	r24, r18
    12f8:	f0 01       	movw	r30, r0
    12fa:	83 9f       	mul	r24, r19
    12fc:	f0 0d       	add	r31, r0
    12fe:	11 24       	eor	r1, r1
    1300:	ea 56       	subi	r30, 0x6A	; 106
    1302:	fd 4f       	sbci	r31, 0xFD	; 253
    1304:	84 81       	ldd	r24, Z+4	; 0x04
    1306:	84 fd       	sbrc	r24, 4
    1308:	b2 c2       	rjmp	.+1380   	; 0x186e <dir_event+0x6ea>
	dj.fn = sp;
    130a:	1e 01       	movw	r2, r28
    130c:	53 e3       	ldi	r21, 0x33	; 51
    130e:	25 0e       	add	r2, r21
    1310:	31 1c       	adc	r3, r1

	player_wi.ph = 0;
	player_wi.pm = 0;
	player_wi.ps = 0;

	player_wi.lh = (secs / 3600) % 24;
    1312:	40 e1       	ldi	r20, 0x10	; 16
    1314:	44 2e       	mov	r4, r20
    1316:	4e e0       	ldi	r20, 0x0E	; 14
    1318:	54 2e       	mov	r5, r20
    131a:	61 2c       	mov	r6, r1
    131c:	71 2c       	mov	r7, r1
	player_wi.lm = (secs / 60) % 60;
    131e:	5c e3       	ldi	r21, 0x3C	; 60
    1320:	c5 2e       	mov	r12, r21
    1322:	d1 2c       	mov	r13, r1
    1324:	e1 2c       	mov	r14, r1
    1326:	f1 2c       	mov	r15, r1
{
	uint16_t n;
	uint32_t nread, secs;

rewind:
	n = 0;
    1328:	21 96       	adiw	r28, 0x01	; 1
    132a:	1f ae       	std	Y+63, r1	; 0x3f
    132c:	1e ae       	std	Y+62, r1	; 0x3e
    132e:	21 97       	sbiw	r28, 0x01	; 1
    1330:	3c a2       	std	Y+36, r3	; 0x24
    1332:	2b a2       	std	Y+35, r2	; 0x23
	if(follow_path(&dj, dir, path) || !dir[0] ||
    1334:	be 01       	movw	r22, r28
    1336:	6f 5f       	subi	r22, 0xFF	; 255
    1338:	7f 4f       	sbci	r23, 0xFF	; 255
    133a:	ce 01       	movw	r24, r28
    133c:	81 96       	adiw	r24, 0x21	; 33
    133e:	0e 94 a2 07 	call	0xf44	; 0xf44 <follow_path.constprop.0>
    1342:	98 2f       	mov	r25, r24
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	88 23       	and	r24, r24
    1348:	09 f4       	brne	.+2      	; 0x134c <dir_event+0x1c8>
    134a:	b8 c0       	rjmp	.+368    	; 0x14bc <dir_event+0x338>
    134c:	8c 85       	ldd	r24, Y+12	; 0x0c
    134e:	80 71       	andi	r24, 0x10	; 16
    1350:	89 2b       	or	r24, r25
    1352:	09 f0       	breq	.+2      	; 0x1356 <dir_event+0x1d2>
    1354:	b3 c0       	rjmp	.+358    	; 0x14bc <dir_event+0x338>
	cluster = ld_u16(dir + DIR_CLUSTER_HI);
    1356:	8d 89       	ldd	r24, Y+21	; 0x15
    1358:	9e 89       	ldd	r25, Y+22	; 0x16
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	a0 e0       	ldi	r26, 0x00	; 0
	cluster <<= 16;
    135e:	dc 01       	movw	r26, r24
    1360:	99 27       	eor	r25, r25
    1362:	88 27       	eor	r24, r24
	cluster |= ld_u16(dir + DIR_CLUSTER_LO);
    1364:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1366:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	84 2b       	or	r24, r20
    136e:	95 2b       	or	r25, r21
    1370:	a6 2b       	or	r26, r22
    1372:	b7 2b       	or	r27, r23
	_fs.org_clust = get_cluster(dir);
    1374:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <_fs+0x13>
    1378:	90 93 f9 06 	sts	0x06F9, r25	; 0x8006f9 <_fs+0x14>
    137c:	a0 93 fa 06 	sts	0x06FA, r26	; 0x8006fa <_fs+0x15>
    1380:	b0 93 fb 06 	sts	0x06FB, r27	; 0x8006fb <_fs+0x16>
	fat_fsize = ld_u32(dir + DIR_FILESIZE);
    1384:	ce 01       	movw	r24, r28
    1386:	4d 96       	adiw	r24, 0x1d	; 29
    1388:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_u32>
    138c:	60 93 08 07 	sts	0x0708, r22	; 0x800708 <fat_fsize>
    1390:	70 93 09 07 	sts	0x0709, r23	; 0x800709 <fat_fsize+0x1>
    1394:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <fat_fsize+0x2>
    1398:	90 93 0b 07 	sts	0x070B, r25	; 0x80070b <fat_fsize+0x3>
	fat_ftell = 0;
    139c:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <fat_ftell>
    13a0:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <fat_ftell+0x1>
    13a4:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <fat_ftell+0x2>
    13a8:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <fat_ftell+0x3>
		if(fat_fread(player_buf, PLAYER_BUFFER_SIZE, &n) || n != PLAYER_BUFFER_SIZE)
    13ac:	be 01       	movw	r22, r28
    13ae:	6f 5f       	subi	r22, 0xFF	; 255
    13b0:	7f 4f       	sbci	r23, 0xFF	; 255
    13b2:	81 ed       	ldi	r24, 0xD1	; 209
    13b4:	92 e0       	ldi	r25, 0x02	; 2
    13b6:	0e 94 64 05 	call	0xac8	; 0xac8 <fat_fread.constprop.0>
    13ba:	81 11       	cpse	r24, r1
    13bc:	7f c0       	rjmp	.+254    	; 0x14bc <dir_event+0x338>
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	9a 81       	ldd	r25, Y+2	; 0x02
    13c2:	81 15       	cp	r24, r1
    13c4:	92 40       	sbci	r25, 0x02	; 2
    13c6:	09 f0       	breq	.+2      	; 0x13ca <dir_event+0x246>
    13c8:	79 c0       	rjmp	.+242    	; 0x14bc <dir_event+0x338>
	if(!mem_cmp(player_buf, (uint8_t *)"RIFF", 4))
    13ca:	44 e0       	ldi	r20, 0x04	; 4
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	65 e6       	ldi	r22, 0x65	; 101
    13d0:	72 e0       	ldi	r23, 0x02	; 2
    13d2:	81 ed       	ldi	r24, 0xD1	; 209
    13d4:	92 e0       	ldi	r25, 0x02	; 2
    13d6:	0e 94 ca 00 	call	0x194	; 0x194 <mem_cmp>
    13da:	88 23       	and	r24, r24
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <dir_event+0x25c>
    13de:	6e c0       	rjmp	.+220    	; 0x14bc <dir_event+0x338>
	if(!mem_cmp(player_buf + 8, (uint8_t *)"WAVEfmt ", 8))
    13e0:	48 e0       	ldi	r20, 0x08	; 8
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	6a e6       	ldi	r22, 0x6A	; 106
    13e6:	72 e0       	ldi	r23, 0x02	; 2
    13e8:	89 ed       	ldi	r24, 0xD9	; 217
    13ea:	92 e0       	ldi	r25, 0x02	; 2
    13ec:	0e 94 ca 00 	call	0x194	; 0x194 <mem_cmp>
    13f0:	88 23       	and	r24, r24
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <dir_event+0x272>
    13f4:	63 c0       	rjmp	.+198    	; 0x14bc <dir_event+0x338>
	if(ld_u32(player_buf + 16) != 16)
    13f6:	81 ee       	ldi	r24, 0xE1	; 225
    13f8:	92 e0       	ldi	r25, 0x02	; 2
    13fa:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_u32>
    13fe:	25 96       	adiw	r28, 0x05	; 5
    1400:	6c af       	std	Y+60, r22	; 0x3c
    1402:	7d af       	std	Y+61, r23	; 0x3d
    1404:	8e af       	std	Y+62, r24	; 0x3e
    1406:	9f af       	std	Y+63, r25	; 0x3f
    1408:	25 97       	sbiw	r28, 0x05	; 5
    140a:	60 31       	cpi	r22, 0x10	; 16
    140c:	71 05       	cpc	r23, r1
    140e:	81 05       	cpc	r24, r1
    1410:	91 05       	cpc	r25, r1
    1412:	09 f0       	breq	.+2      	; 0x1416 <dir_event+0x292>
    1414:	53 c0       	rjmp	.+166    	; 0x14bc <dir_event+0x338>
	if(ld_u16(player_buf + 20) != 1)
    1416:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <player_buf+0x14>
    141a:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <player_buf+0x15>
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	09 f0       	breq	.+2      	; 0x1424 <dir_event+0x2a0>
    1422:	4c c0       	rjmp	.+152    	; 0x14bc <dir_event+0x338>
	player_wi.num_channels = ld_u16(player_buf + 22);
    1424:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <player_buf+0x16>
    1428:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <player_wi>
	if(player_wi.num_channels != 1 && player_wi.num_channels != 2)
    142c:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <player_wi>
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	29 f0       	breq	.+10     	; 0x143e <dir_event+0x2ba>
    1434:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <player_wi>
    1438:	82 30       	cpi	r24, 0x02	; 2
    143a:	09 f0       	breq	.+2      	; 0x143e <dir_event+0x2ba>
    143c:	3f c0       	rjmp	.+126    	; 0x14bc <dir_event+0x338>
		sample_rate = ld_u32(player_buf + 24);
    143e:	89 ee       	ldi	r24, 0xE9	; 233
    1440:	92 e0       	ldi	r25, 0x02	; 2
    1442:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_u32>
    1446:	46 2f       	mov	r20, r22
    1448:	57 2f       	mov	r21, r23
    144a:	bc 01       	movw	r22, r24
		for(i = 0; i < ARRAY_LENGTH(player_sample_rates); ++i)
    144c:	ec e0       	ldi	r30, 0x0C	; 12
    144e:	f2 e0       	ldi	r31, 0x02	; 2
		sample_rate = ld_u32(player_buf + 24);
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	a8 2f       	mov	r26, r24
			if(sample_rate == player_sample_rates[i].sample_rate)
    1456:	00 81       	ld	r16, Z
    1458:	11 81       	ldd	r17, Z+1	; 0x01
    145a:	22 81       	ldd	r18, Z+2	; 0x02
    145c:	33 81       	ldd	r19, Z+3	; 0x03
    145e:	40 17       	cp	r20, r16
    1460:	51 07       	cpc	r21, r17
    1462:	62 07       	cpc	r22, r18
    1464:	73 07       	cpc	r23, r19
    1466:	81 f5       	brne	.+96     	; 0x14c8 <dir_event+0x344>
				player_wi.compare_value = player_sample_rates[i].compare_value;
    1468:	e5 e0       	ldi	r30, 0x05	; 5
    146a:	e8 9f       	mul	r30, r24
    146c:	90 01       	movw	r18, r0
    146e:	e9 9f       	mul	r30, r25
    1470:	30 0d       	add	r19, r0
    1472:	11 24       	eor	r1, r1
    1474:	24 5f       	subi	r18, 0xF4	; 244
    1476:	3d 4f       	sbci	r19, 0xFD	; 253
    1478:	f9 01       	movw	r30, r18
    147a:	84 81       	ldd	r24, Z+4	; 0x04
    147c:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <player_wi+0x1>
		player_wi.sample_rate = sample_rate;
    1480:	40 93 e1 06 	sts	0x06E1, r20	; 0x8006e1 <player_wi+0xe>
    1484:	50 93 e2 06 	sts	0x06E2, r21	; 0x8006e2 <player_wi+0xf>
    1488:	60 93 e3 06 	sts	0x06E3, r22	; 0x8006e3 <player_wi+0x10>
    148c:	70 93 e4 06 	sts	0x06E4, r23	; 0x8006e4 <player_wi+0x11>
		if(i == ARRAY_LENGTH(player_sample_rates))
    1490:	a8 30       	cpi	r26, 0x08	; 8
    1492:	a1 f0       	breq	.+40     	; 0x14bc <dir_event+0x338>
    1494:	05 ef       	ldi	r16, 0xF5	; 245
    1496:	12 e0       	ldi	r17, 0x02	; 2
    1498:	2e ec       	ldi	r18, 0xCE	; 206
    149a:	a2 2e       	mov	r10, r18
    149c:	24 e0       	ldi	r18, 0x04	; 4
    149e:	b2 2e       	mov	r11, r18
		return 0;
	}

	for(i = 0; i <= haystack_len - needle_len; ++i)
	{
		if(mem_cmp(haystack + i, needle, needle_len))
    14a0:	44 e0       	ldi	r20, 0x04	; 4
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	63 e7       	ldi	r22, 0x73	; 115
    14a6:	72 e0       	ldi	r23, 0x02	; 2
    14a8:	c8 01       	movw	r24, r16
    14aa:	0e 94 ca 00 	call	0x194	; 0x194 <mem_cmp>
    14ae:	81 11       	cpse	r24, r1
    14b0:	f9 c1       	rjmp	.+1010   	; 0x18a4 <dir_event+0x720>
	for(i = 0; i <= haystack_len - needle_len; ++i)
    14b2:	0f 5f       	subi	r16, 0xFF	; 255
    14b4:	1f 4f       	sbci	r17, 0xFF	; 255
    14b6:	a0 16       	cp	r10, r16
    14b8:	b1 06       	cpc	r11, r17
    14ba:	91 f7       	brne	.-28     	; 0x14a0 <dir_event+0x31c>
					path_up();
    14bc:	0e 94 ba 01 	call	0x374	; 0x374 <path_up>
    14c0:	8b ce       	rjmp	.-746    	; 0x11d8 <dir_event+0x54>
		dir_path[dir_path_len++] = c;
    14c2:	90 83       	st	Z, r25
    14c4:	84 2f       	mov	r24, r20
    14c6:	0a cf       	rjmp	.-492    	; 0x12dc <dir_event+0x158>
		for(i = 0; i < ARRAY_LENGTH(player_sample_rates); ++i)
    14c8:	01 96       	adiw	r24, 0x01	; 1
    14ca:	35 96       	adiw	r30, 0x05	; 5
    14cc:	88 30       	cpi	r24, 0x08	; 8
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <dir_event+0x350>
    14d2:	c0 cf       	rjmp	.-128    	; 0x1454 <dir_event+0x2d0>
    14d4:	a8 e0       	ldi	r26, 0x08	; 8
    14d6:	d4 cf       	rjmp	.-88     	; 0x1480 <dir_event+0x2fc>
		if(c == '/')
    14d8:	8f 32       	cpi	r24, 0x2F	; 47
    14da:	09 f4       	brne	.+2      	; 0x14de <dir_event+0x35a>
			name = s + 1;
    14dc:	8f 01       	movw	r16, r30
	for(s = name; (c = *s); ++s)
    14de:	81 91       	ld	r24, Z+
    14e0:	81 11       	cpse	r24, r1
    14e2:	fa cf       	rjmp	.-12     	; 0x14d8 <dir_event+0x354>
	for(; (c = *name) && c != '.'; ++name)
    14e4:	d8 01       	movw	r26, r16
    14e6:	8d 91       	ld	r24, X+
    14e8:	8d 01       	movw	r16, r26
    14ea:	88 23       	and	r24, r24
    14ec:	19 f0       	breq	.+6      	; 0x14f4 <dir_event+0x370>
    14ee:	8e 32       	cpi	r24, 0x2E	; 46
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <dir_event+0x370>
    14f2:	57 c0       	rjmp	.+174    	; 0x15a2 <dir_event+0x41e>
	lcd_cursor(12, 0);
    14f4:	8c e8       	ldi	r24, 0x8C	; 140
    14f6:	0e 94 09 02 	call	0x412	; 0x412 <lcd_command>
	lcd_char(LCD_CHAR_PLUS_MINUS);
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_data>
	player_render_interval();
    1500:	0e 94 3d 02 	call	0x47a	; 0x47a <player_render_interval>
	lcd_cursor(1, 1);
    1504:	81 ec       	ldi	r24, 0xC1	; 193
    1506:	0e 94 09 02 	call	0x412	; 0x412 <lcd_command>
			player_wi.lh, player_wi.lm, player_wi.ls);
    150a:	50 91 d7 06 	lds	r21, 0x06D7	; 0x8006d7 <player_wi+0x4>
    150e:	40 91 d6 06 	lds	r20, 0x06D6	; 0x8006d6 <player_wi+0x3>
    1512:	30 91 d5 06 	lds	r19, 0x06D5	; 0x8006d5 <player_wi+0x2>
			player_wi.ph, player_wi.pm, player_wi.ps,
    1516:	20 91 da 06 	lds	r18, 0x06DA	; 0x8006da <player_wi+0x7>
    151a:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <player_wi+0x6>
    151e:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <player_wi+0x5>
	snprintf(buf, sizeof(buf), "%1d:%02d:%02d/%1d:%02d:%02d",
    1522:	1f 92       	push	r1
    1524:	5f 93       	push	r21
    1526:	1f 92       	push	r1
    1528:	4f 93       	push	r20
    152a:	1f 92       	push	r1
    152c:	3f 93       	push	r19
    152e:	1f 92       	push	r1
    1530:	2f 93       	push	r18
    1532:	1f 92       	push	r1
    1534:	9f 93       	push	r25
    1536:	1f 92       	push	r1
    1538:	8f 93       	push	r24
    153a:	88 e7       	ldi	r24, 0x78	; 120
    153c:	92 e0       	ldi	r25, 0x02	; 2
    153e:	9f 93       	push	r25
    1540:	8f 93       	push	r24
    1542:	1f 92       	push	r1
    1544:	80 e2       	ldi	r24, 0x20	; 32
    1546:	8f 93       	push	r24
    1548:	e1 e0       	ldi	r30, 0x01	; 1
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	ec 0f       	add	r30, r28
    154e:	fd 1f       	adc	r31, r29
    1550:	ff 93       	push	r31
    1552:	ef 93       	push	r30
    1554:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <snprintf>
	lcd_string(buf);
    1558:	ce 01       	movw	r24, r28
    155a:	01 96       	adiw	r24, 0x01	; 1
    155c:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_string>
	nread = 0;
	player_buf_idx = player_wi.offset;
	OCR2A = player_wi.compare_value;
	player_audio_start();
	player_render_init(s);
	while(nread < player_wi.data_len)
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
	nread = 0;
    156a:	81 2c       	mov	r8, r1
    156c:	91 2c       	mov	r9, r1
    156e:	54 01       	movw	r10, r8
	snprintf(buf, sizeof(buf), "%1d:%02d:%02d",
    1570:	00 e2       	ldi	r16, 0x20	; 32
	while(nread < player_wi.data_len)
    1572:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <player_wi+0xa>
    1576:	90 91 de 06 	lds	r25, 0x06DE	; 0x8006de <player_wi+0xb>
    157a:	a0 91 df 06 	lds	r26, 0x06DF	; 0x8006df <player_wi+0xc>
    157e:	b0 91 e0 06 	lds	r27, 0x06E0	; 0x8006e0 <player_wi+0xd>
    1582:	88 16       	cp	r8, r24
    1584:	99 06       	cpc	r9, r25
    1586:	aa 06       	cpc	r10, r26
    1588:	bb 06       	cpc	r11, r27
    158a:	40 f4       	brcc	.+16     	; 0x159c <dir_event+0x418>
	{
		button_check(player_event);
    158c:	8a e5       	ldi	r24, 0x5A	; 90
    158e:	92 e0       	ldi	r25, 0x02	; 2
    1590:	0e 94 78 00 	call	0xf0	; 0xf0 <button_check>
		if(player_flags.Exit)
    1594:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <player_flags>
    1598:	80 ff       	sbrs	r24, 0
    159a:	06 c0       	rjmp	.+12     	; 0x15a8 <dir_event+0x424>
			player_render_timer_partial();
		}
	}

exit:
	player_audio_stop();
    159c:	0e 94 ae 01 	call	0x35c	; 0x35c <player_audio_stop>
    15a0:	8d cf       	rjmp	.-230    	; 0x14bc <dir_event+0x338>
		lcd_char(c);
    15a2:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_data>
	for(; (c = *name) && c != '.'; ++name)
    15a6:	9e cf       	rjmp	.-196    	; 0x14e4 <dir_event+0x360>
		if(player_flags.Rewind)
    15a8:	82 ff       	sbrs	r24, 2
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <dir_event+0x42e>
			player_audio_stop();
    15ac:	0e 94 ae 01 	call	0x35c	; 0x35c <player_audio_stop>
			goto rewind;
    15b0:	bb ce       	rjmp	.-650    	; 0x1328 <dir_event+0x1a4>
		if(player_flags.SkipFwd)
    15b2:	83 ff       	sbrs	r24, 3
    15b4:	50 c0       	rjmp	.+160    	; 0x1656 <dir_event+0x4d2>
			int32_t samples = nread + player_skip_amount[player_skip_idx] * player_wi.num_channels * player_wi.sample_rate;
    15b6:	60 91 d3 06 	lds	r22, 0x06D3	; 0x8006d3 <player_wi>
    15ba:	20 91 e1 06 	lds	r18, 0x06E1	; 0x8006e1 <player_wi+0xe>
    15be:	30 91 e2 06 	lds	r19, 0x06E2	; 0x8006e2 <player_wi+0xf>
    15c2:	40 91 e3 06 	lds	r20, 0x06E3	; 0x8006e3 <player_wi+0x10>
    15c6:	50 91 e4 06 	lds	r21, 0x06E4	; 0x8006e4 <player_wi+0x11>
    15ca:	e0 91 d1 06 	lds	r30, 0x06D1	; 0x8006d1 <player_skip_idx>
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	ee 0f       	add	r30, r30
    15d2:	ff 1f       	adc	r31, r31
    15d4:	e0 50       	subi	r30, 0x00	; 0
    15d6:	fe 4f       	sbci	r31, 0xFE	; 254
    15d8:	80 81       	ld	r24, Z
    15da:	91 81       	ldd	r25, Z+1	; 0x01
    15dc:	68 9f       	mul	r22, r24
    15de:	d0 01       	movw	r26, r0
    15e0:	69 9f       	mul	r22, r25
    15e2:	b0 0d       	add	r27, r0
    15e4:	11 24       	eor	r1, r1
    15e6:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__muluhisi3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	88 0d       	add	r24, r8
    15f0:	99 1d       	adc	r25, r9
    15f2:	aa 1d       	adc	r26, r10
    15f4:	bb 1d       	adc	r27, r11
    15f6:	25 96       	adiw	r28, 0x05	; 5
    15f8:	8c af       	std	Y+60, r24	; 0x3c
    15fa:	9d af       	std	Y+61, r25	; 0x3d
    15fc:	ae af       	std	Y+62, r26	; 0x3e
    15fe:	bf af       	std	Y+63, r27	; 0x3f
    1600:	25 97       	sbiw	r28, 0x05	; 5
			if(samples < player_wi.data_len)
    1602:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <player_wi+0xa>
    1606:	90 91 de 06 	lds	r25, 0x06DE	; 0x8006de <player_wi+0xb>
    160a:	a0 91 df 06 	lds	r26, 0x06DF	; 0x8006df <player_wi+0xc>
    160e:	b0 91 e0 06 	lds	r27, 0x06E0	; 0x8006e0 <player_wi+0xd>
    1612:	25 96       	adiw	r28, 0x05	; 5
    1614:	2c ad       	ldd	r18, Y+60	; 0x3c
    1616:	3d ad       	ldd	r19, Y+61	; 0x3d
    1618:	4e ad       	ldd	r20, Y+62	; 0x3e
    161a:	5f ad       	ldd	r21, Y+63	; 0x3f
    161c:	25 97       	sbiw	r28, 0x05	; 5
    161e:	28 17       	cp	r18, r24
    1620:	39 07       	cpc	r19, r25
    1622:	4a 07       	cpc	r20, r26
    1624:	5b 07       	cpc	r21, r27
    1626:	90 f4       	brcc	.+36     	; 0x164c <dir_event+0x4c8>
				player_audio_stop();
    1628:	0e 94 ae 01 	call	0x35c	; 0x35c <player_audio_stop>
				fat_fseek(samples);
    162c:	25 96       	adiw	r28, 0x05	; 5
    162e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1630:	7d ad       	ldd	r23, Y+61	; 0x3d
    1632:	8e ad       	ldd	r24, Y+62	; 0x3e
    1634:	9f ad       	ldd	r25, Y+63	; 0x3f
    1636:	25 97       	sbiw	r28, 0x05	; 5
    1638:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fat_fseek.isra.0>
				player_audio_start();
    163c:	0e 94 9f 01 	call	0x33e	; 0x33e <player_audio_start>
    1640:	25 96       	adiw	r28, 0x05	; 5
    1642:	8c ac       	ldd	r8, Y+60	; 0x3c
    1644:	9d ac       	ldd	r9, Y+61	; 0x3d
    1646:	ae ac       	ldd	r10, Y+62	; 0x3e
    1648:	bf ac       	ldd	r11, Y+63	; 0x3f
    164a:	25 97       	sbiw	r28, 0x05	; 5
			player_flags.SkipFwd = 0;
    164c:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <player_flags>
    1650:	87 7f       	andi	r24, 0xF7	; 247
    1652:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <player_flags>
		if(player_flags.SkipBwd)
    1656:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <player_flags>
    165a:	84 ff       	sbrs	r24, 4
    165c:	3f c0       	rjmp	.+126    	; 0x16dc <dir_event+0x558>
			int32_t samples = nread - player_skip_amount[player_skip_idx] * player_wi.num_channels * player_wi.sample_rate;
    165e:	60 91 d3 06 	lds	r22, 0x06D3	; 0x8006d3 <player_wi>
    1662:	20 91 e1 06 	lds	r18, 0x06E1	; 0x8006e1 <player_wi+0xe>
    1666:	30 91 e2 06 	lds	r19, 0x06E2	; 0x8006e2 <player_wi+0xf>
    166a:	40 91 e3 06 	lds	r20, 0x06E3	; 0x8006e3 <player_wi+0x10>
    166e:	50 91 e4 06 	lds	r21, 0x06E4	; 0x8006e4 <player_wi+0x11>
    1672:	e0 91 d1 06 	lds	r30, 0x06D1	; 0x8006d1 <player_skip_idx>
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	ee 0f       	add	r30, r30
    167a:	ff 1f       	adc	r31, r31
    167c:	e0 50       	subi	r30, 0x00	; 0
    167e:	fe 4f       	sbci	r31, 0xFE	; 254
    1680:	80 81       	ld	r24, Z
    1682:	91 81       	ldd	r25, Z+1	; 0x01
    1684:	68 9f       	mul	r22, r24
    1686:	d0 01       	movw	r26, r0
    1688:	69 9f       	mul	r22, r25
    168a:	b0 0d       	add	r27, r0
    168c:	11 24       	eor	r1, r1
    168e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__muluhisi3>
    1692:	a5 01       	movw	r20, r10
    1694:	94 01       	movw	r18, r8
    1696:	26 1b       	sub	r18, r22
    1698:	37 0b       	sbc	r19, r23
    169a:	48 0b       	sbc	r20, r24
    169c:	59 0b       	sbc	r21, r25
    169e:	25 96       	adiw	r28, 0x05	; 5
    16a0:	2c af       	std	Y+60, r18	; 0x3c
    16a2:	3d af       	std	Y+61, r19	; 0x3d
    16a4:	4e af       	std	Y+62, r20	; 0x3e
    16a6:	5f af       	std	Y+63, r21	; 0x3f
    16a8:	25 97       	sbiw	r28, 0x05	; 5
			if(samples >= 0)
    16aa:	57 fd       	sbrc	r21, 7
    16ac:	12 c0       	rjmp	.+36     	; 0x16d2 <dir_event+0x54e>
				player_audio_stop();
    16ae:	0e 94 ae 01 	call	0x35c	; 0x35c <player_audio_stop>
				fat_fseek(samples);
    16b2:	25 96       	adiw	r28, 0x05	; 5
    16b4:	6c ad       	ldd	r22, Y+60	; 0x3c
    16b6:	7d ad       	ldd	r23, Y+61	; 0x3d
    16b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    16ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    16bc:	25 97       	sbiw	r28, 0x05	; 5
    16be:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fat_fseek.isra.0>
				player_audio_start();
    16c2:	0e 94 9f 01 	call	0x33e	; 0x33e <player_audio_start>
    16c6:	25 96       	adiw	r28, 0x05	; 5
    16c8:	8c ac       	ldd	r8, Y+60	; 0x3c
    16ca:	9d ac       	ldd	r9, Y+61	; 0x3d
    16cc:	ae ac       	ldd	r10, Y+62	; 0x3e
    16ce:	bf ac       	ldd	r11, Y+63	; 0x3f
    16d0:	25 97       	sbiw	r28, 0x05	; 5
			player_flags.SkipBwd = 0;
    16d2:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <player_flags>
    16d6:	8f 7e       	andi	r24, 0xEF	; 239
    16d8:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <player_flags>
		if(player_swap_flag)
    16dc:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <player_swap_flag>
    16e0:	88 23       	and	r24, r24
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <dir_event+0x562>
    16e4:	46 cf       	rjmp	.-372    	; 0x1572 <dir_event+0x3ee>
			if(fat_fread(player_buf + player_write_offset, PLAYER_BUFFER_SIZE, &n))
    16e6:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <player_write_offset>
    16ea:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <player_write_offset+0x1>
    16ee:	be 01       	movw	r22, r28
    16f0:	61 5c       	subi	r22, 0xC1	; 193
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	8f 52       	subi	r24, 0x2F	; 47
    16f6:	9d 4f       	sbci	r25, 0xFD	; 253
    16f8:	0e 94 64 05 	call	0xac8	; 0xac8 <fat_fread.constprop.0>
    16fc:	81 11       	cpse	r24, r1
    16fe:	4e cf       	rjmp	.-356    	; 0x159c <dir_event+0x418>
			if(n < 512)
    1700:	21 96       	adiw	r28, 0x01	; 1
    1702:	8e ad       	ldd	r24, Y+62	; 0x3e
    1704:	9f ad       	ldd	r25, Y+63	; 0x3f
    1706:	21 97       	sbiw	r28, 0x01	; 1
    1708:	81 15       	cp	r24, r1
    170a:	32 e0       	ldi	r19, 0x02	; 2
    170c:	93 07       	cpc	r25, r19
    170e:	08 f4       	brcc	.+2      	; 0x1712 <dir_event+0x58e>
    1710:	45 cf       	rjmp	.-374    	; 0x159c <dir_event+0x418>
			nread += n;
    1712:	88 0e       	add	r8, r24
    1714:	99 1e       	adc	r9, r25
    1716:	a1 1c       	adc	r10, r1
    1718:	b1 1c       	adc	r11, r1
			player_swap_flag = 0;
    171a:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <player_swap_flag>
			secs = nread / player_wi.sample_rate / player_wi.num_channels;
    171e:	20 91 e1 06 	lds	r18, 0x06E1	; 0x8006e1 <player_wi+0xe>
    1722:	30 91 e2 06 	lds	r19, 0x06E2	; 0x8006e2 <player_wi+0xf>
    1726:	40 91 e3 06 	lds	r20, 0x06E3	; 0x8006e3 <player_wi+0x10>
    172a:	50 91 e4 06 	lds	r21, 0x06E4	; 0x8006e4 <player_wi+0x11>
    172e:	10 91 d3 06 	lds	r17, 0x06D3	; 0x8006d3 <player_wi>
    1732:	c5 01       	movw	r24, r10
    1734:	b4 01       	movw	r22, r8
    1736:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
    173a:	25 96       	adiw	r28, 0x05	; 5
    173c:	2c af       	std	Y+60, r18	; 0x3c
    173e:	3d af       	std	Y+61, r19	; 0x3d
    1740:	4e af       	std	Y+62, r20	; 0x3e
    1742:	5f af       	std	Y+63, r21	; 0x3f
    1744:	25 97       	sbiw	r28, 0x05	; 5
    1746:	21 2f       	mov	r18, r17
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	50 e0       	ldi	r21, 0x00	; 0
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	25 96       	adiw	r28, 0x05	; 5
    1750:	6c ad       	ldd	r22, Y+60	; 0x3c
    1752:	7d ad       	ldd	r23, Y+61	; 0x3d
    1754:	8e ad       	ldd	r24, Y+62	; 0x3e
    1756:	9f ad       	ldd	r25, Y+63	; 0x3f
    1758:	25 97       	sbiw	r28, 0x05	; 5
    175a:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
    175e:	25 96       	adiw	r28, 0x05	; 5
    1760:	2c af       	std	Y+60, r18	; 0x3c
    1762:	3d af       	std	Y+61, r19	; 0x3d
    1764:	4e af       	std	Y+62, r20	; 0x3e
    1766:	5f af       	std	Y+63, r21	; 0x3f
    1768:	25 97       	sbiw	r28, 0x05	; 5
			player_wi.ph = (secs / 3600) % 24;
    176a:	ca 01       	movw	r24, r20
    176c:	b9 01       	movw	r22, r18
    176e:	a3 01       	movw	r20, r6
    1770:	92 01       	movw	r18, r4
    1772:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
    1776:	29 96       	adiw	r28, 0x09	; 9
    1778:	2c af       	std	Y+60, r18	; 0x3c
    177a:	3d af       	std	Y+61, r19	; 0x3d
    177c:	4e af       	std	Y+62, r20	; 0x3e
    177e:	5f af       	std	Y+63, r21	; 0x3f
    1780:	29 97       	sbiw	r28, 0x09	; 9
    1782:	ca 01       	movw	r24, r20
    1784:	b9 01       	movw	r22, r18
    1786:	28 e1       	ldi	r18, 0x18	; 24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
    1792:	60 93 d8 06 	sts	0x06D8, r22	; 0x8006d8 <player_wi+0x5>
			player_wi.pm = (secs / 60) % 60;
    1796:	25 96       	adiw	r28, 0x05	; 5
    1798:	6c ad       	ldd	r22, Y+60	; 0x3c
    179a:	7d ad       	ldd	r23, Y+61	; 0x3d
    179c:	8e ad       	ldd	r24, Y+62	; 0x3e
    179e:	9f ad       	ldd	r25, Y+63	; 0x3f
    17a0:	25 97       	sbiw	r28, 0x05	; 5
    17a2:	a7 01       	movw	r20, r14
    17a4:	96 01       	movw	r18, r12
    17a6:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
    17aa:	25 96       	adiw	r28, 0x05	; 5
    17ac:	2c af       	std	Y+60, r18	; 0x3c
    17ae:	3d af       	std	Y+61, r19	; 0x3d
    17b0:	4e af       	std	Y+62, r20	; 0x3e
    17b2:	5f af       	std	Y+63, r21	; 0x3f
    17b4:	25 97       	sbiw	r28, 0x05	; 5
    17b6:	16 2f       	mov	r17, r22
    17b8:	ca 01       	movw	r24, r20
    17ba:	b9 01       	movw	r22, r18
    17bc:	a7 01       	movw	r20, r14
    17be:	96 01       	movw	r18, r12
    17c0:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
    17c4:	60 93 d9 06 	sts	0x06D9, r22	; 0x8006d9 <player_wi+0x6>
			player_wi.ps = secs % 60;
    17c8:	10 93 da 06 	sts	0x06DA, r17	; 0x8006da <player_wi+0x7>
	lcd_cursor(1, 1);
    17cc:	81 ec       	ldi	r24, 0xC1	; 193
    17ce:	0e 94 09 02 	call	0x412	; 0x412 <lcd_command>
			player_wi.ph, player_wi.pm, player_wi.ps);
    17d2:	20 91 da 06 	lds	r18, 0x06DA	; 0x8006da <player_wi+0x7>
    17d6:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <player_wi+0x6>
    17da:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <player_wi+0x5>
	snprintf(buf, sizeof(buf), "%1d:%02d:%02d",
    17de:	1f 92       	push	r1
    17e0:	2f 93       	push	r18
    17e2:	1f 92       	push	r1
    17e4:	9f 93       	push	r25
    17e6:	1f 92       	push	r1
    17e8:	8f 93       	push	r24
    17ea:	46 e8       	ldi	r20, 0x86	; 134
    17ec:	52 e0       	ldi	r21, 0x02	; 2
    17ee:	5f 93       	push	r21
    17f0:	4f 93       	push	r20
    17f2:	1f 92       	push	r1
    17f4:	0f 93       	push	r16
    17f6:	a1 e0       	ldi	r26, 0x01	; 1
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	ac 0f       	add	r26, r28
    17fc:	bd 1f       	adc	r27, r29
    17fe:	bf 93       	push	r27
    1800:	af 93       	push	r26
    1802:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <snprintf>
	lcd_string(buf);
    1806:	ce 01       	movw	r24, r28
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_string>
}
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	ac ce       	rjmp	.-680    	; 0x1572 <dir_event+0x3ee>
			if(dir_sel > 2)
    181a:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <dir_sel>
    181e:	83 30       	cpi	r24, 0x03	; 3
    1820:	08 f0       	brcs	.+2      	; 0x1824 <dir_event+0x6a0>
    1822:	f8 cc       	rjmp	.-1552   	; 0x1214 <dir_event+0x90>
			if(dir_sel == 0)
    1824:	81 11       	cpse	r24, r1
    1826:	04 c0       	rjmp	.+8      	; 0x1830 <dir_event+0x6ac>
				dir_sel = 1;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <dir_sel>
    182e:	d4 cc       	rjmp	.-1624   	; 0x11d8 <dir_event+0x54>
			else if(dir_sel == 1)
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	09 f0       	breq	.+2      	; 0x1836 <dir_event+0x6b2>
    1834:	d1 cc       	rjmp	.-1630   	; 0x11d8 <dir_event+0x54>
				if(fat_readdir(&dir, &de))
    1836:	ce 01       	movw	r24, r28
    1838:	01 96       	adiw	r24, 0x01	; 1
    183a:	0e 94 b2 04 	call	0x964	; 0x964 <fat_readdir.constprop.0>
    183e:	81 11       	cpse	r24, r1
    1840:	e9 cc       	rjmp	.-1582   	; 0x1214 <dir_event+0x90>
				memcpy(&dirent[0], &dirent[1], sizeof(direntry_t));
    1842:	82 e1       	ldi	r24, 0x12	; 18
    1844:	e8 ea       	ldi	r30, 0xA8	; 168
    1846:	f2 e0       	ldi	r31, 0x02	; 2
    1848:	a6 e9       	ldi	r26, 0x96	; 150
    184a:	b2 e0       	ldi	r27, 0x02	; 2
    184c:	01 90       	ld	r0, Z+
    184e:	0d 92       	st	X+, r0
    1850:	8a 95       	dec	r24
    1852:	e1 f7       	brne	.-8      	; 0x184c <dir_event+0x6c8>
				memcpy(&dirent[1], &de, sizeof(direntry_t));
    1854:	82 e1       	ldi	r24, 0x12	; 18
    1856:	fe 01       	movw	r30, r28
    1858:	31 96       	adiw	r30, 0x01	; 1
    185a:	17 cd       	rjmp	.-1490   	; 0x128a <dir_event+0x106>
			uint8_t prev_len = dir_path_len;
    185c:	10 91 94 02 	lds	r17, 0x0294	; 0x800294 <dir_path_len>
			path_up();
    1860:	0e 94 ba 01 	call	0x374	; 0x374 <path_up>
			if(prev_len > dir_path_len)
    1864:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <dir_path_len>
    1868:	81 17       	cp	r24, r17
    186a:	08 f0       	brcs	.+2      	; 0x186e <dir_event+0x6ea>
    186c:	d3 cc       	rjmp	.-1626   	; 0x1214 <dir_event+0x90>
}
    186e:	c8 5b       	subi	r28, 0xB8	; 184
    1870:	df 4f       	sbci	r29, 0xFF	; 255
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	ff 90       	pop	r15
    1886:	ef 90       	pop	r14
    1888:	df 90       	pop	r13
    188a:	cf 90       	pop	r12
    188c:	bf 90       	pop	r11
    188e:	af 90       	pop	r10
    1890:	9f 90       	pop	r9
    1892:	8f 90       	pop	r8
    1894:	7f 90       	pop	r7
    1896:	6f 90       	pop	r6
    1898:	5f 90       	pop	r5
    189a:	4f 90       	pop	r4
    189c:	3f 90       	pop	r3
    189e:	2f 90       	pop	r2
					dir_prepare();
    18a0:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <dir_prepare>
		player_wi.offset = data_ptr - player_buf + 8;
    18a4:	c8 01       	movw	r24, r16
    18a6:	89 5c       	subi	r24, 0xC9	; 201
    18a8:	92 40       	sbci	r25, 0x02	; 2
    18aa:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <player_wi+0x9>
    18ae:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <player_wi+0x8>
		player_wi.data_len = ld_u32(data_ptr + 4);
    18b2:	c8 01       	movw	r24, r16
    18b4:	04 96       	adiw	r24, 0x04	; 4
    18b6:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_u32>
    18ba:	46 2f       	mov	r20, r22
    18bc:	57 2f       	mov	r21, r23
    18be:	bc 01       	movw	r22, r24
    18c0:	40 93 dd 06 	sts	0x06DD, r20	; 0x8006dd <player_wi+0xa>
    18c4:	50 93 de 06 	sts	0x06DE, r21	; 0x8006de <player_wi+0xb>
    18c8:	60 93 df 06 	sts	0x06DF, r22	; 0x8006df <player_wi+0xc>
    18cc:	70 93 e0 06 	sts	0x06E0, r23	; 0x8006e0 <player_wi+0xd>
	player_flags.Exit = 0;
    18d0:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <player_flags>
    18d4:	80 7e       	andi	r24, 0xE0	; 224
    18d6:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <player_flags>
	player_read_offset = 0;
    18da:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <player_read_offset+0x1>
    18de:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <player_read_offset>
	player_write_offset = PLAYER_BUFFER_SIZE;
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	92 e0       	ldi	r25, 0x02	; 2
    18e6:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <player_write_offset+0x1>
    18ea:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <player_write_offset>
	player_buf_idx = player_wi.offset;
    18ee:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <player_wi+0x8>
    18f2:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <player_wi+0x9>
    18f6:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <player_buf_idx+0x1>
    18fa:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <player_buf_idx>
	OCR2A = player_wi.compare_value;
    18fe:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <player_wi+0x1>
    1902:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	player_audio_start();
    1906:	0e 94 9f 01 	call	0x33e	; 0x33e <player_audio_start>
	uint32_t secs = player_wi.data_len / player_wi.sample_rate / player_wi.num_channels;
    190a:	20 91 dd 06 	lds	r18, 0x06DD	; 0x8006dd <player_wi+0xa>
    190e:	30 91 de 06 	lds	r19, 0x06DE	; 0x8006de <player_wi+0xb>
    1912:	40 91 df 06 	lds	r20, 0x06DF	; 0x8006df <player_wi+0xc>
    1916:	50 91 e0 06 	lds	r21, 0x06E0	; 0x8006e0 <player_wi+0xd>
    191a:	25 96       	adiw	r28, 0x05	; 5
    191c:	2c af       	std	Y+60, r18	; 0x3c
    191e:	3d af       	std	Y+61, r19	; 0x3d
    1920:	4e af       	std	Y+62, r20	; 0x3e
    1922:	5f af       	std	Y+63, r21	; 0x3f
    1924:	25 97       	sbiw	r28, 0x05	; 5
    1926:	20 91 e1 06 	lds	r18, 0x06E1	; 0x8006e1 <player_wi+0xe>
    192a:	30 91 e2 06 	lds	r19, 0x06E2	; 0x8006e2 <player_wi+0xf>
    192e:	40 91 e3 06 	lds	r20, 0x06E3	; 0x8006e3 <player_wi+0x10>
    1932:	50 91 e4 06 	lds	r21, 0x06E4	; 0x8006e4 <player_wi+0x11>
    1936:	10 91 d3 06 	lds	r17, 0x06D3	; 0x8006d3 <player_wi>
    193a:	25 96       	adiw	r28, 0x05	; 5
    193c:	6c ad       	ldd	r22, Y+60	; 0x3c
    193e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1940:	8e ad       	ldd	r24, Y+62	; 0x3e
    1942:	9f ad       	ldd	r25, Y+63	; 0x3f
    1944:	25 97       	sbiw	r28, 0x05	; 5
    1946:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
    194a:	25 96       	adiw	r28, 0x05	; 5
    194c:	2c af       	std	Y+60, r18	; 0x3c
    194e:	3d af       	std	Y+61, r19	; 0x3d
    1950:	4e af       	std	Y+62, r20	; 0x3e
    1952:	5f af       	std	Y+63, r21	; 0x3f
    1954:	25 97       	sbiw	r28, 0x05	; 5
    1956:	21 2f       	mov	r18, r17
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	50 e0       	ldi	r21, 0x00	; 0
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	25 96       	adiw	r28, 0x05	; 5
    1960:	6c ad       	ldd	r22, Y+60	; 0x3c
    1962:	7d ad       	ldd	r23, Y+61	; 0x3d
    1964:	8e ad       	ldd	r24, Y+62	; 0x3e
    1966:	9f ad       	ldd	r25, Y+63	; 0x3f
    1968:	25 97       	sbiw	r28, 0x05	; 5
    196a:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
    196e:	25 96       	adiw	r28, 0x05	; 5
    1970:	2c af       	std	Y+60, r18	; 0x3c
    1972:	3d af       	std	Y+61, r19	; 0x3d
    1974:	4e af       	std	Y+62, r20	; 0x3e
    1976:	5f af       	std	Y+63, r21	; 0x3f
    1978:	25 97       	sbiw	r28, 0x05	; 5
	player_wi.ph = 0;
    197a:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <player_wi+0x5>
	player_wi.pm = 0;
    197e:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <player_wi+0x6>
	player_wi.ps = 0;
    1982:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <player_wi+0x7>
	player_wi.lh = (secs / 3600) % 24;
    1986:	ca 01       	movw	r24, r20
    1988:	b9 01       	movw	r22, r18
    198a:	a3 01       	movw	r20, r6
    198c:	92 01       	movw	r18, r4
    198e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
    1992:	29 96       	adiw	r28, 0x09	; 9
    1994:	2c af       	std	Y+60, r18	; 0x3c
    1996:	3d af       	std	Y+61, r19	; 0x3d
    1998:	4e af       	std	Y+62, r20	; 0x3e
    199a:	5f af       	std	Y+63, r21	; 0x3f
    199c:	29 97       	sbiw	r28, 0x09	; 9
    199e:	ca 01       	movw	r24, r20
    19a0:	b9 01       	movw	r22, r18
    19a2:	28 e1       	ldi	r18, 0x18	; 24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	50 e0       	ldi	r21, 0x00	; 0
    19aa:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
    19ae:	60 93 d5 06 	sts	0x06D5, r22	; 0x8006d5 <player_wi+0x2>
	player_wi.lm = (secs / 60) % 60;
    19b2:	25 96       	adiw	r28, 0x05	; 5
    19b4:	6c ad       	ldd	r22, Y+60	; 0x3c
    19b6:	7d ad       	ldd	r23, Y+61	; 0x3d
    19b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    19ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    19bc:	25 97       	sbiw	r28, 0x05	; 5
    19be:	a7 01       	movw	r20, r14
    19c0:	96 01       	movw	r18, r12
    19c2:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
    19c6:	25 96       	adiw	r28, 0x05	; 5
    19c8:	2c af       	std	Y+60, r18	; 0x3c
    19ca:	3d af       	std	Y+61, r19	; 0x3d
    19cc:	4e af       	std	Y+62, r20	; 0x3e
    19ce:	5f af       	std	Y+63, r21	; 0x3f
    19d0:	25 97       	sbiw	r28, 0x05	; 5
    19d2:	16 2f       	mov	r17, r22
    19d4:	ca 01       	movw	r24, r20
    19d6:	b9 01       	movw	r22, r18
    19d8:	a7 01       	movw	r20, r14
    19da:	96 01       	movw	r18, r12
    19dc:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
    19e0:	60 93 d6 06 	sts	0x06D6, r22	; 0x8006d6 <player_wi+0x3>
	player_wi.ls = secs % 60;
    19e4:	10 93 d7 06 	sts	0x06D7, r17	; 0x8006d7 <player_wi+0x4>
	lcd_clear();
    19e8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_clear>
	player_render_pause();
    19ec:	0e 94 34 02 	call	0x468	; 0x468 <player_render_pause>
	lcd_cursor(2, 0);
    19f0:	82 e8       	ldi	r24, 0x82	; 130
    19f2:	0e 94 09 02 	call	0x412	; 0x412 <lcd_command>
	for(s = name; (c = *s); ++s)
    19f6:	e0 e0       	ldi	r30, 0x00	; 0
    19f8:	f1 e0       	ldi	r31, 0x01	; 1
    19fa:	70 cd       	rjmp	.-1312   	; 0x14dc <dir_event+0x358>

000019fc <__vector_7>:
	}
}

/* Audio Interrupt */
ISR(TIMER2_COMPA_vect)
{
    19fc:	1f 92       	push	r1
    19fe:	1f b6       	in	r1, 0x3f	; 63
    1a00:	1f 92       	push	r1
    1a02:	11 24       	eor	r1, r1
    1a04:	2f 93       	push	r18
    1a06:	3f 93       	push	r19
    1a08:	4f 93       	push	r20
    1a0a:	8f 93       	push	r24
    1a0c:	9f 93       	push	r25
    1a0e:	ef 93       	push	r30
    1a10:	ff 93       	push	r31
	if(player_wi.num_channels == 1)
    1a12:	40 91 d3 06 	lds	r20, 0x06D3	; 0x8006d3 <player_wi>
	uint8_t sample = player_buf[player_read_offset + player_buf_idx++];
    1a16:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <player_buf_idx>
    1a1a:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <player_buf_idx+0x1>
    1a1e:	9c 01       	movw	r18, r24
    1a20:	2f 5f       	subi	r18, 0xFF	; 255
    1a22:	3f 4f       	sbci	r19, 0xFF	; 255
    1a24:	30 93 d0 02 	sts	0x02D0, r19	; 0x8002d0 <player_buf_idx+0x1>
    1a28:	20 93 cf 02 	sts	0x02CF, r18	; 0x8002cf <player_buf_idx>
    1a2c:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <player_read_offset>
    1a30:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <player_read_offset+0x1>
    1a34:	ef 52       	subi	r30, 0x2F	; 47
    1a36:	fd 4f       	sbci	r31, 0xFD	; 253
    1a38:	e8 0f       	add	r30, r24
    1a3a:	f9 1f       	adc	r31, r25
    1a3c:	80 81       	ld	r24, Z
	OCR0A = sample;
    1a3e:	87 bd       	out	0x27, r24	; 39
	if(player_wi.num_channels == 1)
    1a40:	41 30       	cpi	r20, 0x01	; 1
    1a42:	49 f5       	brne	.+82     	; 0x1a96 <__vector_7+0x9a>
	OCR0B = sample;
    1a44:	88 bd       	out	0x28, r24	; 40
	if(player_buf_idx == PLAYER_BUFFER_SIZE)
    1a46:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <player_buf_idx>
    1a4a:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <player_buf_idx+0x1>
    1a4e:	81 15       	cp	r24, r1
    1a50:	92 40       	sbci	r25, 0x02	; 2
    1a52:	b1 f4       	brne	.+44     	; 0x1a80 <__vector_7+0x84>
		player_buf_idx = 0;
    1a54:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <player_buf_idx+0x1>
    1a58:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <player_buf_idx>
		tmp = player_read_offset;
    1a5c:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <player_read_offset>
    1a60:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <player_read_offset+0x1>
		player_read_offset = player_write_offset;
    1a64:	20 91 ca 02 	lds	r18, 0x02CA	; 0x8002ca <player_write_offset>
    1a68:	30 91 cb 02 	lds	r19, 0x02CB	; 0x8002cb <player_write_offset+0x1>
    1a6c:	30 93 cd 02 	sts	0x02CD, r19	; 0x8002cd <player_read_offset+0x1>
    1a70:	20 93 cc 02 	sts	0x02CC, r18	; 0x8002cc <player_read_offset>
		player_write_offset = tmp;
    1a74:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <player_write_offset+0x1>
    1a78:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <player_write_offset>
		player_swap_flag = 1;
    1a7c:	40 93 ce 02 	sts	0x02CE, r20	; 0x8002ce <player_swap_flag>
	}
	else
	{
		player_isr_stereo();
	}
}
    1a80:	ff 91       	pop	r31
    1a82:	ef 91       	pop	r30
    1a84:	9f 91       	pop	r25
    1a86:	8f 91       	pop	r24
    1a88:	4f 91       	pop	r20
    1a8a:	3f 91       	pop	r19
    1a8c:	2f 91       	pop	r18
    1a8e:	1f 90       	pop	r1
    1a90:	1f be       	out	0x3f, r1	; 63
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti
	OCR0B = player_buf[player_read_offset + player_buf_idx++];
    1a96:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <player_buf_idx>
    1a9a:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <player_buf_idx+0x1>
    1a9e:	9c 01       	movw	r18, r24
    1aa0:	2f 5f       	subi	r18, 0xFF	; 255
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa4:	30 93 d0 02 	sts	0x02D0, r19	; 0x8002d0 <player_buf_idx+0x1>
    1aa8:	20 93 cf 02 	sts	0x02CF, r18	; 0x8002cf <player_buf_idx>
    1aac:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <player_read_offset>
    1ab0:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <player_read_offset+0x1>
    1ab4:	8f 52       	subi	r24, 0x2F	; 47
    1ab6:	9d 4f       	sbci	r25, 0xFD	; 253
    1ab8:	e8 0f       	add	r30, r24
    1aba:	f9 1f       	adc	r31, r25
    1abc:	80 81       	ld	r24, Z
    1abe:	88 bd       	out	0x28, r24	; 40
	if(player_buf_idx == PLAYER_BUFFER_SIZE)
    1ac0:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <player_buf_idx>
    1ac4:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <player_buf_idx+0x1>
    1ac8:	81 15       	cp	r24, r1
    1aca:	92 40       	sbci	r25, 0x02	; 2
    1acc:	c9 f6       	brne	.-78     	; 0x1a80 <__vector_7+0x84>
		player_buf_idx = 0;
    1ace:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <player_buf_idx+0x1>
    1ad2:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <player_buf_idx>
		tmp = player_read_offset;
    1ad6:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <player_read_offset>
    1ada:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <player_read_offset+0x1>
		player_read_offset = player_write_offset;
    1ade:	20 91 ca 02 	lds	r18, 0x02CA	; 0x8002ca <player_write_offset>
    1ae2:	30 91 cb 02 	lds	r19, 0x02CB	; 0x8002cb <player_write_offset+0x1>
    1ae6:	30 93 cd 02 	sts	0x02CD, r19	; 0x8002cd <player_read_offset+0x1>
    1aea:	20 93 cc 02 	sts	0x02CC, r18	; 0x8002cc <player_read_offset>
		player_write_offset = tmp;
    1aee:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <player_write_offset+0x1>
    1af2:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <player_write_offset>
		player_swap_flag = 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <player_swap_flag>
}
    1afc:	c1 cf       	rjmp	.-126    	; 0x1a80 <__vector_7+0x84>

00001afe <main>:
#include "error.c"
/* #include "recorder.c" */
#include "dir.c"

int main(void)
{
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	ac 97       	sbiw	r28, 0x2c	; 44
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
	LCD_DIR |= pins;
    1b0e:	8a b1       	in	r24, 0x0a	; 10
    1b10:	8f 69       	ori	r24, 0x9F	; 159
    1b12:	8a b9       	out	0x0a, r24	; 10
	LCD_OUT &= ~pins;
    1b14:	8b b1       	in	r24, 0x0b	; 11
    1b16:	80 76       	andi	r24, 0x60	; 96
    1b18:	8b b9       	out	0x0b, r24	; 11
    1b1a:	8f e5       	ldi	r24, 0x5F	; 95
    1b1c:	9a ee       	ldi	r25, 0xEA	; 234
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <main+0x20>
    1b22:	00 c0       	rjmp	.+0      	; 0x1b24 <main+0x26>
    1b24:	00 00       	nop
	lcd_out(LCD_SOFT_RESET);
    1b26:	80 e3       	ldi	r24, 0x30	; 48
    1b28:	0e 94 d5 01 	call	0x3aa	; 0x3aa <lcd_out>
    1b2c:	af e1       	ldi	r26, 0x1F	; 31
    1b2e:	be e4       	ldi	r27, 0x4E	; 78
    1b30:	11 97       	sbiw	r26, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <main+0x32>
    1b34:	00 c0       	rjmp	.+0      	; 0x1b36 <main+0x38>
    1b36:	00 00       	nop
	lcd_enable();
    1b38:	0e 94 ce 01 	call	0x39c	; 0x39c <lcd_enable>
    1b3c:	8f e9       	ldi	r24, 0x9F	; 159
    1b3e:	9f e0       	ldi	r25, 0x0F	; 15
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <main+0x42>
    1b44:	00 c0       	rjmp	.+0      	; 0x1b46 <main+0x48>
    1b46:	00 00       	nop
	lcd_enable();
    1b48:	0e 94 ce 01 	call	0x39c	; 0x39c <lcd_enable>
    1b4c:	af e9       	ldi	r26, 0x9F	; 159
    1b4e:	bf e0       	ldi	r27, 0x0F	; 15
    1b50:	11 97       	sbiw	r26, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <main+0x52>
    1b54:	00 c0       	rjmp	.+0      	; 0x1b56 <main+0x58>
    1b56:	00 00       	nop
	lcd_out(LCD_SET_FUNCTION | LCD_FUNCTION_4BIT);
    1b58:	80 e2       	ldi	r24, 0x20	; 32
    1b5a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <lcd_out>
    1b5e:	8f e1       	ldi	r24, 0x1F	; 31
    1b60:	9e e4       	ldi	r25, 0x4E	; 78
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <main+0x64>
    1b66:	00 c0       	rjmp	.+0      	; 0x1b68 <main+0x6a>
    1b68:	00 00       	nop
	lcd_command(LCD_SET_FUNCTION | LCD_FUNCTION_4BIT |
    1b6a:	88 e2       	ldi	r24, 0x28	; 40
    1b6c:	0e 94 09 02 	call	0x412	; 0x412 <lcd_command>
	lcd_command(LCD_SET_DISPLAY | LCD_DISPLAY_ON |
    1b70:	8c e0       	ldi	r24, 0x0C	; 12
    1b72:	0e 94 09 02 	call	0x412	; 0x412 <lcd_command>
	lcd_command(LCD_SET_ENTRY | LCD_ENTRY_INCREASE |
    1b76:	86 e0       	ldi	r24, 0x06	; 6
    1b78:	0e 94 09 02 	call	0x412	; 0x412 <lcd_command>
	lcd_clear();
    1b7c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_clear>
	0x00
};

static void gchar_init(void)
{
	lcd_gchar(LCD_CHAR_PLAY, chr_play);
    1b80:	64 e4       	ldi	r22, 0x44	; 68
    1b82:	72 e0       	ldi	r23, 0x02	; 2
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	0e 94 18 02 	call	0x430	; 0x430 <lcd_gchar>
	lcd_gchar(LCD_CHAR_PAUSE, chr_pause);
    1b8a:	6c e3       	ldi	r22, 0x3C	; 60
    1b8c:	72 e0       	ldi	r23, 0x02	; 2
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	0e 94 18 02 	call	0x430	; 0x430 <lcd_gchar>
	lcd_gchar(LCD_CHAR_PLUS_MINUS, chr_plus_minus);
    1b94:	64 e3       	ldi	r22, 0x34	; 52
    1b96:	72 e0       	ldi	r23, 0x02	; 2
    1b98:	82 e0       	ldi	r24, 0x02	; 2
    1b9a:	0e 94 18 02 	call	0x430	; 0x430 <lcd_gchar>
	PORTB |= (1 << PB0) | (1 << PB1);
    1b9e:	85 b1       	in	r24, 0x05	; 5
    1ba0:	83 60       	ori	r24, 0x03	; 3
    1ba2:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3) | (1 << PC4);
    1ba4:	88 b1       	in	r24, 0x08	; 8
    1ba6:	8f 61       	ori	r24, 0x1F	; 31
    1ba8:	88 b9       	out	0x08, r24	; 8
	DDRD |= (1 << PLAYER_PIN_CHANNEL_RIGHT) | (1 << PLAYER_PIN_CHANNEL_LEFT);
    1baa:	8a b1       	in	r24, 0x0a	; 10
    1bac:	80 66       	ori	r24, 0x60	; 96
    1bae:	8a b9       	out	0x0a, r24	; 10
	CONF_SPI();
    1bb0:	84 b1       	in	r24, 0x04	; 4
    1bb2:	8c 62       	ori	r24, 0x2C	; 44
    1bb4:	84 b9       	out	0x04, r24	; 4
    1bb6:	24 98       	cbi	0x04, 4	; 4
	DESELECT();
    1bb8:	2a 9a       	sbi	0x05, 2	; 5
	SPCR = (0 << SPIE) | (1 << SPE)  | (0 << DORD) | (1 << MSTR) |
    1bba:	83 e5       	ldi	r24, 0x53	; 83
    1bbc:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~(1 << SPI2X);
    1bbe:	8d b5       	in	r24, 0x2d	; 45
    1bc0:	8e 7f       	andi	r24, 0xFE	; 254
    1bc2:	8d bd       	out	0x2d, r24	; 45
	_card_type = 0;
    1bc4:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <_card_type>
    1bc8:	0a e0       	ldi	r16, 0x0A	; 10
    1bca:	10 e0       	ldi	r17, 0x00	; 0
		_spi_xchg(0xFF);
    1bcc:	8f ef       	ldi	r24, 0xFF	; 255
    1bce:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
	for(i = 0; i < 10; ++i)
    1bd2:	01 50       	subi	r16, 0x01	; 1
    1bd4:	11 09       	sbc	r17, r1
    1bd6:	d1 f7       	brne	.-12     	; 0x1bcc <main+0xce>
	SELECT();
    1bd8:	2a 98       	cbi	0x05, 2	; 5
    1bda:	00 e0       	ldi	r16, 0x00	; 0
    1bdc:	12 e0       	ldi	r17, 0x02	; 2
		if(_command(CMD_GO_IDLE_STATE, 0) == IDLE_STATE)
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	ba 01       	movw	r22, r20
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_command>
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	41 f0       	breq	.+16     	; 0x1bfe <main+0x100>
		if(i == 0x1ff)
    1bee:	01 50       	subi	r16, 0x01	; 1
    1bf0:	11 09       	sbc	r17, r1
    1bf2:	a9 f7       	brne	.-22     	; 0x1bde <main+0xe0>
			DESELECT();
    1bf4:	2a 9a       	sbi	0x05, 2	; 5
	button_init();
	player_audio_init();

	if(sd_init())
	{
		mode_error(error_sd);
    1bf6:	81 e9       	ldi	r24, 0x91	; 145
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
	}

	if(fat_mount())
	{
		mode_error(error_fat);
    1bfa:	0e 94 ee 02 	call	0x5dc	; 0x5dc <mode_error>
	if((_command(CMD_SEND_IF_COND, 0x1AA) & ILLEGAL_CMD) == 0)
    1bfe:	4a ea       	ldi	r20, 0xAA	; 170
    1c00:	51 e0       	ldi	r21, 0x01	; 1
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	88 e0       	ldi	r24, 0x08	; 8
    1c08:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_command>
    1c0c:	82 fd       	sbrc	r24, 2
    1c0e:	37 c0       	rjmp	.+110    	; 0x1c7e <main+0x180>
		_spi_xchg(0xFF);
    1c10:	8f ef       	ldi	r24, 0xFF	; 255
    1c12:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
		_spi_xchg(0xFF);
    1c16:	8f ef       	ldi	r24, 0xFF	; 255
    1c18:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
		if(((_spi_xchg(0xFF) & 0x01) == 0) ||
    1c1c:	8f ef       	ldi	r24, 0xFF	; 255
    1c1e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
    1c22:	80 ff       	sbrs	r24, 0
    1c24:	e8 cf       	rjmp	.-48     	; 0x1bf6 <main+0xf8>
			(_spi_xchg(0xFF) != 0xAA))
    1c26:	8f ef       	ldi	r24, 0xFF	; 255
    1c28:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
		if(((_spi_xchg(0xFF) & 0x01) == 0) ||
    1c2c:	8a 3a       	cpi	r24, 0xAA	; 170
    1c2e:	19 f7       	brne	.-58     	; 0x1bf6 <main+0xf8>
		_card_type |= SD_2;
    1c30:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <_card_type>
    1c34:	82 60       	ori	r24, 0x02	; 2
    1c36:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <_card_type>
	SELECT();
    1c3a:	e1 2c       	mov	r14, r1
    1c3c:	90 e8       	ldi	r25, 0x80	; 128
    1c3e:	f9 2e       	mov	r15, r25
		if(_card_type & (SD_1 | SD_2))
    1c40:	10 91 0c 07 	lds	r17, 0x070C	; 0x80070c <_card_type>
    1c44:	81 2f       	mov	r24, r17
    1c46:	83 70       	andi	r24, 0x03	; 3
    1c48:	61 f1       	breq	.+88     	; 0x1ca2 <main+0x1a4>
				arg = 0x40000000;
    1c4a:	b1 2c       	mov	r11, r1
    1c4c:	c1 2c       	mov	r12, r1
    1c4e:	d1 2c       	mov	r13, r1
    1c50:	00 e4       	ldi	r16, 0x40	; 64
			if(_card_type & SD_2)
    1c52:	11 ff       	sbrs	r17, 1
			arg = 0;
    1c54:	00 e0       	ldi	r16, 0x00	; 0
			_command(CMD_APP, 0);
    1c56:	40 e0       	ldi	r20, 0x00	; 0
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	ba 01       	movw	r22, r20
    1c5c:	87 e3       	ldi	r24, 0x37	; 55
    1c5e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_command>
			response = _command(CMD_SD_SEND_OP_COND, arg);
    1c62:	4b 2d       	mov	r20, r11
    1c64:	5c 2d       	mov	r21, r12
    1c66:	6d 2d       	mov	r22, r13
    1c68:	70 2f       	mov	r23, r16
    1c6a:	89 e2       	ldi	r24, 0x29	; 41
			response = _command(CMD_SEND_OP_COND, 0);
    1c6c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_command>
		if((response & IDLE_STATE) == 0)
    1c70:	80 ff       	sbrs	r24, 0
    1c72:	1c c0       	rjmp	.+56     	; 0x1cac <main+0x1ae>
		if(i == 0x7FFF)
    1c74:	91 e0       	ldi	r25, 0x01	; 1
    1c76:	e9 1a       	sub	r14, r25
    1c78:	f1 08       	sbc	r15, r1
    1c7a:	11 f7       	brne	.-60     	; 0x1c40 <main+0x142>
    1c7c:	bb cf       	rjmp	.-138    	; 0x1bf4 <main+0xf6>
		_command(CMD_APP, 0);
    1c7e:	40 e0       	ldi	r20, 0x00	; 0
    1c80:	50 e0       	ldi	r21, 0x00	; 0
    1c82:	ba 01       	movw	r22, r20
    1c84:	87 e3       	ldi	r24, 0x37	; 55
    1c86:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_command>
		if((_command(CMD_SD_SEND_OP_COND, 0) & ILLEGAL_CMD) == 0)
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	ba 01       	movw	r22, r20
    1c90:	89 e2       	ldi	r24, 0x29	; 41
    1c92:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_command>
    1c96:	82 fd       	sbrc	r24, 2
    1c98:	d0 cf       	rjmp	.-96     	; 0x1c3a <main+0x13c>
			_card_type |= SD_1;
    1c9a:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <_card_type>
    1c9e:	81 60       	ori	r24, 0x01	; 1
    1ca0:	ca cf       	rjmp	.-108    	; 0x1c36 <main+0x138>
			response = _command(CMD_SEND_OP_COND, 0);
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	50 e0       	ldi	r21, 0x00	; 0
    1ca6:	ba 01       	movw	r22, r20
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	e0 cf       	rjmp	.-64     	; 0x1c6c <main+0x16e>
	if(_card_type & SD_2)
    1cac:	11 ff       	sbrs	r17, 1
    1cae:	19 c0       	rjmp	.+50     	; 0x1ce2 <main+0x1e4>
		if(_command(CMD_READ_OCR, 0))
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	ba 01       	movw	r22, r20
    1cb6:	8a e3       	ldi	r24, 0x3A	; 58
    1cb8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_command>
    1cbc:	81 11       	cpse	r24, r1
    1cbe:	9a cf       	rjmp	.-204    	; 0x1bf4 <main+0xf6>
		if(_spi_xchg(0xFF) & 0x40)
    1cc0:	8f ef       	ldi	r24, 0xFF	; 255
    1cc2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
    1cc6:	86 ff       	sbrs	r24, 6
    1cc8:	03 c0       	rjmp	.+6      	; 0x1cd0 <main+0x1d2>
			_card_type |= SD_HC;
    1cca:	14 60       	ori	r17, 0x04	; 4
    1ccc:	10 93 0c 07 	sts	0x070C, r17	; 0x80070c <_card_type>
		_spi_xchg(0xFF);
    1cd0:	8f ef       	ldi	r24, 0xFF	; 255
    1cd2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
		_spi_xchg(0xFF);
    1cd6:	8f ef       	ldi	r24, 0xFF	; 255
    1cd8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
		_spi_xchg(0xFF);
    1cdc:	8f ef       	ldi	r24, 0xFF	; 255
    1cde:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_spi_xchg>
	if(_command(CMD_SET_BLOCKLEN, 512))
    1ce2:	40 e0       	ldi	r20, 0x00	; 0
    1ce4:	52 e0       	ldi	r21, 0x02	; 2
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	80 e1       	ldi	r24, 0x10	; 16
    1cec:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_command>
		DESELECT();
    1cf0:	2a 9a       	sbi	0x05, 2	; 5
	if(_command(CMD_SET_BLOCKLEN, 512))
    1cf2:	81 11       	cpse	r24, r1
    1cf4:	80 cf       	rjmp	.-256    	; 0x1bf6 <main+0xf8>
	SPCR &= ~((1 << SPR1) | (1 << SPR0));
    1cf6:	8c b5       	in	r24, 0x2c	; 44
    1cf8:	8c 7f       	andi	r24, 0xFC	; 252
    1cfa:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1 << SPI2X);
    1cfc:	8d b5       	in	r24, 0x2d	; 45
    1cfe:	81 60       	ori	r24, 0x01	; 1
    1d00:	8d bd       	out	0x2d, r24	; 45
    1d02:	af ef       	ldi	r26, 0xFF	; 255
    1d04:	b9 ef       	ldi	r27, 0xF9	; 249
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	a1 50       	subi	r26, 0x01	; 1
    1d0a:	b0 40       	sbci	r27, 0x00	; 0
    1d0c:	20 40       	sbci	r18, 0x00	; 0
    1d0e:	e1 f7       	brne	.-8      	; 0x1d08 <main+0x20a>
    1d10:	00 c0       	rjmp	.+0      	; 0x1d12 <main+0x214>
    1d12:	00 00       	nop
	if((fmt = check_fs(buf, bsect)))
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	ba 01       	movw	r22, r20
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	01 96       	adiw	r24, 0x01	; 1
    1d1e:	5c 01       	movw	r10, r24
    1d20:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <check_fs>
    1d24:	45 01       	movw	r8, r10
	bsect = 0;
    1d26:	c1 2c       	mov	r12, r1
    1d28:	d1 2c       	mov	r13, r1
    1d2a:	76 01       	movw	r14, r12
	if((fmt = check_fs(buf, bsect)))
    1d2c:	88 23       	and	r24, r24
    1d2e:	e9 f0       	breq	.+58     	; 0x1d6a <main+0x26c>
		if(!sd_read(buf, bsect, MBR_TABLE, 16))
    1d30:	00 e1       	ldi	r16, 0x10	; 16
    1d32:	10 e0       	ldi	r17, 0x00	; 0
    1d34:	2e eb       	ldi	r18, 0xBE	; 190
    1d36:	31 e0       	ldi	r19, 0x01	; 1
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	ba 01       	movw	r22, r20
    1d3e:	c5 01       	movw	r24, r10
    1d40:	0e 94 1a 03 	call	0x634	; 0x634 <sd_read>
    1d44:	81 11       	cpse	r24, r1
    1d46:	b3 c0       	rjmp	.+358    	; 0x1eae <main+0x3b0>
			if(buf[4])
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	88 23       	and	r24, r24
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <main+0x252>
    1d4e:	af c0       	rjmp	.+350    	; 0x1eae <main+0x3b0>
				bsect = ld_u32(&buf[8]);
    1d50:	ce 01       	movw	r24, r28
    1d52:	09 96       	adiw	r24, 0x09	; 9
    1d54:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_u32>
    1d58:	6b 01       	movw	r12, r22
    1d5a:	7c 01       	movw	r14, r24
				fmt = check_fs(buf, bsect);
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	a6 01       	movw	r20, r12
    1d60:	c5 01       	movw	r24, r10
    1d62:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <check_fs>
	if(fmt)
    1d66:	81 11       	cpse	r24, r1
    1d68:	a2 c0       	rjmp	.+324    	; 0x1eae <main+0x3b0>
	if(sd_read(buf, bsect, 13, sizeof(buf)))
    1d6a:	04 e2       	ldi	r16, 0x24	; 36
    1d6c:	10 e0       	ldi	r17, 0x00	; 0
    1d6e:	2d e0       	ldi	r18, 0x0D	; 13
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	b7 01       	movw	r22, r14
    1d74:	a6 01       	movw	r20, r12
    1d76:	c4 01       	movw	r24, r8
    1d78:	0e 94 1a 03 	call	0x634	; 0x634 <sd_read>
    1d7c:	81 11       	cpse	r24, r1
    1d7e:	97 c0       	rjmp	.+302    	; 0x1eae <main+0x3b0>
	if(!(fsize = ld_u16(buf + BPB_FAT_SIZE_16 - 13)))
    1d80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d82:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d84:	9c 01       	movw	r18, r24
    1d86:	50 e0       	ldi	r21, 0x00	; 0
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	89 2b       	or	r24, r25
    1d8c:	31 f4       	brne	.+12     	; 0x1d9a <main+0x29c>
		fsize = ld_u32(buf + BPB_FAT_SIZE_32 - 13);
    1d8e:	ce 01       	movw	r24, r28
    1d90:	48 96       	adiw	r24, 0x18	; 24
    1d92:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_u32>
    1d96:	9b 01       	movw	r18, r22
    1d98:	ac 01       	movw	r20, r24
	fsize *= buf[PBP_NUM_FATS - 13];
    1d9a:	ac 81       	ldd	r26, Y+4	; 0x04
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__muluhisi3>
    1da2:	69 a7       	std	Y+41, r22	; 0x29
    1da4:	7a a7       	std	Y+42, r23	; 0x2a
    1da6:	8b a7       	std	Y+43, r24	; 0x2b
    1da8:	9c a7       	std	Y+44, r25	; 0x2c
	_fs.fatbase = bsect + ld_u16(buf + BPB_RESERVED_SECTOR_COUNT - 13);
    1daa:	8a 80       	ldd	r8, Y+2	; 0x02
    1dac:	9b 80       	ldd	r9, Y+3	; 0x03
    1dae:	b1 2c       	mov	r11, r1
    1db0:	a1 2c       	mov	r10, r1
    1db2:	c8 0c       	add	r12, r8
    1db4:	d9 1c       	adc	r13, r9
    1db6:	ea 1c       	adc	r14, r10
    1db8:	fb 1c       	adc	r15, r11
    1dba:	c0 92 ec 06 	sts	0x06EC, r12	; 0x8006ec <_fs+0x7>
    1dbe:	d0 92 ed 06 	sts	0x06ED, r13	; 0x8006ed <_fs+0x8>
    1dc2:	e0 92 ee 06 	sts	0x06EE, r14	; 0x8006ee <_fs+0x9>
    1dc6:	f0 92 ef 06 	sts	0x06EF, r15	; 0x8006ef <_fs+0xa>
	_fs.csize = buf[BPB_SECTORS_PER_CLUSTER - 13];
    1dca:	39 80       	ldd	r3, Y+1	; 0x01
    1dcc:	30 92 e5 06 	sts	0x06E5, r3	; 0x8006e5 <_fs>
	return ((uint16_t)p[0]) | ((uint16_t)(p[1]) << 8);
    1dd0:	0d 81       	ldd	r16, Y+5	; 0x05
    1dd2:	1e 81       	ldd	r17, Y+6	; 0x06
	_fs.n_rootdir = ld_u16(buf + PBP_ROOT_ENTRY_COUNT - 13);
    1dd4:	10 93 e7 06 	sts	0x06E7, r17	; 0x8006e7 <_fs+0x2>
    1dd8:	00 93 e6 06 	sts	0x06E6, r16	; 0x8006e6 <_fs+0x1>
	if(!(tsect = ld_u16(buf + BPB_TOTAL_SECTORS_16 - 13)))
    1ddc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dde:	98 85       	ldd	r25, Y+8	; 0x08
    1de0:	ac 01       	movw	r20, r24
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	89 2b       	or	r24, r25
    1de8:	39 f4       	brne	.+14     	; 0x1df8 <main+0x2fa>
		tsect = ld_u32(buf + BPB_TOTAL_SECTORS_32 - 13);
    1dea:	ce 01       	movw	r24, r28
    1dec:	44 96       	adiw	r24, 0x14	; 20
    1dee:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_u32>
    1df2:	46 2f       	mov	r20, r22
    1df4:	57 2f       	mov	r21, r23
    1df6:	bc 01       	movw	r22, r24
		fsize - _fs.n_rootdir / 16) / _fs.csize + 2;
    1df8:	84 e0       	ldi	r24, 0x04	; 4
    1dfa:	16 95       	lsr	r17
    1dfc:	07 95       	ror	r16
    1dfe:	8a 95       	dec	r24
    1e00:	e1 f7       	brne	.-8      	; 0x1dfa <main+0x2fc>
    1e02:	28 01       	movw	r4, r16
    1e04:	71 2c       	mov	r7, r1
    1e06:	61 2c       	mov	r6, r1
    1e08:	84 0c       	add	r8, r4
    1e0a:	95 1c       	adc	r9, r5
    1e0c:	a6 1c       	adc	r10, r6
    1e0e:	b7 1c       	adc	r11, r7
    1e10:	89 a5       	ldd	r24, Y+41	; 0x29
    1e12:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e14:	ab a5       	ldd	r26, Y+43	; 0x2b
    1e16:	bc a5       	ldd	r27, Y+44	; 0x2c
    1e18:	88 0e       	add	r8, r24
    1e1a:	99 1e       	adc	r9, r25
    1e1c:	aa 1e       	adc	r10, r26
    1e1e:	bb 1e       	adc	r11, r27
    1e20:	db 01       	movw	r26, r22
    1e22:	ca 01       	movw	r24, r20
    1e24:	88 19       	sub	r24, r8
    1e26:	99 09       	sbc	r25, r9
    1e28:	aa 09       	sbc	r26, r10
    1e2a:	bb 09       	sbc	r27, r11
    1e2c:	23 2d       	mov	r18, r3
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	50 e0       	ldi	r21, 0x00	; 0
    1e32:	40 e0       	ldi	r20, 0x00	; 0
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__udivmodsi4>
	mclst = (tsect - ld_u16(buf + BPB_RESERVED_SECTOR_COUNT - 13) -
    1e3c:	da 01       	movw	r26, r20
    1e3e:	c9 01       	movw	r24, r18
    1e40:	02 96       	adiw	r24, 0x02	; 2
    1e42:	a1 1d       	adc	r26, r1
    1e44:	b1 1d       	adc	r27, r1
	_fs.n_fatent = (uint32_t)mclst;
    1e46:	80 93 e8 06 	sts	0x06E8, r24	; 0x8006e8 <_fs+0x3>
    1e4a:	90 93 e9 06 	sts	0x06E9, r25	; 0x8006e9 <_fs+0x4>
    1e4e:	a0 93 ea 06 	sts	0x06EA, r26	; 0x8006ea <_fs+0x5>
    1e52:	b0 93 eb 06 	sts	0x06EB, r27	; 0x8006eb <_fs+0x6>
	if(!(mclst >= 0xFFF7))
    1e56:	87 3f       	cpi	r24, 0xF7	; 247
    1e58:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5a:	a1 05       	cpc	r26, r1
    1e5c:	b1 05       	cpc	r27, r1
    1e5e:	38 f1       	brcs	.+78     	; 0x1eae <main+0x3b0>
	_fs.dirbase = ld_u32(buf + (BPB_ROOT_CLUSTER - 13));
    1e60:	ce 01       	movw	r24, r28
    1e62:	80 96       	adiw	r24, 0x20	; 32
    1e64:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_u32>
    1e68:	60 93 f0 06 	sts	0x06F0, r22	; 0x8006f0 <_fs+0xb>
    1e6c:	70 93 f1 06 	sts	0x06F1, r23	; 0x8006f1 <_fs+0xc>
    1e70:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <_fs+0xd>
    1e74:	90 93 f3 06 	sts	0x06F3, r25	; 0x8006f3 <_fs+0xe>
	_fs.database = _fs.fatbase + fsize + _fs.n_rootdir / 16;
    1e78:	c4 0c       	add	r12, r4
    1e7a:	d5 1c       	adc	r13, r5
    1e7c:	e6 1c       	adc	r14, r6
    1e7e:	f7 1c       	adc	r15, r7
    1e80:	89 a5       	ldd	r24, Y+41	; 0x29
    1e82:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e84:	ab a5       	ldd	r26, Y+43	; 0x2b
    1e86:	bc a5       	ldd	r27, Y+44	; 0x2c
    1e88:	c8 0e       	add	r12, r24
    1e8a:	d9 1e       	adc	r13, r25
    1e8c:	ea 1e       	adc	r14, r26
    1e8e:	fb 1e       	adc	r15, r27
    1e90:	c0 92 f4 06 	sts	0x06F4, r12	; 0x8006f4 <_fs+0xf>
    1e94:	d0 92 f5 06 	sts	0x06F5, r13	; 0x8006f5 <_fs+0x10>
    1e98:	e0 92 f6 06 	sts	0x06F6, r14	; 0x8006f6 <_fs+0x11>
    1e9c:	f0 92 f7 06 	sts	0x06F7, r15	; 0x8006f7 <_fs+0x12>

static void dir_open(void)
{
	dir_prepare();
    1ea0:	0e 94 a3 08 	call	0x1146	; 0x1146 <dir_prepare>
	for(;;)
	{
		button_check(dir_event);
    1ea4:	82 ec       	ldi	r24, 0xC2	; 194
    1ea6:	98 e0       	ldi	r25, 0x08	; 8
    1ea8:	0e 94 78 00 	call	0xf0	; 0xf0 <button_check>
	for(;;)
    1eac:	fb cf       	rjmp	.-10     	; 0x1ea4 <main+0x3a6>
    1eae:	85 e8       	ldi	r24, 0x85	; 133
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	a3 ce       	rjmp	.-698    	; 0x1bfa <main+0xfc>

00001eb4 <__udivmodsi4>:
    1eb4:	a1 e2       	ldi	r26, 0x21	; 33
    1eb6:	1a 2e       	mov	r1, r26
    1eb8:	aa 1b       	sub	r26, r26
    1eba:	bb 1b       	sub	r27, r27
    1ebc:	fd 01       	movw	r30, r26
    1ebe:	0d c0       	rjmp	.+26     	; 0x1eda <__udivmodsi4_ep>

00001ec0 <__udivmodsi4_loop>:
    1ec0:	aa 1f       	adc	r26, r26
    1ec2:	bb 1f       	adc	r27, r27
    1ec4:	ee 1f       	adc	r30, r30
    1ec6:	ff 1f       	adc	r31, r31
    1ec8:	a2 17       	cp	r26, r18
    1eca:	b3 07       	cpc	r27, r19
    1ecc:	e4 07       	cpc	r30, r20
    1ece:	f5 07       	cpc	r31, r21
    1ed0:	20 f0       	brcs	.+8      	; 0x1eda <__udivmodsi4_ep>
    1ed2:	a2 1b       	sub	r26, r18
    1ed4:	b3 0b       	sbc	r27, r19
    1ed6:	e4 0b       	sbc	r30, r20
    1ed8:	f5 0b       	sbc	r31, r21

00001eda <__udivmodsi4_ep>:
    1eda:	66 1f       	adc	r22, r22
    1edc:	77 1f       	adc	r23, r23
    1ede:	88 1f       	adc	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	1a 94       	dec	r1
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <__udivmodsi4_loop>
    1ee6:	60 95       	com	r22
    1ee8:	70 95       	com	r23
    1eea:	80 95       	com	r24
    1eec:	90 95       	com	r25
    1eee:	9b 01       	movw	r18, r22
    1ef0:	ac 01       	movw	r20, r24
    1ef2:	bd 01       	movw	r22, r26
    1ef4:	cf 01       	movw	r24, r30
    1ef6:	08 95       	ret

00001ef8 <__tablejump2__>:
    1ef8:	ee 0f       	add	r30, r30
    1efa:	ff 1f       	adc	r31, r31
    1efc:	05 90       	lpm	r0, Z+
    1efe:	f4 91       	lpm	r31, Z
    1f00:	e0 2d       	mov	r30, r0
    1f02:	09 94       	ijmp

00001f04 <__muluhisi3>:
    1f04:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__umulhisi3>
    1f08:	a5 9f       	mul	r26, r21
    1f0a:	90 0d       	add	r25, r0
    1f0c:	b4 9f       	mul	r27, r20
    1f0e:	90 0d       	add	r25, r0
    1f10:	a4 9f       	mul	r26, r20
    1f12:	80 0d       	add	r24, r0
    1f14:	91 1d       	adc	r25, r1
    1f16:	11 24       	eor	r1, r1
    1f18:	08 95       	ret

00001f1a <__umulhisi3>:
    1f1a:	a2 9f       	mul	r26, r18
    1f1c:	b0 01       	movw	r22, r0
    1f1e:	b3 9f       	mul	r27, r19
    1f20:	c0 01       	movw	r24, r0
    1f22:	a3 9f       	mul	r26, r19
    1f24:	70 0d       	add	r23, r0
    1f26:	81 1d       	adc	r24, r1
    1f28:	11 24       	eor	r1, r1
    1f2a:	91 1d       	adc	r25, r1
    1f2c:	b2 9f       	mul	r27, r18
    1f2e:	70 0d       	add	r23, r0
    1f30:	81 1d       	adc	r24, r1
    1f32:	11 24       	eor	r1, r1
    1f34:	91 1d       	adc	r25, r1
    1f36:	08 95       	ret

00001f38 <memset>:
    1f38:	dc 01       	movw	r26, r24
    1f3a:	01 c0       	rjmp	.+2      	; 0x1f3e <memset+0x6>
    1f3c:	6d 93       	st	X+, r22
    1f3e:	41 50       	subi	r20, 0x01	; 1
    1f40:	50 40       	sbci	r21, 0x00	; 0
    1f42:	e0 f7       	brcc	.-8      	; 0x1f3c <memset+0x4>
    1f44:	08 95       	ret

00001f46 <strcmp>:
    1f46:	fb 01       	movw	r30, r22
    1f48:	dc 01       	movw	r26, r24
    1f4a:	8d 91       	ld	r24, X+
    1f4c:	01 90       	ld	r0, Z+
    1f4e:	80 19       	sub	r24, r0
    1f50:	01 10       	cpse	r0, r1
    1f52:	d9 f3       	breq	.-10     	; 0x1f4a <strcmp+0x4>
    1f54:	99 0b       	sbc	r25, r25
    1f56:	08 95       	ret

00001f58 <snprintf>:
    1f58:	ae e0       	ldi	r26, 0x0E	; 14
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e2 eb       	ldi	r30, 0xB2	; 178
    1f5e:	ff e0       	ldi	r31, 0x0F	; 15
    1f60:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__prologue_saves__+0x1c>
    1f64:	0d 89       	ldd	r16, Y+21	; 0x15
    1f66:	1e 89       	ldd	r17, Y+22	; 0x16
    1f68:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6c:	26 e0       	ldi	r18, 0x06	; 6
    1f6e:	2c 83       	std	Y+4, r18	; 0x04
    1f70:	1a 83       	std	Y+2, r17	; 0x02
    1f72:	09 83       	std	Y+1, r16	; 0x01
    1f74:	97 ff       	sbrs	r25, 7
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <snprintf+0x24>
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e8       	ldi	r25, 0x80	; 128
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	9e 83       	std	Y+6, r25	; 0x06
    1f80:	8d 83       	std	Y+5, r24	; 0x05
    1f82:	ae 01       	movw	r20, r28
    1f84:	45 5e       	subi	r20, 0xE5	; 229
    1f86:	5f 4f       	sbci	r21, 0xFF	; 255
    1f88:	69 8d       	ldd	r22, Y+25	; 0x19
    1f8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	01 96       	adiw	r24, 0x01	; 1
    1f90:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <vfprintf>
    1f94:	4d 81       	ldd	r20, Y+5	; 0x05
    1f96:	5e 81       	ldd	r21, Y+6	; 0x06
    1f98:	57 fd       	sbrc	r21, 7
    1f9a:	0a c0       	rjmp	.+20     	; 0x1fb0 <snprintf+0x58>
    1f9c:	2f 81       	ldd	r18, Y+7	; 0x07
    1f9e:	38 85       	ldd	r19, Y+8	; 0x08
    1fa0:	42 17       	cp	r20, r18
    1fa2:	53 07       	cpc	r21, r19
    1fa4:	0c f4       	brge	.+2      	; 0x1fa8 <snprintf+0x50>
    1fa6:	9a 01       	movw	r18, r20
    1fa8:	02 0f       	add	r16, r18
    1faa:	13 1f       	adc	r17, r19
    1fac:	f8 01       	movw	r30, r16
    1fae:	10 82       	st	Z, r1
    1fb0:	2e 96       	adiw	r28, 0x0e	; 14
    1fb2:	e4 e0       	ldi	r30, 0x04	; 4
    1fb4:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__epilogue_restores__+0x1c>

00001fb8 <vfprintf>:
    1fb8:	af e0       	ldi	r26, 0x0F	; 15
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e2 ee       	ldi	r30, 0xE2	; 226
    1fbe:	ff e0       	ldi	r31, 0x0F	; 15
    1fc0:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__prologue_saves__>
    1fc4:	7c 01       	movw	r14, r24
    1fc6:	3b 01       	movw	r6, r22
    1fc8:	8a 01       	movw	r16, r20
    1fca:	dc 01       	movw	r26, r24
    1fcc:	17 96       	adiw	r26, 0x07	; 7
    1fce:	1c 92       	st	X, r1
    1fd0:	1e 92       	st	-X, r1
    1fd2:	16 97       	sbiw	r26, 0x06	; 6
    1fd4:	13 96       	adiw	r26, 0x03	; 3
    1fd6:	8c 91       	ld	r24, X
    1fd8:	81 ff       	sbrs	r24, 1
    1fda:	be c1       	rjmp	.+892    	; 0x2358 <vfprintf+0x3a0>
    1fdc:	9a e0       	ldi	r25, 0x0A	; 10
    1fde:	29 2e       	mov	r2, r25
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	31 96       	adiw	r30, 0x01	; 1
    1fe4:	4f 01       	movw	r8, r30
    1fe6:	d7 01       	movw	r26, r14
    1fe8:	13 96       	adiw	r26, 0x03	; 3
    1fea:	9c 91       	ld	r25, X
    1fec:	f3 01       	movw	r30, r6
    1fee:	93 fd       	sbrc	r25, 3
    1ff0:	85 91       	lpm	r24, Z+
    1ff2:	93 ff       	sbrs	r25, 3
    1ff4:	81 91       	ld	r24, Z+
    1ff6:	3f 01       	movw	r6, r30
    1ff8:	88 23       	and	r24, r24
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <vfprintf+0x46>
    1ffc:	44 c1       	rjmp	.+648    	; 0x2286 <vfprintf+0x2ce>
    1ffe:	85 32       	cpi	r24, 0x25	; 37
    2000:	39 f4       	brne	.+14     	; 0x2010 <vfprintf+0x58>
    2002:	93 fd       	sbrc	r25, 3
    2004:	85 91       	lpm	r24, Z+
    2006:	93 ff       	sbrs	r25, 3
    2008:	81 91       	ld	r24, Z+
    200a:	3f 01       	movw	r6, r30
    200c:	85 32       	cpi	r24, 0x25	; 37
    200e:	29 f4       	brne	.+10     	; 0x201a <vfprintf+0x62>
    2010:	b7 01       	movw	r22, r14
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    2018:	e6 cf       	rjmp	.-52     	; 0x1fe6 <vfprintf+0x2e>
    201a:	b1 2c       	mov	r11, r1
    201c:	41 2c       	mov	r4, r1
    201e:	51 2c       	mov	r5, r1
    2020:	bf e1       	ldi	r27, 0x1F	; 31
    2022:	b5 15       	cp	r27, r5
    2024:	38 f0       	brcs	.+14     	; 0x2034 <vfprintf+0x7c>
    2026:	8b 32       	cpi	r24, 0x2B	; 43
    2028:	09 f1       	breq	.+66     	; 0x206c <vfprintf+0xb4>
    202a:	88 f4       	brcc	.+34     	; 0x204e <vfprintf+0x96>
    202c:	80 32       	cpi	r24, 0x20	; 32
    202e:	01 f1       	breq	.+64     	; 0x2070 <vfprintf+0xb8>
    2030:	83 32       	cpi	r24, 0x23	; 35
    2032:	21 f1       	breq	.+72     	; 0x207c <vfprintf+0xc4>
    2034:	57 fc       	sbrc	r5, 7
    2036:	3a c0       	rjmp	.+116    	; 0x20ac <vfprintf+0xf4>
    2038:	20 ed       	ldi	r18, 0xD0	; 208
    203a:	28 0f       	add	r18, r24
    203c:	2a 30       	cpi	r18, 0x0A	; 10
    203e:	40 f5       	brcc	.+80     	; 0x2090 <vfprintf+0xd8>
    2040:	56 fe       	sbrs	r5, 6
    2042:	1f c0       	rjmp	.+62     	; 0x2082 <vfprintf+0xca>
    2044:	b2 9c       	mul	r11, r2
    2046:	20 0d       	add	r18, r0
    2048:	11 24       	eor	r1, r1
    204a:	b2 2e       	mov	r11, r18
    204c:	06 c0       	rjmp	.+12     	; 0x205a <vfprintf+0xa2>
    204e:	8d 32       	cpi	r24, 0x2D	; 45
    2050:	91 f0       	breq	.+36     	; 0x2076 <vfprintf+0xbe>
    2052:	80 33       	cpi	r24, 0x30	; 48
    2054:	79 f7       	brne	.-34     	; 0x2034 <vfprintf+0x7c>
    2056:	68 94       	set
    2058:	50 f8       	bld	r5, 0
    205a:	f3 01       	movw	r30, r6
    205c:	93 fd       	sbrc	r25, 3
    205e:	85 91       	lpm	r24, Z+
    2060:	93 ff       	sbrs	r25, 3
    2062:	81 91       	ld	r24, Z+
    2064:	3f 01       	movw	r6, r30
    2066:	81 11       	cpse	r24, r1
    2068:	db cf       	rjmp	.-74     	; 0x2020 <vfprintf+0x68>
    206a:	20 c0       	rjmp	.+64     	; 0x20ac <vfprintf+0xf4>
    206c:	68 94       	set
    206e:	51 f8       	bld	r5, 1
    2070:	68 94       	set
    2072:	52 f8       	bld	r5, 2
    2074:	f2 cf       	rjmp	.-28     	; 0x205a <vfprintf+0xa2>
    2076:	68 94       	set
    2078:	53 f8       	bld	r5, 3
    207a:	ef cf       	rjmp	.-34     	; 0x205a <vfprintf+0xa2>
    207c:	68 94       	set
    207e:	54 f8       	bld	r5, 4
    2080:	ec cf       	rjmp	.-40     	; 0x205a <vfprintf+0xa2>
    2082:	42 9c       	mul	r4, r2
    2084:	20 0d       	add	r18, r0
    2086:	11 24       	eor	r1, r1
    2088:	42 2e       	mov	r4, r18
    208a:	68 94       	set
    208c:	55 f8       	bld	r5, 5
    208e:	e5 cf       	rjmp	.-54     	; 0x205a <vfprintf+0xa2>
    2090:	8e 32       	cpi	r24, 0x2E	; 46
    2092:	29 f4       	brne	.+10     	; 0x209e <vfprintf+0xe6>
    2094:	56 fc       	sbrc	r5, 6
    2096:	f7 c0       	rjmp	.+494    	; 0x2286 <vfprintf+0x2ce>
    2098:	68 94       	set
    209a:	56 f8       	bld	r5, 6
    209c:	de cf       	rjmp	.-68     	; 0x205a <vfprintf+0xa2>
    209e:	8c 36       	cpi	r24, 0x6C	; 108
    20a0:	19 f4       	brne	.+6      	; 0x20a8 <vfprintf+0xf0>
    20a2:	68 94       	set
    20a4:	57 f8       	bld	r5, 7
    20a6:	d9 cf       	rjmp	.-78     	; 0x205a <vfprintf+0xa2>
    20a8:	88 36       	cpi	r24, 0x68	; 104
    20aa:	b9 f2       	breq	.-82     	; 0x205a <vfprintf+0xa2>
    20ac:	98 2f       	mov	r25, r24
    20ae:	9f 7d       	andi	r25, 0xDF	; 223
    20b0:	95 54       	subi	r25, 0x45	; 69
    20b2:	93 30       	cpi	r25, 0x03	; 3
    20b4:	c0 f0       	brcs	.+48     	; 0x20e6 <vfprintf+0x12e>
    20b6:	83 36       	cpi	r24, 0x63	; 99
    20b8:	a1 f1       	breq	.+104    	; 0x2122 <vfprintf+0x16a>
    20ba:	83 37       	cpi	r24, 0x73	; 115
    20bc:	c1 f1       	breq	.+112    	; 0x212e <vfprintf+0x176>
    20be:	83 35       	cpi	r24, 0x53	; 83
    20c0:	09 f0       	breq	.+2      	; 0x20c4 <vfprintf+0x10c>
    20c2:	5b c0       	rjmp	.+182    	; 0x217a <vfprintf+0x1c2>
    20c4:	d8 01       	movw	r26, r16
    20c6:	cd 90       	ld	r12, X+
    20c8:	dd 90       	ld	r13, X+
    20ca:	8d 01       	movw	r16, r26
    20cc:	6b 2d       	mov	r22, r11
    20ce:	70 e0       	ldi	r23, 0x00	; 0
    20d0:	56 fc       	sbrc	r5, 6
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <vfprintf+0x120>
    20d4:	6f ef       	ldi	r22, 0xFF	; 255
    20d6:	7f ef       	ldi	r23, 0xFF	; 255
    20d8:	c6 01       	movw	r24, r12
    20da:	0e 94 af 11 	call	0x235e	; 0x235e <strnlen_P>
    20de:	5c 01       	movw	r10, r24
    20e0:	68 94       	set
    20e2:	57 f8       	bld	r5, 7
    20e4:	0a c0       	rjmp	.+20     	; 0x20fa <vfprintf+0x142>
    20e6:	0c 5f       	subi	r16, 0xFC	; 252
    20e8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ea:	ef e3       	ldi	r30, 0x3F	; 63
    20ec:	e9 83       	std	Y+1, r30	; 0x01
    20ee:	aa 24       	eor	r10, r10
    20f0:	a3 94       	inc	r10
    20f2:	b1 2c       	mov	r11, r1
    20f4:	64 01       	movw	r12, r8
    20f6:	e8 94       	clt
    20f8:	57 f8       	bld	r5, 7
    20fa:	53 fc       	sbrc	r5, 3
    20fc:	04 c0       	rjmp	.+8      	; 0x2106 <vfprintf+0x14e>
    20fe:	4a 14       	cp	r4, r10
    2100:	1b 04       	cpc	r1, r11
    2102:	09 f0       	breq	.+2      	; 0x2106 <vfprintf+0x14e>
    2104:	18 f5       	brcc	.+70     	; 0x214c <vfprintf+0x194>
    2106:	34 2c       	mov	r3, r4
    2108:	a1 14       	cp	r10, r1
    210a:	b1 04       	cpc	r11, r1
    210c:	31 f5       	brne	.+76     	; 0x215a <vfprintf+0x1a2>
    210e:	33 20       	and	r3, r3
    2110:	09 f4       	brne	.+2      	; 0x2114 <vfprintf+0x15c>
    2112:	69 cf       	rjmp	.-302    	; 0x1fe6 <vfprintf+0x2e>
    2114:	b7 01       	movw	r22, r14
    2116:	80 e2       	ldi	r24, 0x20	; 32
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    211e:	3a 94       	dec	r3
    2120:	f6 cf       	rjmp	.-20     	; 0x210e <vfprintf+0x156>
    2122:	d8 01       	movw	r26, r16
    2124:	8c 91       	ld	r24, X
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	0e 5f       	subi	r16, 0xFE	; 254
    212a:	1f 4f       	sbci	r17, 0xFF	; 255
    212c:	e0 cf       	rjmp	.-64     	; 0x20ee <vfprintf+0x136>
    212e:	f8 01       	movw	r30, r16
    2130:	c1 90       	ld	r12, Z+
    2132:	d1 90       	ld	r13, Z+
    2134:	8f 01       	movw	r16, r30
    2136:	6b 2d       	mov	r22, r11
    2138:	70 e0       	ldi	r23, 0x00	; 0
    213a:	56 fc       	sbrc	r5, 6
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <vfprintf+0x18a>
    213e:	6f ef       	ldi	r22, 0xFF	; 255
    2140:	7f ef       	ldi	r23, 0xFF	; 255
    2142:	c6 01       	movw	r24, r12
    2144:	0e 94 ba 11 	call	0x2374	; 0x2374 <strnlen>
    2148:	5c 01       	movw	r10, r24
    214a:	d5 cf       	rjmp	.-86     	; 0x20f6 <vfprintf+0x13e>
    214c:	b7 01       	movw	r22, r14
    214e:	80 e2       	ldi	r24, 0x20	; 32
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    2156:	4a 94       	dec	r4
    2158:	d2 cf       	rjmp	.-92     	; 0x20fe <vfprintf+0x146>
    215a:	f6 01       	movw	r30, r12
    215c:	57 fc       	sbrc	r5, 7
    215e:	85 91       	lpm	r24, Z+
    2160:	57 fe       	sbrs	r5, 7
    2162:	81 91       	ld	r24, Z+
    2164:	6f 01       	movw	r12, r30
    2166:	b7 01       	movw	r22, r14
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    216e:	31 10       	cpse	r3, r1
    2170:	3a 94       	dec	r3
    2172:	b1 e0       	ldi	r27, 0x01	; 1
    2174:	ab 1a       	sub	r10, r27
    2176:	b1 08       	sbc	r11, r1
    2178:	c7 cf       	rjmp	.-114    	; 0x2108 <vfprintf+0x150>
    217a:	84 36       	cpi	r24, 0x64	; 100
    217c:	19 f0       	breq	.+6      	; 0x2184 <vfprintf+0x1cc>
    217e:	89 36       	cpi	r24, 0x69	; 105
    2180:	09 f0       	breq	.+2      	; 0x2184 <vfprintf+0x1cc>
    2182:	71 c0       	rjmp	.+226    	; 0x2266 <vfprintf+0x2ae>
    2184:	f8 01       	movw	r30, r16
    2186:	57 fe       	sbrs	r5, 7
    2188:	67 c0       	rjmp	.+206    	; 0x2258 <vfprintf+0x2a0>
    218a:	61 91       	ld	r22, Z+
    218c:	71 91       	ld	r23, Z+
    218e:	81 91       	ld	r24, Z+
    2190:	91 91       	ld	r25, Z+
    2192:	8f 01       	movw	r16, r30
    2194:	e5 2d       	mov	r30, r5
    2196:	ef 76       	andi	r30, 0x6F	; 111
    2198:	de 2e       	mov	r13, r30
    219a:	97 ff       	sbrs	r25, 7
    219c:	09 c0       	rjmp	.+18     	; 0x21b0 <vfprintf+0x1f8>
    219e:	90 95       	com	r25
    21a0:	80 95       	com	r24
    21a2:	70 95       	com	r23
    21a4:	61 95       	neg	r22
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	8f 4f       	sbci	r24, 0xFF	; 255
    21aa:	9f 4f       	sbci	r25, 0xFF	; 255
    21ac:	68 94       	set
    21ae:	d7 f8       	bld	r13, 7
    21b0:	2a e0       	ldi	r18, 0x0A	; 10
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	a4 01       	movw	r20, r8
    21b6:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__ultoa_invert>
    21ba:	c8 2e       	mov	r12, r24
    21bc:	c8 18       	sub	r12, r8
    21be:	ac 2c       	mov	r10, r12
    21c0:	5d 2c       	mov	r5, r13
    21c2:	d6 fe       	sbrs	r13, 6
    21c4:	0c c0       	rjmp	.+24     	; 0x21de <vfprintf+0x226>
    21c6:	e8 94       	clt
    21c8:	50 f8       	bld	r5, 0
    21ca:	cb 14       	cp	r12, r11
    21cc:	40 f4       	brcc	.+16     	; 0x21de <vfprintf+0x226>
    21ce:	d4 fe       	sbrs	r13, 4
    21d0:	05 c0       	rjmp	.+10     	; 0x21dc <vfprintf+0x224>
    21d2:	d2 fc       	sbrc	r13, 2
    21d4:	03 c0       	rjmp	.+6      	; 0x21dc <vfprintf+0x224>
    21d6:	5d 2d       	mov	r21, r13
    21d8:	5e 7e       	andi	r21, 0xEE	; 238
    21da:	55 2e       	mov	r5, r21
    21dc:	ab 2c       	mov	r10, r11
    21de:	54 fe       	sbrs	r5, 4
    21e0:	93 c0       	rjmp	.+294    	; 0x2308 <vfprintf+0x350>
    21e2:	fe 01       	movw	r30, r28
    21e4:	ec 0d       	add	r30, r12
    21e6:	f1 1d       	adc	r31, r1
    21e8:	80 81       	ld	r24, Z
    21ea:	80 33       	cpi	r24, 0x30	; 48
    21ec:	09 f0       	breq	.+2      	; 0x21f0 <vfprintf+0x238>
    21ee:	85 c0       	rjmp	.+266    	; 0x22fa <vfprintf+0x342>
    21f0:	65 2d       	mov	r22, r5
    21f2:	69 7e       	andi	r22, 0xE9	; 233
    21f4:	56 2e       	mov	r5, r22
    21f6:	75 2d       	mov	r23, r5
    21f8:	78 70       	andi	r23, 0x08	; 8
    21fa:	37 2e       	mov	r3, r23
    21fc:	53 fc       	sbrc	r5, 3
    21fe:	93 c0       	rjmp	.+294    	; 0x2326 <vfprintf+0x36e>
    2200:	50 fe       	sbrs	r5, 0
    2202:	8d c0       	rjmp	.+282    	; 0x231e <vfprintf+0x366>
    2204:	bc 2c       	mov	r11, r12
    2206:	a4 14       	cp	r10, r4
    2208:	10 f4       	brcc	.+4      	; 0x220e <vfprintf+0x256>
    220a:	b4 0c       	add	r11, r4
    220c:	ba 18       	sub	r11, r10
    220e:	54 fe       	sbrs	r5, 4
    2210:	90 c0       	rjmp	.+288    	; 0x2332 <vfprintf+0x37a>
    2212:	b7 01       	movw	r22, r14
    2214:	80 e3       	ldi	r24, 0x30	; 48
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    221c:	52 fe       	sbrs	r5, 2
    221e:	07 c0       	rjmp	.+14     	; 0x222e <vfprintf+0x276>
    2220:	88 e7       	ldi	r24, 0x78	; 120
    2222:	51 fc       	sbrc	r5, 1
    2224:	88 e5       	ldi	r24, 0x58	; 88
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	b7 01       	movw	r22, r14
    222a:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    222e:	cb 14       	cp	r12, r11
    2230:	08 f4       	brcc	.+2      	; 0x2234 <vfprintf+0x27c>
    2232:	8b c0       	rjmp	.+278    	; 0x234a <vfprintf+0x392>
    2234:	ca 94       	dec	r12
    2236:	d1 2c       	mov	r13, r1
    2238:	8f ef       	ldi	r24, 0xFF	; 255
    223a:	c8 1a       	sub	r12, r24
    223c:	d8 0a       	sbc	r13, r24
    223e:	c8 0c       	add	r12, r8
    2240:	d9 1c       	adc	r13, r9
    2242:	d6 01       	movw	r26, r12
    2244:	8e 91       	ld	r24, -X
    2246:	6d 01       	movw	r12, r26
    2248:	b7 01       	movw	r22, r14
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    2250:	8c 14       	cp	r8, r12
    2252:	9d 04       	cpc	r9, r13
    2254:	b1 f7       	brne	.-20     	; 0x2242 <vfprintf+0x28a>
    2256:	5b cf       	rjmp	.-330    	; 0x210e <vfprintf+0x156>
    2258:	61 91       	ld	r22, Z+
    225a:	71 91       	ld	r23, Z+
    225c:	07 2e       	mov	r0, r23
    225e:	00 0c       	add	r0, r0
    2260:	88 0b       	sbc	r24, r24
    2262:	99 0b       	sbc	r25, r25
    2264:	96 cf       	rjmp	.-212    	; 0x2192 <vfprintf+0x1da>
    2266:	d5 2c       	mov	r13, r5
    2268:	e8 94       	clt
    226a:	d4 f8       	bld	r13, 4
    226c:	2a e0       	ldi	r18, 0x0A	; 10
    226e:	85 37       	cpi	r24, 0x75	; 117
    2270:	29 f1       	breq	.+74     	; 0x22bc <vfprintf+0x304>
    2272:	f5 2d       	mov	r31, r5
    2274:	f9 7f       	andi	r31, 0xF9	; 249
    2276:	df 2e       	mov	r13, r31
    2278:	80 37       	cpi	r24, 0x70	; 112
    227a:	a1 f0       	breq	.+40     	; 0x22a4 <vfprintf+0x2ec>
    227c:	58 f4       	brcc	.+22     	; 0x2294 <vfprintf+0x2dc>
    227e:	88 35       	cpi	r24, 0x58	; 88
    2280:	a1 f0       	breq	.+40     	; 0x22aa <vfprintf+0x2f2>
    2282:	8f 36       	cpi	r24, 0x6F	; 111
    2284:	d1 f0       	breq	.+52     	; 0x22ba <vfprintf+0x302>
    2286:	f7 01       	movw	r30, r14
    2288:	86 81       	ldd	r24, Z+6	; 0x06
    228a:	97 81       	ldd	r25, Z+7	; 0x07
    228c:	2f 96       	adiw	r28, 0x0f	; 15
    228e:	e2 e1       	ldi	r30, 0x12	; 18
    2290:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__epilogue_restores__>
    2294:	88 37       	cpi	r24, 0x78	; 120
    2296:	b9 f7       	brne	.-18     	; 0x2286 <vfprintf+0x2ce>
    2298:	d4 fe       	sbrs	r13, 4
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <vfprintf+0x2e8>
    229c:	68 94       	set
    229e:	d2 f8       	bld	r13, 2
    22a0:	20 e1       	ldi	r18, 0x10	; 16
    22a2:	0c c0       	rjmp	.+24     	; 0x22bc <vfprintf+0x304>
    22a4:	68 94       	set
    22a6:	d4 f8       	bld	r13, 4
    22a8:	f7 cf       	rjmp	.-18     	; 0x2298 <vfprintf+0x2e0>
    22aa:	54 fe       	sbrs	r5, 4
    22ac:	03 c0       	rjmp	.+6      	; 0x22b4 <vfprintf+0x2fc>
    22ae:	2f 2f       	mov	r18, r31
    22b0:	26 60       	ori	r18, 0x06	; 6
    22b2:	d2 2e       	mov	r13, r18
    22b4:	20 e1       	ldi	r18, 0x10	; 16
    22b6:	32 e0       	ldi	r19, 0x02	; 2
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <vfprintf+0x306>
    22ba:	28 e0       	ldi	r18, 0x08	; 8
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	f8 01       	movw	r30, r16
    22c0:	d7 fe       	sbrs	r13, 7
    22c2:	15 c0       	rjmp	.+42     	; 0x22ee <vfprintf+0x336>
    22c4:	41 91       	ld	r20, Z+
    22c6:	51 91       	ld	r21, Z+
    22c8:	61 91       	ld	r22, Z+
    22ca:	71 91       	ld	r23, Z+
    22cc:	4c 87       	std	Y+12, r20	; 0x0c
    22ce:	5d 87       	std	Y+13, r21	; 0x0d
    22d0:	6e 87       	std	Y+14, r22	; 0x0e
    22d2:	7f 87       	std	Y+15, r23	; 0x0f
    22d4:	8f 01       	movw	r16, r30
    22d6:	a4 01       	movw	r20, r8
    22d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    22da:	7d 85       	ldd	r23, Y+13	; 0x0d
    22dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    22de:	9f 85       	ldd	r25, Y+15	; 0x0f
    22e0:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__ultoa_invert>
    22e4:	c8 2e       	mov	r12, r24
    22e6:	c8 18       	sub	r12, r8
    22e8:	e8 94       	clt
    22ea:	d7 f8       	bld	r13, 7
    22ec:	68 cf       	rjmp	.-304    	; 0x21be <vfprintf+0x206>
    22ee:	81 91       	ld	r24, Z+
    22f0:	91 91       	ld	r25, Z+
    22f2:	ac 01       	movw	r20, r24
    22f4:	70 e0       	ldi	r23, 0x00	; 0
    22f6:	60 e0       	ldi	r22, 0x00	; 0
    22f8:	e9 cf       	rjmp	.-46     	; 0x22cc <vfprintf+0x314>
    22fa:	52 fc       	sbrc	r5, 2
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <vfprintf+0x34a>
    22fe:	a3 94       	inc	r10
    2300:	7a cf       	rjmp	.-268    	; 0x21f6 <vfprintf+0x23e>
    2302:	a3 94       	inc	r10
    2304:	a3 94       	inc	r10
    2306:	77 cf       	rjmp	.-274    	; 0x21f6 <vfprintf+0x23e>
    2308:	85 2d       	mov	r24, r5
    230a:	86 78       	andi	r24, 0x86	; 134
    230c:	09 f4       	brne	.+2      	; 0x2310 <vfprintf+0x358>
    230e:	73 cf       	rjmp	.-282    	; 0x21f6 <vfprintf+0x23e>
    2310:	f6 cf       	rjmp	.-20     	; 0x22fe <vfprintf+0x346>
    2312:	b7 01       	movw	r22, r14
    2314:	80 e2       	ldi	r24, 0x20	; 32
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    231c:	a3 94       	inc	r10
    231e:	a4 14       	cp	r10, r4
    2320:	c0 f3       	brcs	.-16     	; 0x2312 <vfprintf+0x35a>
    2322:	31 2c       	mov	r3, r1
    2324:	74 cf       	rjmp	.-280    	; 0x220e <vfprintf+0x256>
    2326:	34 2c       	mov	r3, r4
    2328:	3a 18       	sub	r3, r10
    232a:	a4 14       	cp	r10, r4
    232c:	08 f4       	brcc	.+2      	; 0x2330 <vfprintf+0x378>
    232e:	6f cf       	rjmp	.-290    	; 0x220e <vfprintf+0x256>
    2330:	f8 cf       	rjmp	.-16     	; 0x2322 <vfprintf+0x36a>
    2332:	85 2d       	mov	r24, r5
    2334:	86 78       	andi	r24, 0x86	; 134
    2336:	09 f4       	brne	.+2      	; 0x233a <vfprintf+0x382>
    2338:	7a cf       	rjmp	.-268    	; 0x222e <vfprintf+0x276>
    233a:	8b e2       	ldi	r24, 0x2B	; 43
    233c:	51 fe       	sbrs	r5, 1
    233e:	80 e2       	ldi	r24, 0x20	; 32
    2340:	57 fc       	sbrc	r5, 7
    2342:	8d e2       	ldi	r24, 0x2D	; 45
    2344:	b7 01       	movw	r22, r14
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	70 cf       	rjmp	.-288    	; 0x222a <vfprintf+0x272>
    234a:	b7 01       	movw	r22, r14
    234c:	80 e3       	ldi	r24, 0x30	; 48
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    2354:	ba 94       	dec	r11
    2356:	6b cf       	rjmp	.-298    	; 0x222e <vfprintf+0x276>
    2358:	8f ef       	ldi	r24, 0xFF	; 255
    235a:	9f ef       	ldi	r25, 0xFF	; 255
    235c:	97 cf       	rjmp	.-210    	; 0x228c <vfprintf+0x2d4>

0000235e <strnlen_P>:
    235e:	fc 01       	movw	r30, r24
    2360:	05 90       	lpm	r0, Z+
    2362:	61 50       	subi	r22, 0x01	; 1
    2364:	70 40       	sbci	r23, 0x00	; 0
    2366:	01 10       	cpse	r0, r1
    2368:	d8 f7       	brcc	.-10     	; 0x2360 <strnlen_P+0x2>
    236a:	80 95       	com	r24
    236c:	90 95       	com	r25
    236e:	8e 0f       	add	r24, r30
    2370:	9f 1f       	adc	r25, r31
    2372:	08 95       	ret

00002374 <strnlen>:
    2374:	fc 01       	movw	r30, r24
    2376:	61 50       	subi	r22, 0x01	; 1
    2378:	70 40       	sbci	r23, 0x00	; 0
    237a:	01 90       	ld	r0, Z+
    237c:	01 10       	cpse	r0, r1
    237e:	d8 f7       	brcc	.-10     	; 0x2376 <strnlen+0x2>
    2380:	80 95       	com	r24
    2382:	90 95       	com	r25
    2384:	8e 0f       	add	r24, r30
    2386:	9f 1f       	adc	r25, r31
    2388:	08 95       	ret

0000238a <fputc>:
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	18 2f       	mov	r17, r24
    2394:	09 2f       	mov	r16, r25
    2396:	eb 01       	movw	r28, r22
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	81 fd       	sbrc	r24, 1
    239c:	09 c0       	rjmp	.+18     	; 0x23b0 <fputc+0x26>
    239e:	1f ef       	ldi	r17, 0xFF	; 255
    23a0:	0f ef       	ldi	r16, 0xFF	; 255
    23a2:	81 2f       	mov	r24, r17
    23a4:	90 2f       	mov	r25, r16
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	08 95       	ret
    23b0:	82 ff       	sbrs	r24, 2
    23b2:	14 c0       	rjmp	.+40     	; 0x23dc <fputc+0x52>
    23b4:	2e 81       	ldd	r18, Y+6	; 0x06
    23b6:	3f 81       	ldd	r19, Y+7	; 0x07
    23b8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ba:	9d 81       	ldd	r25, Y+5	; 0x05
    23bc:	28 17       	cp	r18, r24
    23be:	39 07       	cpc	r19, r25
    23c0:	3c f4       	brge	.+14     	; 0x23d0 <fputc+0x46>
    23c2:	e8 81       	ld	r30, Y
    23c4:	f9 81       	ldd	r31, Y+1	; 0x01
    23c6:	cf 01       	movw	r24, r30
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	99 83       	std	Y+1, r25	; 0x01
    23cc:	88 83       	st	Y, r24
    23ce:	10 83       	st	Z, r17
    23d0:	8e 81       	ldd	r24, Y+6	; 0x06
    23d2:	9f 81       	ldd	r25, Y+7	; 0x07
    23d4:	01 96       	adiw	r24, 0x01	; 1
    23d6:	9f 83       	std	Y+7, r25	; 0x07
    23d8:	8e 83       	std	Y+6, r24	; 0x06
    23da:	e3 cf       	rjmp	.-58     	; 0x23a2 <fputc+0x18>
    23dc:	e8 85       	ldd	r30, Y+8	; 0x08
    23de:	f9 85       	ldd	r31, Y+9	; 0x09
    23e0:	81 2f       	mov	r24, r17
    23e2:	09 95       	icall
    23e4:	89 2b       	or	r24, r25
    23e6:	a1 f3       	breq	.-24     	; 0x23d0 <fputc+0x46>
    23e8:	da cf       	rjmp	.-76     	; 0x239e <fputc+0x14>

000023ea <__ultoa_invert>:
    23ea:	fa 01       	movw	r30, r20
    23ec:	aa 27       	eor	r26, r26
    23ee:	28 30       	cpi	r18, 0x08	; 8
    23f0:	51 f1       	breq	.+84     	; 0x2446 <__ultoa_invert+0x5c>
    23f2:	20 31       	cpi	r18, 0x10	; 16
    23f4:	81 f1       	breq	.+96     	; 0x2456 <__ultoa_invert+0x6c>
    23f6:	e8 94       	clt
    23f8:	6f 93       	push	r22
    23fa:	6e 7f       	andi	r22, 0xFE	; 254
    23fc:	6e 5f       	subi	r22, 0xFE	; 254
    23fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2400:	8f 4f       	sbci	r24, 0xFF	; 255
    2402:	9f 4f       	sbci	r25, 0xFF	; 255
    2404:	af 4f       	sbci	r26, 0xFF	; 255
    2406:	b1 e0       	ldi	r27, 0x01	; 1
    2408:	3e d0       	rcall	.+124    	; 0x2486 <__ultoa_invert+0x9c>
    240a:	b4 e0       	ldi	r27, 0x04	; 4
    240c:	3c d0       	rcall	.+120    	; 0x2486 <__ultoa_invert+0x9c>
    240e:	67 0f       	add	r22, r23
    2410:	78 1f       	adc	r23, r24
    2412:	89 1f       	adc	r24, r25
    2414:	9a 1f       	adc	r25, r26
    2416:	a1 1d       	adc	r26, r1
    2418:	68 0f       	add	r22, r24
    241a:	79 1f       	adc	r23, r25
    241c:	8a 1f       	adc	r24, r26
    241e:	91 1d       	adc	r25, r1
    2420:	a1 1d       	adc	r26, r1
    2422:	6a 0f       	add	r22, r26
    2424:	71 1d       	adc	r23, r1
    2426:	81 1d       	adc	r24, r1
    2428:	91 1d       	adc	r25, r1
    242a:	a1 1d       	adc	r26, r1
    242c:	20 d0       	rcall	.+64     	; 0x246e <__ultoa_invert+0x84>
    242e:	09 f4       	brne	.+2      	; 0x2432 <__ultoa_invert+0x48>
    2430:	68 94       	set
    2432:	3f 91       	pop	r19
    2434:	2a e0       	ldi	r18, 0x0A	; 10
    2436:	26 9f       	mul	r18, r22
    2438:	11 24       	eor	r1, r1
    243a:	30 19       	sub	r19, r0
    243c:	30 5d       	subi	r19, 0xD0	; 208
    243e:	31 93       	st	Z+, r19
    2440:	de f6       	brtc	.-74     	; 0x23f8 <__ultoa_invert+0xe>
    2442:	cf 01       	movw	r24, r30
    2444:	08 95       	ret
    2446:	46 2f       	mov	r20, r22
    2448:	47 70       	andi	r20, 0x07	; 7
    244a:	40 5d       	subi	r20, 0xD0	; 208
    244c:	41 93       	st	Z+, r20
    244e:	b3 e0       	ldi	r27, 0x03	; 3
    2450:	0f d0       	rcall	.+30     	; 0x2470 <__ultoa_invert+0x86>
    2452:	c9 f7       	brne	.-14     	; 0x2446 <__ultoa_invert+0x5c>
    2454:	f6 cf       	rjmp	.-20     	; 0x2442 <__ultoa_invert+0x58>
    2456:	46 2f       	mov	r20, r22
    2458:	4f 70       	andi	r20, 0x0F	; 15
    245a:	40 5d       	subi	r20, 0xD0	; 208
    245c:	4a 33       	cpi	r20, 0x3A	; 58
    245e:	18 f0       	brcs	.+6      	; 0x2466 <__ultoa_invert+0x7c>
    2460:	49 5d       	subi	r20, 0xD9	; 217
    2462:	31 fd       	sbrc	r19, 1
    2464:	40 52       	subi	r20, 0x20	; 32
    2466:	41 93       	st	Z+, r20
    2468:	02 d0       	rcall	.+4      	; 0x246e <__ultoa_invert+0x84>
    246a:	a9 f7       	brne	.-22     	; 0x2456 <__ultoa_invert+0x6c>
    246c:	ea cf       	rjmp	.-44     	; 0x2442 <__ultoa_invert+0x58>
    246e:	b4 e0       	ldi	r27, 0x04	; 4
    2470:	a6 95       	lsr	r26
    2472:	97 95       	ror	r25
    2474:	87 95       	ror	r24
    2476:	77 95       	ror	r23
    2478:	67 95       	ror	r22
    247a:	ba 95       	dec	r27
    247c:	c9 f7       	brne	.-14     	; 0x2470 <__ultoa_invert+0x86>
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	61 05       	cpc	r22, r1
    2482:	71 05       	cpc	r23, r1
    2484:	08 95       	ret
    2486:	9b 01       	movw	r18, r22
    2488:	ac 01       	movw	r20, r24
    248a:	0a 2e       	mov	r0, r26
    248c:	06 94       	lsr	r0
    248e:	57 95       	ror	r21
    2490:	47 95       	ror	r20
    2492:	37 95       	ror	r19
    2494:	27 95       	ror	r18
    2496:	ba 95       	dec	r27
    2498:	c9 f7       	brne	.-14     	; 0x248c <__ultoa_invert+0xa2>
    249a:	62 0f       	add	r22, r18
    249c:	73 1f       	adc	r23, r19
    249e:	84 1f       	adc	r24, r20
    24a0:	95 1f       	adc	r25, r21
    24a2:	a0 1d       	adc	r26, r0
    24a4:	08 95       	ret

000024a6 <__prologue_saves__>:
    24a6:	2f 92       	push	r2
    24a8:	3f 92       	push	r3
    24aa:	4f 92       	push	r4
    24ac:	5f 92       	push	r5
    24ae:	6f 92       	push	r6
    24b0:	7f 92       	push	r7
    24b2:	8f 92       	push	r8
    24b4:	9f 92       	push	r9
    24b6:	af 92       	push	r10
    24b8:	bf 92       	push	r11
    24ba:	cf 92       	push	r12
    24bc:	df 92       	push	r13
    24be:	ef 92       	push	r14
    24c0:	ff 92       	push	r15
    24c2:	0f 93       	push	r16
    24c4:	1f 93       	push	r17
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	ca 1b       	sub	r28, r26
    24d0:	db 0b       	sbc	r29, r27
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	09 94       	ijmp

000024de <__epilogue_restores__>:
    24de:	2a 88       	ldd	r2, Y+18	; 0x12
    24e0:	39 88       	ldd	r3, Y+17	; 0x11
    24e2:	48 88       	ldd	r4, Y+16	; 0x10
    24e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    24e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    24e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    24ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    24ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    24ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    24f0:	b9 84       	ldd	r11, Y+9	; 0x09
    24f2:	c8 84       	ldd	r12, Y+8	; 0x08
    24f4:	df 80       	ldd	r13, Y+7	; 0x07
    24f6:	ee 80       	ldd	r14, Y+6	; 0x06
    24f8:	fd 80       	ldd	r15, Y+5	; 0x05
    24fa:	0c 81       	ldd	r16, Y+4	; 0x04
    24fc:	1b 81       	ldd	r17, Y+3	; 0x03
    24fe:	aa 81       	ldd	r26, Y+2	; 0x02
    2500:	b9 81       	ldd	r27, Y+1	; 0x01
    2502:	ce 0f       	add	r28, r30
    2504:	d1 1d       	adc	r29, r1
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	ed 01       	movw	r28, r26
    2512:	08 95       	ret

00002514 <_exit>:
    2514:	f8 94       	cli

00002516 <__stop_program>:
    2516:	ff cf       	rjmp	.-2      	; 0x2516 <__stop_program>
    2518:	62 02       	muls	r22, r18
    251a:	74 02       	muls	r23, r20
    251c:	7a 02       	muls	r23, r26
    251e:	83 02       	muls	r24, r19
    2520:	87 02       	muls	r24, r23
    2522:	8b 02       	muls	r24, r27
    2524:	8f 02       	muls	r24, r31
