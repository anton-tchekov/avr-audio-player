   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  11               	button_check:
  12               	.LVL0:
  13               	.LFB20:
  14               		.file 1 "button.c"
   1:button.c      **** #define BUTTON_DEBOUNCE_TICKS 200
   2:button.c      **** 
   3:button.c      **** static const volatile uint8_t *_button_ports[7] = { &PINB, &PINC, &PINC, &PINC, &PINC, &PINC, &PINB
   4:button.c      **** static const uint8_t _button_pins[7] = { 1 << 0, 1 << 4, 1 << 3, 1 << 2, 1 << 1, 1 << 0, 1 << 1 };
   5:button.c      **** 
   6:button.c      **** static uint8_t _buttons[7];
   7:button.c      **** 
   8:button.c      **** static void button_init(void)
   9:button.c      **** {
  10:button.c      **** 	PORTB |= (1 << PB0) | (1 << PB1);
  11:button.c      **** 	PORTC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3) | (1 << PC4);
  12:button.c      **** }
  13:button.c      **** 
  14:button.c      **** static void button_check(void (*button_event)(uint8_t))
  15:button.c      **** {
  15               		.loc 1 15 1 view -0
  16               		.cfi_startproc
  17               		.loc 1 15 1 is_stmt 0 view .LVU1
  18 0000 AF92      		push r10
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 10, -2
  22 0002 BF92      		push r11
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 11, -3
  26 0004 CF92      		push r12
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 12, -4
  30 0006 DF92      		push r13
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 13, -5
  34 0008 EF92      		push r14
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 14, -6
  38 000a FF92      		push r15
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 15, -7
  42 000c 0F93      		push r16
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 16, -8
  46 000e 1F93      		push r17
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 17, -9
  50 0010 CF93      		push r28
  51               	.LCFI8:
  52               		.cfi_def_cfa_offset 11
  53               		.cfi_offset 28, -10
  54 0012 DF93      		push r29
  55               	.LCFI9:
  56               		.cfi_def_cfa_offset 12
  57               		.cfi_offset 29, -11
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 10 */
  61               	.L__stack_usage = 10
  62 0014 7C01      		movw r14,r24
  16:button.c      **** 	uint8_t i;
  63               		.loc 1 16 2 is_stmt 1 view .LVU2
  17:button.c      **** 	for(i = 0; i < 7; ++i)
  64               		.loc 1 17 2 view .LVU3
  65               	.LVL1:
  66               		.loc 1 17 13 view .LVU4
  67 0016 80E0      		ldi r24,lo8(_button_ports)
  68 0018 A82E      		mov r10,r24
  69 001a 80E0      		ldi r24,hi8(_button_ports)
  70 001c B82E      		mov r11,r24
  71               	.LVL2:
  72               		.loc 1 17 13 is_stmt 0 view .LVU5
  73 001e 90E0      		ldi r25,lo8(_button_pins)
  74 0020 C92E      		mov r12,r25
  75 0022 90E0      		ldi r25,hi8(_button_pins)
  76 0024 D92E      		mov r13,r25
  77 0026 C0E0      		ldi r28,lo8(_buttons)
  78 0028 D0E0      		ldi r29,hi8(_buttons)
  79               		.loc 1 17 8 view .LVU6
  80 002a 10E0      		ldi r17,0
  18:button.c      **** 	{
  19:button.c      **** 		if(!(*_button_ports[i] & _button_pins[i]))
  20:button.c      **** 		{
  21:button.c      **** 			if(_buttons[i] < BUTTON_DEBOUNCE_TICKS)
  22:button.c      **** 			{
  23:button.c      **** 				++_buttons[i];
  24:button.c      **** 			}
  25:button.c      **** 			else if(_buttons[i] == BUTTON_DEBOUNCE_TICKS)
  26:button.c      **** 			{
  27:button.c      **** 				_buttons[i] = BUTTON_DEBOUNCE_TICKS + 1;
  81               		.loc 1 27 17 view .LVU7
  82 002c 09EC      		ldi r16,lo8(-55)
  83               	.LVL3:
  84               	.L5:
  19:button.c      **** 		{
  85               		.loc 1 19 3 is_stmt 1 view .LVU8
  19:button.c      **** 		{
  86               		.loc 1 19 22 is_stmt 0 view .LVU9
  87 002e D501      		movw r26,r10
  88 0030 ED91      		ld r30,X+
  89 0032 FD91      		ld r31,X+
  90 0034 5D01      		movw r10,r26
  19:button.c      **** 		{
  91               		.loc 1 19 8 view .LVU10
  92 0036 8081      		ld r24,Z
  19:button.c      **** 		{
  93               		.loc 1 19 40 view .LVU11
  94 0038 F601      		movw r30,r12
  95 003a 9191      		ld r25,Z+
  96 003c 6F01      		movw r12,r30
  19:button.c      **** 		{
  97               		.loc 1 19 6 view .LVU12
  98 003e 8923      		and r24,r25
  19:button.c      **** 		{
  99               		.loc 1 19 5 view .LVU13
 100 0040 01F4      		brne .L2
  21:button.c      **** 			{
 101               		.loc 1 21 4 is_stmt 1 view .LVU14
  21:button.c      **** 			{
 102               		.loc 1 21 15 is_stmt 0 view .LVU15
 103 0042 8881      		ld r24,Y
  21:button.c      **** 			{
 104               		.loc 1 21 6 view .LVU16
 105 0044 883C      		cpi r24,lo8(-56)
 106 0046 00F4      		brsh .L3
  23:button.c      **** 			}
 107               		.loc 1 23 5 is_stmt 1 view .LVU17
 108 0048 8F5F      		subi r24,lo8(-(1))
 109 004a 8883      		st Y,r24
 110               	.L4:
  17:button.c      **** 	{
 111               		.loc 1 17 20 discriminator 2 view .LVU18
 112 004c 1F5F      		subi r17,lo8(-(1))
 113               	.LVL4:
  17:button.c      **** 	{
 114               		.loc 1 17 13 discriminator 2 view .LVU19
  17:button.c      **** 	{
 115               		.loc 1 17 2 is_stmt 0 discriminator 2 view .LVU20
 116 004e 2196      		adiw r28,1
 117 0050 1730      		cpi r17,lo8(7)
 118 0052 01F4      		brne .L5
 119               	/* epilogue start */
  28:button.c      **** 				button_event(i);
  29:button.c      **** 			}
  30:button.c      **** 		}
  31:button.c      **** 		else
  32:button.c      **** 		{
  33:button.c      **** 			_buttons[i] = 0;
  34:button.c      **** 		}
  35:button.c      **** 	}
  36:button.c      **** }
 120               		.loc 1 36 1 view .LVU21
 121 0054 DF91      		pop r29
 122 0056 CF91      		pop r28
 123 0058 1F91      		pop r17
 124               	.LVL5:
 125               		.loc 1 36 1 view .LVU22
 126 005a 0F91      		pop r16
 127 005c FF90      		pop r15
 128 005e EF90      		pop r14
 129               	.LVL6:
 130               		.loc 1 36 1 view .LVU23
 131 0060 DF90      		pop r13
 132 0062 CF90      		pop r12
 133 0064 BF90      		pop r11
 134 0066 AF90      		pop r10
 135 0068 0895      		ret
 136               	.LVL7:
 137               	.L3:
  25:button.c      **** 			{
 138               		.loc 1 25 9 is_stmt 1 view .LVU24
  25:button.c      **** 			{
 139               		.loc 1 25 11 is_stmt 0 view .LVU25
 140 006a 883C      		cpi r24,lo8(-56)
 141 006c 01F4      		brne .L4
  27:button.c      **** 				button_event(i);
 142               		.loc 1 27 5 is_stmt 1 view .LVU26
  27:button.c      **** 				button_event(i);
 143               		.loc 1 27 17 is_stmt 0 view .LVU27
 144 006e 0883      		st Y,r16
  28:button.c      **** 				button_event(i);
 145               		.loc 1 28 5 is_stmt 1 view .LVU28
 146 0070 812F      		mov r24,r17
 147 0072 F701      		movw r30,r14
 148 0074 0995      		icall
 149               	.LVL8:
 150 0076 00C0      		rjmp .L4
 151               	.L2:
  33:button.c      **** 		}
 152               		.loc 1 33 4 view .LVU29
  33:button.c      **** 		}
 153               		.loc 1 33 16 is_stmt 0 view .LVU30
 154 0078 1882      		st Y,__zero_reg__
 155 007a 00C0      		rjmp .L4
 156               		.cfi_endproc
 157               	.LFE20:
 160               	ld_u32:
 161               	.LVL9:
 162               	.LFB21:
 163               		.file 2 "util.c"
   1:util.c        **** static uint32_t ld_u32(const uint8_t *p)
   2:util.c        **** {
 164               		.loc 2 2 1 is_stmt 1 view -0
 165               		.cfi_startproc
 166               		.loc 2 2 1 is_stmt 0 view .LVU32
 167 007c CF93      		push r28
 168               	.LCFI10:
 169               		.cfi_def_cfa_offset 3
 170               		.cfi_offset 28, -2
 171 007e DF93      		push r29
 172               	.LCFI11:
 173               		.cfi_def_cfa_offset 4
 174               		.cfi_offset 29, -3
 175 0080 00D0      		rcall .
 176 0082 00D0      		rcall .
 177               	.LCFI12:
 178               		.cfi_def_cfa_offset 8
 179 0084 CDB7      		in r28,__SP_L__
 180 0086 DEB7      		in r29,__SP_H__
 181               	.LCFI13:
 182               		.cfi_def_cfa_register 28
 183               	/* prologue: function */
 184               	/* frame size = 4 */
 185               	/* stack size = 6 */
 186               	.L__stack_usage = 6
   3:util.c        **** 	return ((uint32_t)p[0]) | (((uint32_t)p[1]) << 8) |
 187               		.loc 2 3 2 is_stmt 1 view .LVU33
   4:util.c        **** 		(((uint32_t)p[2]) << 16) | (((uint32_t)p[3]) << 24);
 188               		.loc 2 4 28 is_stmt 0 view .LVU34
 189 0088 FC01      		movw r30,r24
 190 008a 2081      		ld r18,Z
 191 008c 3181      		ldd r19,Z+1
 192 008e 4281      		ldd r20,Z+2
 193 0090 5381      		ldd r21,Z+3
   5:util.c        **** }
 194               		.loc 2 5 1 view .LVU35
 195 0092 CA01      		movw r24,r20
 196               	.LVL10:
 197               		.loc 2 5 1 view .LVU36
 198 0094 B901      		movw r22,r18
 199               	/* epilogue start */
 200 0096 0F90      		pop __tmp_reg__
 201 0098 0F90      		pop __tmp_reg__
 202 009a 0F90      		pop __tmp_reg__
 203 009c 0F90      		pop __tmp_reg__
 204 009e DF91      		pop r29
 205 00a0 CF91      		pop r28
 206 00a2 0895      		ret
 207               		.cfi_endproc
 208               	.LFE21:
 211               	mem_cmp:
 212               	.LVL11:
 213               	.LFB24:
   6:util.c        **** 
   7:util.c        **** static uint16_t ld_u16(const uint8_t *p)
   8:util.c        **** {
   9:util.c        **** 	return ((uint16_t)p[0]) | ((uint16_t)(p[1]) << 8);
  10:util.c        **** }
  11:util.c        **** 
  12:util.c        **** static void mem_set(uint8_t *dst, uint8_t val, uint16_t cnt)
  13:util.c        **** {
  14:util.c        **** 	while(cnt--)
  15:util.c        **** 	{
  16:util.c        **** 		*dst++ = val;
  17:util.c        **** 	}
  18:util.c        **** }
  19:util.c        **** 
  20:util.c        **** static uint8_t mem_cmp
  21:util.c        **** 	(const uint8_t *dst, const uint8_t *src, uint16_t cnt)
  22:util.c        **** {
 214               		.loc 2 22 1 is_stmt 1 view -0
 215               		.cfi_startproc
 216               	/* prologue: function */
 217               	/* frame size = 0 */
 218               	/* stack size = 0 */
 219               	.L__stack_usage = 0
 220               		.loc 2 22 1 is_stmt 0 view .LVU38
 221 00a4 9C01      		movw r18,r24
  23:util.c        **** 	uint8_t r = 0;
 222               		.loc 2 23 2 is_stmt 1 view .LVU39
 223               	.LVL12:
  24:util.c        **** 	while(cnt-- && (r = *dst++ == *src++)) ;
 224               		.loc 2 24 2 view .LVU40
 225 00a6 480F      		add r20,r24
 226 00a8 591F      		adc r21,r25
 227               	.LVL13:
  23:util.c        **** 	uint8_t r = 0;
 228               		.loc 2 23 10 is_stmt 0 view .LVU41
 229 00aa 80E0      		ldi r24,0
 230               	.LVL14:
 231               	.L10:
 232               		.loc 2 24 41 is_stmt 1 discriminator 2 view .LVU42
 233               		.loc 2 24 7 discriminator 2 view .LVU43
 234               		.loc 2 24 7 is_stmt 0 discriminator 2 view .LVU44
 235 00ac 2417      		cp r18,r20
 236 00ae 3507      		cpc r19,r21
 237 00b0 01F0      		breq .L8
 238               	.LVL15:
 239               		.loc 2 24 36 discriminator 1 view .LVU45
 240 00b2 FB01      		movw r30,r22
 241               	.LVL16:
 242               		.loc 2 24 20 discriminator 1 view .LVU46
 243 00b4 81E0      		ldi r24,lo8(1)
 244               		.loc 2 24 14 discriminator 1 view .LVU47
 245 00b6 D901      		movw r26,r18
 246 00b8 6D91      		ld r22,X+
 247               	.LVL17:
 248               		.loc 2 24 14 discriminator 1 view .LVU48
 249 00ba 9D01      		movw r18,r26
 250               	.LVL18:
 251               		.loc 2 24 14 discriminator 1 view .LVU49
 252 00bc 9191      		ld r25,Z+
 253               	.LVL19:
 254               		.loc 2 24 14 discriminator 1 view .LVU50
 255 00be 6917      		cp r22,r25
 256 00c0 01F0      		breq .L11
 257               		.loc 2 24 20 view .LVU51
 258 00c2 80E0      		ldi r24,0
 259               	.LVL20:
  25:util.c        **** 	return r;
 260               		.loc 2 25 2 is_stmt 1 view .LVU52
 261               	.L8:
 262               	/* epilogue start */
  26:util.c        **** }
 263               		.loc 2 26 1 is_stmt 0 view .LVU53
 264 00c4 0895      		ret
 265               	.LVL21:
 266               	.L11:
  24:util.c        **** 	while(cnt-- && (r = *dst++ == *src++)) ;
 267               		.loc 2 24 36 view .LVU54
 268 00c6 BF01      		movw r22,r30
 269               	.LVL22:
  24:util.c        **** 	while(cnt-- && (r = *dst++ == *src++)) ;
 270               		.loc 2 24 36 view .LVU55
 271 00c8 00C0      		rjmp .L10
 272               		.cfi_endproc
 273               	.LFE24:
 276               	_spi_xchg:
 277               	.LVL23:
 278               	.LFB26:
 279               		.file 3 "sd.c"
   1:sd.c          **** #if \
   2:sd.c          **** 	defined(__AVR_ATmega8__) || \
   3:sd.c          **** 	defined(__AVR_ATmega48__) || \
   4:sd.c          **** 	defined(__AVR_ATmega48P__) || \
   5:sd.c          **** 	defined(__AVR_ATmega88__) || \
   6:sd.c          **** 	defined(__AVR_ATmega88P__) || \
   7:sd.c          **** 	defined(__AVR_ATmega168__) || \
   8:sd.c          **** 	defined(__AVR_ATmega168P__) || \
   9:sd.c          **** 	defined(__AVR_ATmega328P__)
  10:sd.c          **** 
  11:sd.c          **** #define SPI_DIR                DDRB
  12:sd.c          **** #define SPI_OUT                PORTB
  13:sd.c          **** #define MOSI                   (1 << 3)
  14:sd.c          **** #define SCK                    (1 << 5)
  15:sd.c          **** #define CS                     (1 << 2)
  16:sd.c          **** #define MISO                   (1 << 4)
  17:sd.c          **** 
  18:sd.c          **** #elif \
  19:sd.c          **** 	defined(__AVR_ATmega16__) || \
  20:sd.c          **** 	defined(__AVR_ATmega32__)
  21:sd.c          **** 
  22:sd.c          **** #define SPI_DIR                DDRB
  23:sd.c          **** #define SPI_OUT                PORTB
  24:sd.c          **** #define MOSI                   (1 << 5)
  25:sd.c          **** #define SCK                    (1 << 7)
  26:sd.c          **** #define CS                     (1 << 4)
  27:sd.c          **** #define MISO                   (1 << 6)
  28:sd.c          **** 
  29:sd.c          **** #elif \
  30:sd.c          **** 	defined(__AVR_ATmega64__) || \
  31:sd.c          **** 	defined(__AVR_ATmega128__) || \
  32:sd.c          **** 	defined(__AVR_ATmega169__)
  33:sd.c          **** 
  34:sd.c          **** #define SPI_DIR                DDRB
  35:sd.c          **** #define SPI_OUT                PORTB
  36:sd.c          **** #define MOSI                   (1 << 2)
  37:sd.c          **** #define SCK                    (1 << 1)
  38:sd.c          **** #define CS                     (1 << 0)
  39:sd.c          **** #define MISO                   (1 << 3)
  40:sd.c          **** 
  41:sd.c          **** #else
  42:sd.c          **** #error "Target AVR not supported: No pin mappings available."
  43:sd.c          **** #endif
  44:sd.c          **** 
  45:sd.c          **** #define CONF_SPI() { SPI_DIR |= MOSI | SCK | CS; SPI_DIR &= ~MISO; }
  46:sd.c          **** #define SELECT()               SPI_OUT &= ~CS
  47:sd.c          **** #define DESELECT()             SPI_OUT |= CS
  48:sd.c          **** 
  49:sd.c          **** #define CMD_GO_IDLE_STATE      0x00
  50:sd.c          **** #define CMD_SEND_OP_COND       0x01
  51:sd.c          **** #define CMD_SEND_IF_COND       0x08
  52:sd.c          **** #define CMD_SEND_CSD           0x09
  53:sd.c          **** #define CMD_SEND_CID           0x0A
  54:sd.c          **** #define CMD_SET_BLOCKLEN       0x10
  55:sd.c          **** #define CMD_READ_SINGLE_BLOCK  0x11
  56:sd.c          **** #define CMD_WRITE_SINGLE_BLOCK 0x18
  57:sd.c          **** #define CMD_SD_SEND_OP_COND    0x29
  58:sd.c          **** #define CMD_APP                0x37
  59:sd.c          **** #define CMD_READ_OCR           0x3A
  60:sd.c          **** 
  61:sd.c          **** #define IDLE_STATE             (1 << 0)
  62:sd.c          **** #define ILLEGAL_CMD            (1 << 2)
  63:sd.c          **** 
  64:sd.c          **** #define SD_1                   (1 << 0)
  65:sd.c          **** #define SD_2                   (1 << 1)
  66:sd.c          **** #define SD_HC                  (1 << 2)
  67:sd.c          **** 
  68:sd.c          **** static uint8_t _card_type;
  69:sd.c          **** 
  70:sd.c          **** static uint8_t _spi_xchg(uint8_t b)
  71:sd.c          **** {
 280               		.loc 3 71 1 is_stmt 1 view -0
 281               		.cfi_startproc
 282               	/* prologue: function */
 283               	/* frame size = 0 */
 284               	/* stack size = 0 */
 285               	.L__stack_usage = 0
  72:sd.c          **** 	SPDR = b;
 286               		.loc 3 72 2 view .LVU57
 287               		.loc 3 72 7 is_stmt 0 view .LVU58
 288 00ca 8EBD      		out 0x2e,r24
  73:sd.c          **** 	while(!(SPSR & (1 << SPIF))) ;
 289               		.loc 3 73 2 is_stmt 1 view .LVU59
 290               	.L13:
 291               		.loc 3 73 31 discriminator 1 view .LVU60
 292               		.loc 3 73 7 discriminator 1 view .LVU61
 293 00cc 0DB4      		in __tmp_reg__,0x2d
 294 00ce 07FE      		sbrs __tmp_reg__,7
 295 00d0 00C0      		rjmp .L13
  74:sd.c          **** 	SPSR &= ~(1 << SPIF);
 296               		.loc 3 74 2 view .LVU62
 297               		.loc 3 74 7 is_stmt 0 view .LVU63
 298 00d2 8DB5      		in r24,0x2d
 299               	.LVL24:
 300               		.loc 3 74 7 view .LVU64
 301 00d4 8F77      		andi r24,lo8(127)
 302 00d6 8DBD      		out 0x2d,r24
 303               	.LVL25:
  75:sd.c          **** 	return SPDR;
 304               		.loc 3 75 2 is_stmt 1 view .LVU65
 305               		.loc 3 75 9 is_stmt 0 view .LVU66
 306 00d8 8EB5      		in r24,0x2e
 307               	/* epilogue start */
  76:sd.c          **** }
 308               		.loc 3 76 1 view .LVU67
 309 00da 0895      		ret
 310               		.cfi_endproc
 311               	.LFE26:
 314               	_command:
 315               	.LVL26:
 316               	.LFB27:
  77:sd.c          **** 
  78:sd.c          **** static uint8_t _command(uint8_t cmd, uint32_t arg)
  79:sd.c          **** {
 317               		.loc 3 79 1 is_stmt 1 view -0
 318               		.cfi_startproc
 319               		.loc 3 79 1 is_stmt 0 view .LVU69
 320 00dc FF92      		push r15
 321               	.LCFI14:
 322               		.cfi_def_cfa_offset 3
 323               		.cfi_offset 15, -2
 324 00de 0F93      		push r16
 325               	.LCFI15:
 326               		.cfi_def_cfa_offset 4
 327               		.cfi_offset 16, -3
 328 00e0 1F93      		push r17
 329               	.LCFI16:
 330               		.cfi_def_cfa_offset 5
 331               		.cfi_offset 17, -4
 332 00e2 CF93      		push r28
 333               	.LCFI17:
 334               		.cfi_def_cfa_offset 6
 335               		.cfi_offset 28, -5
 336 00e4 DF93      		push r29
 337               	.LCFI18:
 338               		.cfi_def_cfa_offset 7
 339               		.cfi_offset 29, -6
 340               	/* prologue: function */
 341               	/* frame size = 0 */
 342               	/* stack size = 5 */
 343               	.L__stack_usage = 5
 344 00e6 C82F      		mov r28,r24
 345 00e8 D42F      		mov r29,r20
 346 00ea 152F      		mov r17,r21
 347 00ec 062F      		mov r16,r22
 348 00ee F72E      		mov r15,r23
  80:sd.c          **** 	uint8_t i, response;
 349               		.loc 3 80 2 is_stmt 1 view .LVU70
  81:sd.c          **** 	_spi_xchg(0xFF);
 350               		.loc 3 81 2 view .LVU71
 351 00f0 8FEF      		ldi r24,lo8(-1)
 352               	.LVL27:
 353               		.loc 3 81 2 is_stmt 0 view .LVU72
 354 00f2 0E94 0000 		call _spi_xchg
 355               	.LVL28:
  82:sd.c          **** 	_spi_xchg(0x40 | cmd);
 356               		.loc 3 82 2 is_stmt 1 view .LVU73
 357 00f6 8C2F      		mov r24,r28
 358 00f8 8064      		ori r24,lo8(64)
 359 00fa 0E94 0000 		call _spi_xchg
 360               	.LVL29:
  83:sd.c          **** 	_spi_xchg((arg >> 24) & 0xFF);
 361               		.loc 3 83 2 view .LVU74
 362 00fe 8F2D      		mov r24,r15
 363 0100 0E94 0000 		call _spi_xchg
 364               	.LVL30:
  84:sd.c          **** 	_spi_xchg((arg >> 16) & 0xFF);
 365               		.loc 3 84 2 view .LVU75
 366 0104 802F      		mov r24,r16
 367 0106 0E94 0000 		call _spi_xchg
 368               	.LVL31:
  85:sd.c          **** 	_spi_xchg((arg >> 8) & 0xFF);
 369               		.loc 3 85 2 view .LVU76
 370 010a 812F      		mov r24,r17
 371 010c 0E94 0000 		call _spi_xchg
 372               	.LVL32:
  86:sd.c          **** 	_spi_xchg((arg >> 0) & 0xFF);
 373               		.loc 3 86 2 view .LVU77
 374 0110 8D2F      		mov r24,r29
 375 0112 0E94 0000 		call _spi_xchg
 376               	.LVL33:
  87:sd.c          **** 	switch(cmd)
 377               		.loc 3 87 2 view .LVU78
  88:sd.c          **** 	{
  89:sd.c          **** 	case CMD_GO_IDLE_STATE:
  90:sd.c          **** 		_spi_xchg(0x95);
 378               		.loc 3 90 3 is_stmt 0 view .LVU79
 379 0116 85E9      		ldi r24,lo8(-107)
  87:sd.c          **** 	switch(cmd)
 380               		.loc 3 87 2 view .LVU80
 381 0118 CC23      		tst r28
 382 011a 01F0      		breq .L25
  91:sd.c          **** 		break;
  92:sd.c          **** 
  93:sd.c          **** 	case CMD_SEND_IF_COND:
  94:sd.c          **** 		_spi_xchg(0x87);
 383               		.loc 3 94 3 view .LVU81
 384 011c 87E8      		ldi r24,lo8(-121)
  87:sd.c          **** 	{
 385               		.loc 3 87 2 view .LVU82
 386 011e C830      		cpi r28,lo8(8)
 387 0120 01F0      		breq .L25
  95:sd.c          **** 		break;
  96:sd.c          **** 
  97:sd.c          **** 	default:
  98:sd.c          **** 		_spi_xchg(0xFF);
 388               		.loc 3 98 3 is_stmt 1 view .LVU83
 389 0122 8FEF      		ldi r24,lo8(-1)
 390               	.L25:
  94:sd.c          **** 		break;
 391               		.loc 3 94 3 is_stmt 0 view .LVU84
 392 0124 0E94 0000 		call _spi_xchg
 393               	.LVL34:
  95:sd.c          **** 		break;
 394               		.loc 3 95 3 is_stmt 1 view .LVU85
  79:sd.c          **** 	uint8_t i, response;
 395               		.loc 3 79 1 is_stmt 0 view .LVU86
 396 0128 CAE0      		ldi r28,lo8(10)
 397               	.LVL35:
 398               	.L20:
  99:sd.c          **** 		break;
 100:sd.c          **** 	}
 101:sd.c          **** 
 102:sd.c          **** 	for(i = 0; i < 10 && ((response = _spi_xchg(0xFF)) == 0xFF); ++i) ;
 399               		.loc 3 102 36 discriminator 3 view .LVU87
 400 012a 8FEF      		ldi r24,lo8(-1)
 401 012c 0E94 0000 		call _spi_xchg
 402               	.LVL36:
 403               		.loc 3 102 20 discriminator 3 view .LVU88
 404 0130 8F3F      		cpi r24,lo8(-1)
 405 0132 01F4      		brne .L15
 406               		.loc 3 102 68 is_stmt 1 discriminator 4 view .LVU89
 407               		.loc 3 102 63 discriminator 4 view .LVU90
 408               	.LVL37:
 409               		.loc 3 102 13 discriminator 4 view .LVU91
 410               		.loc 3 102 2 is_stmt 0 discriminator 4 view .LVU92
 411 0134 C150      		subi r28,lo8(-(-1))
 412               	.LVL38:
 413               		.loc 3 102 2 discriminator 4 view .LVU93
 414 0136 01F4      		brne .L20
 415               	.LVL39:
 416               	.L15:
 417               	/* epilogue start */
 103:sd.c          **** 	return response;
 104:sd.c          **** }
 418               		.loc 3 104 1 view .LVU94
 419 0138 DF91      		pop r29
 420 013a CF91      		pop r28
 421 013c 1F91      		pop r17
 422 013e 0F91      		pop r16
 423 0140 FF90      		pop r15
 424 0142 0895      		ret
 425               		.cfi_endproc
 426               	.LFE27:
 429               	clust2sect:
 430               	.LVL40:
 431               	.LFB31:
 432               		.file 4 "fat.c"
   1:fat.c         **** typedef struct
   2:fat.c         **** {
   3:fat.c         **** 	uint16_t index;
   4:fat.c         **** 	uint8_t *fn;
   5:fat.c         **** 	uint32_t sclust, clust, sect;
   6:fat.c         **** } dir_t;
   7:fat.c         **** 
   8:fat.c         **** typedef struct
   9:fat.c         **** {
  10:fat.c         **** 	uint32_t size;
  11:fat.c         **** 	uint8_t type;
  12:fat.c         **** 	char name[13];
  13:fat.c         **** } direntry_t;
  14:fat.c         **** 
  15:fat.c         **** static uint32_t fat_fsize, fat_ftell;
  16:fat.c         **** #define fat_fsize() fat_fsize
  17:fat.c         **** #define fat_ftell() fat_ftell
  18:fat.c         **** 
  19:fat.c         **** static uint8_t fat_mount(void);
  20:fat.c         **** static uint8_t fat_fopen(const char *path);
  21:fat.c         **** static uint8_t fat_fread(void *buf, uint16_t btr, uint16_t *br);
  22:fat.c         **** static uint8_t fat_fseek(uint32_t offset);
  23:fat.c         **** static uint8_t fat_opendir(dir_t *dj, const char *path);
  24:fat.c         **** static uint8_t fat_readdir(dir_t *dj, direntry_t *fno);
  25:fat.c         **** 
  26:fat.c         **** #define BPB_SECTORS_PER_CLUSTER   13
  27:fat.c         **** #define BPB_RESERVED_SECTOR_COUNT 14
  28:fat.c         **** #define PBP_NUM_FATS              16
  29:fat.c         **** #define PBP_ROOT_ENTRY_COUNT      17
  30:fat.c         **** #define BPB_FAT_SIZE_16           22
  31:fat.c         **** #define BPB_FAT_SIZE_32           36
  32:fat.c         **** #define BPB_TOTAL_SECTORS_16      19
  33:fat.c         **** #define BPB_TOTAL_SECTORS_32      32
  34:fat.c         **** #define BPB_ROOT_CLUSTER          44
  35:fat.c         **** #define BS_FILESYSTEM_TYPE        54
  36:fat.c         **** #define BS_FILESYSTEM_TYPE_32     82
  37:fat.c         **** #define MBR_TABLE                446
  38:fat.c         **** #define DIR_NAME                   0
  39:fat.c         **** #define DIR_ATTR                  11
  40:fat.c         **** #define DIR_CLUSTER_HI            20
  41:fat.c         **** #define DIR_CLUSTER_LO            26
  42:fat.c         **** #define DIR_FILESIZE              28
  43:fat.c         **** #define AM_VOL                      0x08
  44:fat.c         **** #define AM_DIR                      0x10
  45:fat.c         **** #define AM_MASK                     0x3F
  46:fat.c         **** 
  47:fat.c         **** struct
  48:fat.c         **** {
  49:fat.c         **** 	uint8_t csize;
  50:fat.c         **** 	uint16_t n_rootdir;
  51:fat.c         **** 	uint32_t n_fatent, fatbase, dirbase,
  52:fat.c         **** 			database, org_clust, curr_clust, dsect;
  53:fat.c         **** } static _fs;
  54:fat.c         **** 
  55:fat.c         **** static uint32_t get_fat(uint32_t cluster)
  56:fat.c         **** {
  57:fat.c         **** 	uint8_t buf[4];
  58:fat.c         **** 	if(cluster < 2 || cluster >= _fs.n_fatent)
  59:fat.c         **** 	{
  60:fat.c         **** 		return 1;
  61:fat.c         **** 	}
  62:fat.c         **** 
  63:fat.c         **** 	if(sd_read(buf, _fs.fatbase + cluster / 128,
  64:fat.c         **** 		((uint16_t)cluster % 128) * 4, 4))
  65:fat.c         **** 	{
  66:fat.c         **** 		return 1;
  67:fat.c         **** 	}
  68:fat.c         **** 
  69:fat.c         **** 	return ld_u32(buf) & 0x0FFFFFFF;
  70:fat.c         **** }
  71:fat.c         **** 
  72:fat.c         **** static uint32_t clust2sect(uint32_t cluster)
  73:fat.c         **** {
 433               		.loc 4 73 1 is_stmt 1 view -0
 434               		.cfi_startproc
 435               		.loc 4 73 1 is_stmt 0 view .LVU96
 436 0144 CF93      		push r28
 437               	.LCFI19:
 438               		.cfi_def_cfa_offset 3
 439               		.cfi_offset 28, -2
 440 0146 DF93      		push r29
 441               	.LCFI20:
 442               		.cfi_def_cfa_offset 4
 443               		.cfi_offset 29, -3
 444 0148 00D0      		rcall .
 445 014a 00D0      		rcall .
 446               	.LCFI21:
 447               		.cfi_def_cfa_offset 8
 448 014c CDB7      		in r28,__SP_L__
 449 014e DEB7      		in r29,__SP_H__
 450               	.LCFI22:
 451               		.cfi_def_cfa_register 28
 452               	/* prologue: function */
 453               	/* frame size = 4 */
 454               	/* stack size = 6 */
 455               	.L__stack_usage = 6
  74:fat.c         **** 	cluster -= 2;
 456               		.loc 4 74 2 is_stmt 1 view .LVU97
 457               		.loc 4 74 10 is_stmt 0 view .LVU98
 458 0150 9B01      		movw r18,r22
 459 0152 AC01      		movw r20,r24
 460 0154 2250      		subi r18,2
 461 0156 3109      		sbc r19,__zero_reg__
 462 0158 4109      		sbc r20,__zero_reg__
 463 015a 5109      		sbc r21,__zero_reg__
 464               	.LVL41:
  75:fat.c         **** 	if(cluster >= (_fs.n_fatent - 2))
 465               		.loc 4 75 2 is_stmt 1 view .LVU99
 466               		.loc 4 75 30 is_stmt 0 view .LVU100
 467 015c 8091 0000 		lds r24,_fs+3
 468 0160 9091 0000 		lds r25,_fs+3+1
 469 0164 A091 0000 		lds r26,_fs+3+2
 470 0168 B091 0000 		lds r27,_fs+3+3
 471 016c 0297      		sbiw r24,2
 472 016e A109      		sbc r26,__zero_reg__
 473 0170 B109      		sbc r27,__zero_reg__
 474               		.loc 4 75 4 view .LVU101
 475 0172 2817      		cp r18,r24
 476 0174 3907      		cpc r19,r25
 477 0176 4A07      		cpc r20,r26
 478 0178 5B07      		cpc r21,r27
 479 017a 00F4      		brsh .L28
  76:fat.c         **** 	{
  77:fat.c         **** 		return 0;
  78:fat.c         **** 	}
  79:fat.c         **** 
  80:fat.c         **** 	return cluster * _fs.csize + _fs.database;
 480               		.loc 4 80 2 is_stmt 1 view .LVU102
 481               		.loc 4 80 22 is_stmt 0 view .LVU103
 482 017c A091 0000 		lds r26,_fs
 483               		.loc 4 80 17 view .LVU104
 484 0180 B0E0      		ldi r27,0
 485 0182 0E94 0000 		call __muluhisi3
 486 0186 6983      		std Y+1,r22
 487 0188 7A83      		std Y+2,r23
 488 018a 8B83      		std Y+3,r24
 489 018c 9C83      		std Y+4,r25
 490               		.loc 4 80 29 view .LVU105
 491 018e 8091 0000 		lds r24,_fs+15
 492 0192 9091 0000 		lds r25,_fs+15+1
 493 0196 A091 0000 		lds r26,_fs+15+2
 494 019a B091 0000 		lds r27,_fs+15+3
 495 019e 2981      		ldd r18,Y+1
 496 01a0 3A81      		ldd r19,Y+2
 497 01a2 4B81      		ldd r20,Y+3
 498 01a4 5C81      		ldd r21,Y+4
 499               	.LVL42:
 500               		.loc 4 80 29 view .LVU106
 501 01a6 280F      		add r18,r24
 502 01a8 391F      		adc r19,r25
 503 01aa 4A1F      		adc r20,r26
 504 01ac 5B1F      		adc r21,r27
 505 01ae 2983      		std Y+1,r18
 506 01b0 3A83      		std Y+2,r19
 507 01b2 4B83      		std Y+3,r20
 508 01b4 5C83      		std Y+4,r21
 509               	.L26:
  81:fat.c         **** }
 510               		.loc 4 81 1 view .LVU107
 511 01b6 6981      		ldd r22,Y+1
 512 01b8 7A81      		ldd r23,Y+2
 513 01ba 8B81      		ldd r24,Y+3
 514 01bc 9C81      		ldd r25,Y+4
 515               	/* epilogue start */
 516 01be 0F90      		pop __tmp_reg__
 517 01c0 0F90      		pop __tmp_reg__
 518 01c2 0F90      		pop __tmp_reg__
 519 01c4 0F90      		pop __tmp_reg__
 520 01c6 DF91      		pop r29
 521 01c8 CF91      		pop r28
 522 01ca 0895      		ret
 523               	.LVL43:
 524               	.L28:
  77:fat.c         **** 	}
 525               		.loc 4 77 10 view .LVU108
 526 01cc 1982      		std Y+1,__zero_reg__
 527 01ce 1A82      		std Y+2,__zero_reg__
 528 01d0 1B82      		std Y+3,__zero_reg__
 529 01d2 1C82      		std Y+4,__zero_reg__
 530 01d4 00C0      		rjmp .L26
 531               		.cfi_endproc
 532               	.LFE31:
 535               	dir_rewind:
 536               	.LVL44:
 537               	.LFB34:
  82:fat.c         **** 
  83:fat.c         **** static uint32_t get_cluster(uint8_t *dir)
  84:fat.c         **** {
  85:fat.c         **** 	uint32_t cluster;
  86:fat.c         **** 	cluster = ld_u16(dir + DIR_CLUSTER_HI);
  87:fat.c         **** 	cluster <<= 16;
  88:fat.c         **** 	cluster |= ld_u16(dir + DIR_CLUSTER_LO);
  89:fat.c         **** 	return cluster;
  90:fat.c         **** }
  91:fat.c         **** 
  92:fat.c         **** static uint8_t create_name(dir_t *dj, const char **path)
  93:fat.c         **** {
  94:fat.c         **** 	uint8_t c, ni, si, i, *sfn;
  95:fat.c         **** 	const char *p;
  96:fat.c         **** 	sfn = dj->fn;
  97:fat.c         **** 	mem_set(sfn, ' ', 11);
  98:fat.c         **** 	si = 0;
  99:fat.c         **** 	i = 0;
 100:fat.c         **** 	ni = 8;
 101:fat.c         **** 	p = *path;
 102:fat.c         **** 	for(;;)
 103:fat.c         **** 	{
 104:fat.c         **** 		c = p[si++];
 105:fat.c         **** 		if(c <= ' ' || c == '/')
 106:fat.c         **** 		{
 107:fat.c         **** 			break;
 108:fat.c         **** 		}
 109:fat.c         **** 
 110:fat.c         **** 		if(c == '.' || i >= ni)
 111:fat.c         **** 		{
 112:fat.c         **** 			if(ni != 8 || c != '.')
 113:fat.c         **** 			{
 114:fat.c         **** 				break;
 115:fat.c         **** 			}
 116:fat.c         **** 
 117:fat.c         **** 			i = 8;
 118:fat.c         **** 			ni = 11;
 119:fat.c         **** 			continue;
 120:fat.c         **** 		}
 121:fat.c         **** 
 122:fat.c         **** 		/* Convert character to uppercase */
 123:fat.c         **** 		if(c >= 'a' && c <= 'z')
 124:fat.c         **** 		{
 125:fat.c         **** 			c -= 'a' - 'A';
 126:fat.c         **** 		}
 127:fat.c         **** 
 128:fat.c         **** 		sfn[i++] = c;
 129:fat.c         **** 	}
 130:fat.c         **** 
 131:fat.c         **** 	*path = &p[si];
 132:fat.c         **** 	sfn[11] = (c <= ' ');
 133:fat.c         **** 	return 0;
 134:fat.c         **** }
 135:fat.c         **** 
 136:fat.c         **** static uint8_t dir_rewind(dir_t *dj)
 137:fat.c         **** {
 538               		.loc 4 137 1 is_stmt 1 view -0
 539               		.cfi_startproc
 540               		.loc 4 137 1 is_stmt 0 view .LVU110
 541 01d6 0F93      		push r16
 542               	.LCFI23:
 543               		.cfi_def_cfa_offset 3
 544               		.cfi_offset 16, -2
 545 01d8 1F93      		push r17
 546               	.LCFI24:
 547               		.cfi_def_cfa_offset 4
 548               		.cfi_offset 17, -3
 549 01da CF93      		push r28
 550               	.LCFI25:
 551               		.cfi_def_cfa_offset 5
 552               		.cfi_offset 28, -4
 553 01dc DF93      		push r29
 554               	.LCFI26:
 555               		.cfi_def_cfa_offset 6
 556               		.cfi_offset 29, -5
 557               	/* prologue: function */
 558               	/* frame size = 0 */
 559               	/* stack size = 4 */
 560               	.L__stack_usage = 4
 561 01de EC01      		movw r28,r24
 138:fat.c         **** 	uint32_t cluster;
 562               		.loc 4 138 2 is_stmt 1 view .LVU111
 139:fat.c         **** 	dj->index = 0;
 563               		.loc 4 139 2 view .LVU112
 564               		.loc 4 139 12 is_stmt 0 view .LVU113
 565 01e0 1982      		std Y+1,__zero_reg__
 566 01e2 1882      		st Y,__zero_reg__
 140:fat.c         **** 	cluster = dj->sclust;
 567               		.loc 4 140 2 is_stmt 1 view .LVU114
 568               		.loc 4 140 10 is_stmt 0 view .LVU115
 569 01e4 6C81      		ldd r22,Y+4
 570 01e6 7D81      		ldd r23,Y+5
 571 01e8 8E81      		ldd r24,Y+6
 572 01ea 9F81      		ldd r25,Y+7
 573               	.LVL45:
 141:fat.c         **** 	if(cluster == 1 || cluster >= _fs.n_fatent)
 574               		.loc 4 141 2 is_stmt 1 view .LVU116
 575               		.loc 4 141 4 is_stmt 0 view .LVU117
 576 01ec 6130      		cpi r22,1
 577 01ee 7105      		cpc r23,__zero_reg__
 578 01f0 8105      		cpc r24,__zero_reg__
 579 01f2 9105      		cpc r25,__zero_reg__
 580 01f4 01F0      		breq .L33
 581               		.loc 4 141 18 discriminator 1 view .LVU118
 582 01f6 0091 0000 		lds r16,_fs+3
 583 01fa 1091 0000 		lds r17,_fs+3+1
 584 01fe 2091 0000 		lds r18,_fs+3+2
 585 0202 3091 0000 		lds r19,_fs+3+3
 586 0206 6017      		cp r22,r16
 587 0208 7107      		cpc r23,r17
 588 020a 8207      		cpc r24,r18
 589 020c 9307      		cpc r25,r19
 590 020e 00F4      		brsh .L33
 142:fat.c         **** 	{
 143:fat.c         **** 		return 1;
 144:fat.c         **** 	}
 145:fat.c         **** 
 146:fat.c         **** 	if(!cluster)
 591               		.loc 4 146 2 is_stmt 1 view .LVU119
 592               		.loc 4 146 4 is_stmt 0 view .LVU120
 593 0210 6115      		cp r22,__zero_reg__
 594 0212 7105      		cpc r23,__zero_reg__
 595 0214 8105      		cpc r24,__zero_reg__
 596 0216 9105      		cpc r25,__zero_reg__
 597 0218 01F4      		brne .L31
 147:fat.c         **** 	{
 148:fat.c         **** 		cluster = (uint32_t)_fs.dirbase;
 598               		.loc 4 148 3 is_stmt 1 view .LVU121
 599               		.loc 4 148 11 is_stmt 0 view .LVU122
 600 021a 6091 0000 		lds r22,_fs+11
 601 021e 7091 0000 		lds r23,_fs+11+1
 602 0222 8091 0000 		lds r24,_fs+11+2
 603 0226 9091 0000 		lds r25,_fs+11+3
 604               	.LVL46:
 605               	.L31:
 149:fat.c         **** 	}
 150:fat.c         **** 
 151:fat.c         **** 	dj->clust = cluster;
 606               		.loc 4 151 2 is_stmt 1 view .LVU123
 607               		.loc 4 151 12 is_stmt 0 view .LVU124
 608 022a 6887      		std Y+8,r22
 609 022c 7987      		std Y+9,r23
 610 022e 8A87      		std Y+10,r24
 611 0230 9B87      		std Y+11,r25
 152:fat.c         **** 	dj->sect = clust2sect(cluster);
 612               		.loc 4 152 2 is_stmt 1 view .LVU125
 613               		.loc 4 152 13 is_stmt 0 view .LVU126
 614 0232 0E94 0000 		call clust2sect
 615               	.LVL47:
 616               		.loc 4 152 13 view .LVU127
 617 0236 6C87      		std Y+12,r22
 618 0238 7D87      		std Y+13,r23
 619 023a 8E87      		std Y+14,r24
 620 023c 9F87      		std Y+15,r25
 153:fat.c         **** 	return 0;
 621               		.loc 4 153 2 is_stmt 1 view .LVU128
 622               		.loc 4 153 9 is_stmt 0 view .LVU129
 623 023e 80E0      		ldi r24,0
 624               	.L29:
 625               	/* epilogue start */
 154:fat.c         **** }
 626               		.loc 4 154 1 view .LVU130
 627 0240 DF91      		pop r29
 628 0242 CF91      		pop r28
 629               	.LVL48:
 630               		.loc 4 154 1 view .LVU131
 631 0244 1F91      		pop r17
 632 0246 0F91      		pop r16
 633 0248 0895      		ret
 634               	.LVL49:
 635               	.L33:
 143:fat.c         **** 	}
 636               		.loc 4 143 10 view .LVU132
 637 024a 81E0      		ldi r24,lo8(1)
 638               	.LVL50:
 143:fat.c         **** 	}
 639               		.loc 4 143 10 view .LVU133
 640 024c 00C0      		rjmp .L29
 641               		.cfi_endproc
 642               	.LFE34:
 645               	player_audio_start:
 646               	.LFB51:
 647               		.file 5 "player.c"
   1:player.c      **** #include <stdio.h>
   2:player.c      **** 
   3:player.c      **** /* [ DEFINES ] */
   4:player.c      **** 
   5:player.c      **** /* Headphone stereo channels */
   6:player.c      **** #define PLAYER_PIN_CHANNEL_RIGHT     5
   7:player.c      **** #define PLAYER_PIN_CHANNEL_LEFT      6
   8:player.c      **** 
   9:player.c      **** /* Number of skip intervals */
  10:player.c      **** #define PLAYER_NUM_INTERVALS         6
  11:player.c      **** 
  12:player.c      **** #define PLAYER_BUFFER_SIZE         512
  13:player.c      **** 
  14:player.c      **** /* [ VARIABLES ] */
  15:player.c      **** 
  16:player.c      **** /* Sample Rate - Prescaler Mapping */
  17:player.c      **** struct
  18:player.c      **** {
  19:player.c      **** 	uint32_t sample_rate;
  20:player.c      **** 	uint8_t compare_value;
  21:player.c      **** }
  22:player.c      **** /* OCR values for Timer2 for different sample rates */
  23:player.c      **** static player_sample_rates[] =
  24:player.c      **** {
  25:player.c      **** 	{  8000, 250 },
  26:player.c      **** 	{ 11025, 181 },
  27:player.c      **** 	{ 16000, 125 },
  28:player.c      **** 	{ 22050,  91 },
  29:player.c      **** 	{ 24000,  83 },
  30:player.c      **** 	{ 32000,  63 },
  31:player.c      **** 	{ 44100,  45 },
  32:player.c      **** 	{ 48000,  42 }
  33:player.c      **** };
  34:player.c      **** 
  35:player.c      **** /* WAV Info */
  36:player.c      **** struct
  37:player.c      **** {
  38:player.c      **** 	uint8_t num_channels, compare_value, lh, lm, ls, ph, pm, ps;
  39:player.c      **** 	uint16_t offset;
  40:player.c      **** 	uint32_t data_len, sample_rate;
  41:player.c      **** }
  42:player.c      **** static volatile player_wi;
  43:player.c      **** 
  44:player.c      **** struct
  45:player.c      **** {
  46:player.c      **** 	uint8_t Exit : 1;
  47:player.c      **** 	uint8_t Paused : 1;
  48:player.c      **** 	uint8_t Rewind : 1;
  49:player.c      **** 	uint8_t SkipFwd : 1;
  50:player.c      **** 	uint8_t SkipBwd : 1;
  51:player.c      **** }
  52:player.c      **** static player_flags;
  53:player.c      **** 
  54:player.c      **** static uint8_t player_skip_idx;
  55:player.c      **** 
  56:player.c      **** /* Double Buffering */
  57:player.c      **** static uint8_t player_buf[2 * PLAYER_BUFFER_SIZE];
  58:player.c      **** static uint16_t player_buf_idx = 0;
  59:player.c      **** 
  60:player.c      **** /* Set when the buffers are swapped */
  61:player.c      **** static volatile uint8_t player_swap_flag;
  62:player.c      **** static volatile uint16_t player_read_offset, player_write_offset;
  63:player.c      **** 
  64:player.c      **** static const char player_skip_interval_str[] PROGMEM = "05s" "10s" "30s" "05m" "10m" "30m";
  65:player.c      **** static uint16_t player_skip_amount[6] = { 5, 10, 30, 300, 600, 1800 };
  66:player.c      **** 
  67:player.c      **** /* [ FUNCTIONS ] */
  68:player.c      **** static void player_audio_init(void);
  69:player.c      **** static uint8_t player_wav_info(void);
  70:player.c      **** static void player_audio_start(void);
  71:player.c      **** static void player_audio_stop(void);
  72:player.c      **** static void player_event(uint8_t button);
  73:player.c      **** 
  74:player.c      **** static void player_render_pause(void);
  75:player.c      **** static void player_render_name(const char *name);
  76:player.c      **** static void player_render_plus_minus(void);
  77:player.c      **** static void player_render_interval(void);
  78:player.c      **** static void player_render_timer(void);
  79:player.c      **** static void player_render_timer_partial(void);
  80:player.c      **** static void player_render_init(const char *name);
  81:player.c      **** 
  82:player.c      **** /* Timer 0: Noninverting Fast PWM on PD5 and PD6 (62.5 KHz) */
  83:player.c      **** /* Timer 2: CTC Mode, Interrupt, Frequency is set separately */
  84:player.c      **** /* Set Pins of the left and the right Channel to output */
  85:player.c      **** /* Timer0: No Prescaler, Timer2: Prescaler F_CPU / 8 */
  86:player.c      **** static void player_audio_init(void)
  87:player.c      **** {
  88:player.c      **** 	DDRD |= (1 << PLAYER_PIN_CHANNEL_RIGHT) | (1 << PLAYER_PIN_CHANNEL_LEFT);
  89:player.c      **** }
  90:player.c      **** 
  91:player.c      **** static uint8_t player_wav_info(void)
  92:player.c      **** {
  93:player.c      **** 	{
  94:player.c      **** 		uint16_t n;
  95:player.c      **** 		if(fat_fread(player_buf, PLAYER_BUFFER_SIZE, &n) || n != PLAYER_BUFFER_SIZE)
  96:player.c      **** 		{
  97:player.c      **** 			return 1;
  98:player.c      **** 		}
  99:player.c      **** 	}
 100:player.c      **** 
 101:player.c      **** 	if(!mem_cmp(player_buf, (uint8_t *)"RIFF", 4))
 102:player.c      **** 	{
 103:player.c      **** 		return 1;
 104:player.c      **** 	}
 105:player.c      **** 
 106:player.c      **** 	if(!mem_cmp(player_buf + 8, (uint8_t *)"WAVEfmt ", 8))
 107:player.c      **** 	{
 108:player.c      **** 		return 1;
 109:player.c      **** 	}
 110:player.c      **** 
 111:player.c      **** 	/* Subchunk1Size - PCM */
 112:player.c      **** 	if(ld_u32(player_buf + 16) != 16)
 113:player.c      **** 	{
 114:player.c      **** 		return 1;
 115:player.c      **** 	}
 116:player.c      **** 
 117:player.c      **** 	/* AudioFormat - Linear Quantization */
 118:player.c      **** 	if(ld_u16(player_buf + 20) != 1)
 119:player.c      **** 	{
 120:player.c      **** 		return 1;
 121:player.c      **** 	}
 122:player.c      **** 
 123:player.c      **** 	/* NumChannels */
 124:player.c      **** 	player_wi.num_channels = ld_u16(player_buf + 22);
 125:player.c      **** 	if(player_wi.num_channels != 1 && player_wi.num_channels != 2)
 126:player.c      **** 	{
 127:player.c      **** 		return 1;
 128:player.c      **** 	}
 129:player.c      **** 
 130:player.c      **** 	{
 131:player.c      **** 		/* SampleRate */
 132:player.c      **** 		uint8_t i;
 133:player.c      **** 		uint32_t sample_rate;
 134:player.c      **** 		sample_rate = ld_u32(player_buf + 24);
 135:player.c      **** 		for(i = 0; i < ARRAY_LENGTH(player_sample_rates); ++i)
 136:player.c      **** 		{
 137:player.c      **** 			if(sample_rate == player_sample_rates[i].sample_rate)
 138:player.c      **** 			{
 139:player.c      **** 				player_wi.compare_value = player_sample_rates[i].compare_value;
 140:player.c      **** 				break;
 141:player.c      **** 			}
 142:player.c      **** 		}
 143:player.c      **** 
 144:player.c      **** 		player_wi.sample_rate = sample_rate;
 145:player.c      **** 		if(i == ARRAY_LENGTH(player_sample_rates))
 146:player.c      **** 		{
 147:player.c      **** 			return 1;
 148:player.c      **** 		}
 149:player.c      **** 	}
 150:player.c      **** 
 151:player.c      **** 	{
 152:player.c      **** 		const uint8_t *data_ptr;
 153:player.c      **** 		if(!(data_ptr = mem_mem(player_buf + 36, PLAYER_BUFFER_SIZE - 36, (uint8_t *)"data", 4)))
 154:player.c      **** 		{
 155:player.c      **** 			return 1;
 156:player.c      **** 		}
 157:player.c      **** 
 158:player.c      **** 		player_wi.offset = data_ptr - player_buf + 8;
 159:player.c      **** 		player_wi.data_len = ld_u32(data_ptr + 4);
 160:player.c      **** 	}
 161:player.c      **** 
 162:player.c      **** 	return 0;
 163:player.c      **** }
 164:player.c      **** 
 165:player.c      **** static void player_audio_start(void)
 166:player.c      **** {
 648               		.loc 5 166 1 is_stmt 1 view -0
 649               		.cfi_startproc
 650               	/* prologue: function */
 651               	/* frame size = 0 */
 652               	/* stack size = 0 */
 653               	.L__stack_usage = 0
 167:player.c      **** 	TCCR0B = (1 << CS00);
 654               		.loc 5 167 2 view .LVU135
 655               		.loc 5 167 9 is_stmt 0 view .LVU136
 656 024e 81E0      		ldi r24,lo8(1)
 657 0250 85BD      		out 0x25,r24
 168:player.c      **** 	TCCR2B = (1 << CS21);
 658               		.loc 5 168 2 is_stmt 1 view .LVU137
 659               		.loc 5 168 9 is_stmt 0 view .LVU138
 660 0252 82E0      		ldi r24,lo8(2)
 661 0254 8093 B100 		sts 177,r24
 169:player.c      **** 	TCCR2A = (1 << WGM21);
 662               		.loc 5 169 2 is_stmt 1 view .LVU139
 663               		.loc 5 169 9 is_stmt 0 view .LVU140
 664 0258 8093 B000 		sts 176,r24
 170:player.c      **** 	TIMSK2 = (1 << OCIE2A);
 665               		.loc 5 170 2 is_stmt 1 view .LVU141
 666               		.loc 5 170 9 is_stmt 0 view .LVU142
 667 025c 8093 7000 		sts 112,r24
 171:player.c      **** 	TCCR0A = (1 << COM0A1) | (1 << COM0B1) |
 668               		.loc 5 171 2 is_stmt 1 view .LVU143
 669               		.loc 5 171 9 is_stmt 0 view .LVU144
 670 0260 83EA      		ldi r24,lo8(-93)
 671 0262 84BD      		out 0x24,r24
 172:player.c      **** 		(1 << WGM01) | (1 << WGM00);
 173:player.c      **** 	OCR0A = 0;
 672               		.loc 5 173 2 is_stmt 1 view .LVU145
 673               		.loc 5 173 8 is_stmt 0 view .LVU146
 674 0264 17BC      		out 0x27,__zero_reg__
 174:player.c      **** 	OCR0B = 0;
 675               		.loc 5 174 2 is_stmt 1 view .LVU147
 676               		.loc 5 174 8 is_stmt 0 view .LVU148
 677 0266 18BC      		out 0x28,__zero_reg__
 175:player.c      **** 	sei();
 678               		.loc 5 175 2 is_stmt 1 view .LVU149
 679               	/* #APP */
 680               	 ;  175 "player.c" 1
 681 0268 7894      		sei
 682               	 ;  0 "" 2
 683               	/* #NOAPP */
 684               	/* epilogue start */
 176:player.c      **** }
 685               		.loc 5 176 1 is_stmt 0 view .LVU150
 686 026a 0895      		ret
 687               		.cfi_endproc
 688               	.LFE51:
 691               	player_audio_stop:
 692               	.LFB52:
 177:player.c      **** 
 178:player.c      **** static void player_audio_stop(void)
 179:player.c      **** {
 693               		.loc 5 179 1 is_stmt 1 view -0
 694               		.cfi_startproc
 695               	/* prologue: function */
 696               	/* frame size = 0 */
 697               	/* stack size = 0 */
 698               	.L__stack_usage = 0
 180:player.c      **** 	TCCR0B = 0;
 699               		.loc 5 180 2 view .LVU152
 700               		.loc 5 180 9 is_stmt 0 view .LVU153
 701 026c 15BC      		out 0x25,__zero_reg__
 181:player.c      **** 	TCCR2B = 0;
 702               		.loc 5 181 2 is_stmt 1 view .LVU154
 703               		.loc 5 181 9 is_stmt 0 view .LVU155
 704 026e 1092 B100 		sts 177,__zero_reg__
 182:player.c      **** 	TCCR2A = 0;
 705               		.loc 5 182 2 is_stmt 1 view .LVU156
 706               		.loc 5 182 9 is_stmt 0 view .LVU157
 707 0272 1092 B000 		sts 176,__zero_reg__
 183:player.c      **** 	TIMSK2 = 0;
 708               		.loc 5 183 2 is_stmt 1 view .LVU158
 709               		.loc 5 183 9 is_stmt 0 view .LVU159
 710 0276 1092 7000 		sts 112,__zero_reg__
 184:player.c      **** 	TCCR0A = 0;
 711               		.loc 5 184 2 is_stmt 1 view .LVU160
 712               		.loc 5 184 9 is_stmt 0 view .LVU161
 713 027a 14BC      		out 0x24,__zero_reg__
 185:player.c      **** 	OCR0A = 0;
 714               		.loc 5 185 2 is_stmt 1 view .LVU162
 715               		.loc 5 185 8 is_stmt 0 view .LVU163
 716 027c 17BC      		out 0x27,__zero_reg__
 186:player.c      **** 	OCR0B = 0;
 717               		.loc 5 186 2 is_stmt 1 view .LVU164
 718               		.loc 5 186 8 is_stmt 0 view .LVU165
 719 027e 18BC      		out 0x28,__zero_reg__
 187:player.c      **** 	cli();
 720               		.loc 5 187 2 is_stmt 1 view .LVU166
 721               	/* #APP */
 722               	 ;  187 "player.c" 1
 723 0280 F894      		cli
 724               	 ;  0 "" 2
 725               	/* #NOAPP */
 726               	/* epilogue start */
 188:player.c      **** }
 727               		.loc 5 188 1 is_stmt 0 view .LVU167
 728 0282 0895      		ret
 729               		.cfi_endproc
 730               	.LFE52:
 733               	path_up:
 734               	.LFB67:
 735               		.file 6 "dir.c"
   1:dir.c         **** #include <string.h>
   2:dir.c         **** 
   3:dir.c         **** /* [ VARIABLES ] */
   4:dir.c         **** static char dir_path[256] = "/";
   5:dir.c         **** static dir_t dir;
   6:dir.c         **** static direntry_t dirent[2];
   7:dir.c         **** static uint8_t dir_sel, dir_path_len = 0;
   8:dir.c         **** 
   9:dir.c         **** static void path_append(const char *s)
  10:dir.c         **** {
  11:dir.c         **** 	char c;
  12:dir.c         **** 	dir_path[dir_path_len++] = '/';
  13:dir.c         **** 	for(; (c = *s); ++s)
  14:dir.c         **** 	{
  15:dir.c         **** 		dir_path[dir_path_len++] = c;
  16:dir.c         **** 	}
  17:dir.c         **** 
  18:dir.c         **** 	dir_path[dir_path_len] = '\0';
  19:dir.c         **** }
  20:dir.c         **** 
  21:dir.c         **** static void path_up(void)
  22:dir.c         **** {
 736               		.loc 6 22 1 is_stmt 1 view -0
 737               		.cfi_startproc
 738               	/* prologue: function */
 739               	/* frame size = 0 */
 740               	/* stack size = 0 */
 741               	.L__stack_usage = 0
  23:dir.c         **** 	char *s;
 742               		.loc 6 23 2 view .LVU169
  24:dir.c         **** 	for(s = dir_path + dir_path_len; s >= dir_path; --s)
 743               		.loc 6 24 2 view .LVU170
 744               		.loc 6 24 19 is_stmt 0 view .LVU171
 745 0284 E091 0000 		lds r30,dir_path_len
 746 0288 F0E0      		ldi r31,0
 747               		.loc 6 24 8 view .LVU172
 748 028a E050      		subi r30,lo8(-(dir_path))
 749 028c F040      		sbci r31,hi8(-(dir_path))
 750               	.LVL51:
 751               	.L37:
 752               		.loc 6 24 35 is_stmt 1 discriminator 1 view .LVU173
 753               		.loc 6 24 2 is_stmt 0 discriminator 1 view .LVU174
 754 028e 80E0      		ldi r24,hi8(dir_path)
 755 0290 E030      		cpi r30,lo8(dir_path)
 756 0292 F807      		cpc r31,r24
 757 0294 00F0      		brlo .L40
  25:dir.c         **** 	{
  26:dir.c         **** 		if(*s == '/')
 758               		.loc 6 26 3 is_stmt 1 view .LVU175
 759               		.loc 6 26 5 is_stmt 0 view .LVU176
 760 0296 8081      		ld r24,Z
 761 0298 8F32      		cpi r24,lo8(47)
 762 029a 01F4      		brne .L38
 763               	.L40:
  27:dir.c         **** 		{
  28:dir.c         **** 			break;
  29:dir.c         **** 		}
  30:dir.c         **** 	}
  31:dir.c         **** 
  32:dir.c         **** 	*s = '\0';
 764               		.loc 6 32 2 is_stmt 1 view .LVU177
 765               		.loc 6 32 5 is_stmt 0 view .LVU178
 766 029c 1082      		st Z,__zero_reg__
  33:dir.c         **** 	dir_path_len = s - dir_path;
 767               		.loc 6 33 2 is_stmt 1 view .LVU179
 768               		.loc 6 33 19 is_stmt 0 view .LVU180
 769 029e E050      		subi r30,lo8(dir_path)
 770 02a0 F040      		sbci r31,hi8(dir_path)
 771               	.LVL52:
 772               		.loc 6 33 15 view .LVU181
 773 02a2 E093 0000 		sts dir_path_len,r30
 774               	/* epilogue start */
  34:dir.c         **** }
 775               		.loc 6 34 1 view .LVU182
 776 02a6 0895      		ret
 777               	.LVL53:
 778               	.L38:
  24:dir.c         **** 	{
 779               		.loc 6 24 50 is_stmt 1 discriminator 2 view .LVU183
 780 02a8 3197      		sbiw r30,1
 781               	.LVL54:
  24:dir.c         **** 	{
 782               		.loc 6 24 50 is_stmt 0 discriminator 2 view .LVU184
 783 02aa 00C0      		rjmp .L37
 784               		.cfi_endproc
 785               	.LFE67:
 788               	lcd_enable:
 789               	.LFB10:
 790               		.file 7 "lcd.c"
   1:lcd.c         **** #define LCD_DELAY_US_ENABLE    20
   2:lcd.c         **** #define LCD_DELAY_US_DATA      46
   3:lcd.c         **** #define LCD_DELAY_US_COMMAND   42
   4:lcd.c         **** 
   5:lcd.c         **** #define LCD_DELAY_MS_BOOTUP    15
   6:lcd.c         **** #define LCD_DELAY_MS_RESET_1    5
   7:lcd.c         **** #define LCD_DELAY_MS_RESET_2    1
   8:lcd.c         **** #define LCD_DELAY_MS_RESET_3    1
   9:lcd.c         **** #define LCD_DELAY_MS_4BIT       5
  10:lcd.c         **** #define LCD_DELAY_MS_HOME       2
  11:lcd.c         **** #define LCD_DELAY_MS_CLEAR      2
  12:lcd.c         **** 
  13:lcd.c         **** /* Clear Display                 00000001 */
  14:lcd.c         **** #define LCD_CLEAR_DISPLAY        0x01
  15:lcd.c         **** 
  16:lcd.c         **** /* Cursor Home                   0000001x */
  17:lcd.c         **** #define LCD_CURSOR_HOME          0x02
  18:lcd.c         **** 
  19:lcd.c         **** /* Set Entry Mode                000001xx */
  20:lcd.c         **** #define LCD_SET_ENTRY            0x04
  21:lcd.c         **** 
  22:lcd.c         **** #define LCD_ENTRY_DECREASE       0x00
  23:lcd.c         **** #define LCD_ENTRY_INCREASE       0x02
  24:lcd.c         **** #define LCD_ENTRY_NOSHIFT        0x00
  25:lcd.c         **** #define LCD_ENTRY_SHIFT          0x01
  26:lcd.c         **** 
  27:lcd.c         **** /* Set Display                   00001xxx */
  28:lcd.c         **** #define LCD_SET_DISPLAY          0x08
  29:lcd.c         **** 
  30:lcd.c         **** #define LCD_DISPLAY_OFF          0x00
  31:lcd.c         **** #define LCD_DISPLAY_ON           0x04
  32:lcd.c         **** #define LCD_CURSOR_OFF           0x00
  33:lcd.c         **** #define LCD_CURSOR_ON            0x02
  34:lcd.c         **** #define LCD_BLINKING_OFF         0x00
  35:lcd.c         **** #define LCD_BLINKING_ON          0x01
  36:lcd.c         **** 
  37:lcd.c         **** /* Set Shift                     0001xxxx */
  38:lcd.c         **** #define LCD_SET_SHIFT            0x10
  39:lcd.c         **** 
  40:lcd.c         **** #define LCD_CURSOR_MOVE          0x00
  41:lcd.c         **** #define LCD_DISPLAY_SHIFT        0x08
  42:lcd.c         **** #define LCD_SHIFT_LEFT           0x00
  43:lcd.c         **** #define LCD_SHIFT_RIGHT          0x04
  44:lcd.c         **** 
  45:lcd.c         **** /* Set Function                  001xxxxx */
  46:lcd.c         **** #define LCD_SET_FUNCTION         0x20
  47:lcd.c         **** 
  48:lcd.c         **** #define LCD_FUNCTION_4BIT        0x00
  49:lcd.c         **** #define LCD_FUNCTION_2LINE       0x08
  50:lcd.c         **** #define LCD_FUNCTION_5X7         0x00
  51:lcd.c         **** 
  52:lcd.c         **** #define LCD_SOFT_RESET           0x30
  53:lcd.c         **** 
  54:lcd.c         **** /* Set CGRAM Address             01xxxxxx (Character Generator RAM) */
  55:lcd.c         **** #define LCD_SET_CGADR            0x40
  56:lcd.c         **** 
  57:lcd.c         **** /* Set DDRAM Address             1xxxxxxx (Display Data RAM) */
  58:lcd.c         **** #define LCD_SET_DDADR            0x80
  59:lcd.c         **** 
  60:lcd.c         **** #define LCD_OFFSET_SECOND_ROW    0x40
  61:lcd.c         **** 
  62:lcd.c         **** #define LCD_DELAY_US(n)          _delay_us(n)
  63:lcd.c         **** #define LCD_DELAY_MS(n)          _delay_ms(n)
  64:lcd.c         **** 
  65:lcd.c         **** #define LCD_OUT                  PORTD
  66:lcd.c         **** #define LCD_DIR                  DDRD
  67:lcd.c         **** #define LCD_RS                  7
  68:lcd.c         **** #define LCD_EN                  4
  69:lcd.c         **** #define LCD_DB                  0
  70:lcd.c         **** 
  71:lcd.c         **** #define LCD_WIDTH              16
  72:lcd.c         **** #define LCD_HEIGHT              2
  73:lcd.c         **** 
  74:lcd.c         **** static void lcd_init(void);
  75:lcd.c         **** static void lcd_data(uint8_t data);
  76:lcd.c         **** static void lcd_command(uint8_t data);
  77:lcd.c         **** static void lcd_clear(void);
  78:lcd.c         **** static void lcd_string(const char *s);
  79:lcd.c         **** static void lcd_string_P(const char *s);
  80:lcd.c         **** 
  81:lcd.c         **** #define lcd_char(c) \
  82:lcd.c         **** 	lcd_data(c)
  83:lcd.c         **** 
  84:lcd.c         **** #define lcd_cursor(x, y) \
  85:lcd.c         **** 	lcd_command(LCD_SET_DDADR + (x) + ((y) ? LCD_OFFSET_SECOND_ROW : 0))
  86:lcd.c         **** 
  87:lcd.c         **** static void lcd_enable(void)
  88:lcd.c         **** {
 791               		.loc 7 88 1 is_stmt 1 view -0
 792               		.cfi_startproc
 793               	/* prologue: function */
 794               	/* frame size = 0 */
 795               	/* stack size = 0 */
 796               	.L__stack_usage = 0
  89:lcd.c         **** 	LCD_OUT |= (1 << LCD_EN);
 797               		.loc 7 89 2 view .LVU186
 798               		.loc 7 89 10 is_stmt 0 view .LVU187
 799 02ac 5C9A      		sbi 0xb,4
  90:lcd.c         **** 	LCD_DELAY_US(LCD_DELAY_US_ENABLE);
 800               		.loc 7 90 2 is_stmt 1 view .LVU188
 801               	.LVL55:
 802               	.LBB54:
 803               	.LBI54:
 804               		.file 8 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 211:/usr/avr/include/util/delay.h **** 
 212:/usr/avr/include/util/delay.h **** /**
 213:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/avr/include/util/delay.h **** 
 215:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/avr/include/util/delay.h **** 
 217:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/avr/include/util/delay.h **** 
 220:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/avr/include/util/delay.h **** 
 226:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/avr/include/util/delay.h **** 
 231:/usr/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/avr/include/util/delay.h **** 
 236:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/avr/include/util/delay.h ****    respectively.
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h ****    \note
 242:/usr/avr/include/util/delay.h **** 
 243:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/avr/include/util/delay.h **** 
 253:/usr/avr/include/util/delay.h ****  */
 254:/usr/avr/include/util/delay.h **** void
 255:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 805               		.loc 8 255 1 view .LVU189
 806               	.LBB55:
 256:/usr/avr/include/util/delay.h **** {
 257:/usr/avr/include/util/delay.h **** 	double __tmp ;
 807               		.loc 8 257 2 view .LVU190
 258:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 808               		.loc 8 261 2 view .LVU191
 262:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 809               		.loc 8 262 2 view .LVU192
 263:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 810               		.loc 8 263 2 view .LVU193
 264:/usr/avr/include/util/delay.h **** 
 265:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/avr/include/util/delay.h **** 
 268:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/avr/include/util/delay.h **** 
 271:/usr/avr/include/util/delay.h **** 	#else
 272:/usr/avr/include/util/delay.h **** 		//round up by default
 273:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 811               		.loc 8 273 3 view .LVU194
 274:/usr/avr/include/util/delay.h **** 	#endif
 275:/usr/avr/include/util/delay.h **** 
 276:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 812               		.loc 8 276 2 view .LVU195
 813 02ae 8AE6      		ldi r24,lo8(106)
 814 02b0 8A95      	1:	dec r24
 815 02b2 01F4      		brne 1b
 816 02b4 00C0      		rjmp .
 817               	.LVL56:
 818               		.loc 8 276 2 is_stmt 0 view .LVU196
 819               	.LBE55:
 820               	.LBE54:
  91:lcd.c         **** 	LCD_OUT &= ~(1 << LCD_EN);
 821               		.loc 7 91 2 is_stmt 1 view .LVU197
 822               		.loc 7 91 10 is_stmt 0 view .LVU198
 823 02b6 5C98      		cbi 0xb,4
 824               	/* epilogue start */
  92:lcd.c         **** }
 825               		.loc 7 92 1 view .LVU199
 826 02b8 0895      		ret
 827               		.cfi_endproc
 828               	.LFE10:
 831               	lcd_out:
 832               	.LVL57:
 833               	.LFB11:
  93:lcd.c         **** 
  94:lcd.c         **** static void lcd_out(uint8_t data)
  95:lcd.c         **** {
 834               		.loc 7 95 1 is_stmt 1 view -0
 835               		.cfi_startproc
 836               	/* prologue: function */
 837               	/* frame size = 0 */
 838               	/* stack size = 0 */
 839               	.L__stack_usage = 0
  96:lcd.c         **** 	data &= 0xF0;
 840               		.loc 7 96 2 view .LVU201
  97:lcd.c         **** 	LCD_OUT &= ~(0xF0 >> (4 - LCD_DB));
 841               		.loc 7 97 2 view .LVU202
 842               		.loc 7 97 10 is_stmt 0 view .LVU203
 843 02ba 9BB1      		in r25,0xb
 844 02bc 907F      		andi r25,lo8(-16)
 845 02be 9BB9      		out 0xb,r25
  98:lcd.c         **** 	LCD_OUT |= (data >> (4 - LCD_DB));
 846               		.loc 7 98 2 is_stmt 1 view .LVU204
 847               		.loc 7 98 10 is_stmt 0 view .LVU205
 848 02c0 9BB1      		in r25,0xb
 849 02c2 8295      		swap r24
 850               	.LVL58:
 851               		.loc 7 98 10 view .LVU206
 852 02c4 8F70      		andi r24,lo8(15)
 853 02c6 892B      		or r24,r25
 854 02c8 8BB9      		out 0xb,r24
  99:lcd.c         **** 	lcd_enable();
 855               		.loc 7 99 2 is_stmt 1 view .LVU207
 856 02ca 0C94 0000 		jmp lcd_enable
 857               	.LVL59:
 858               		.cfi_endproc
 859               	.LFE11:
 862               	lcd_data:
 863               	.LVL60:
 864               	.LFB13:
 100:lcd.c         **** }
 101:lcd.c         **** 
 102:lcd.c         **** static void lcd_init(void)
 103:lcd.c         **** {
 104:lcd.c         **** 	uint8_t pins = (0x0F << LCD_DB) | (1 << LCD_RS) | (1 << LCD_EN);
 105:lcd.c         **** 	LCD_DIR |= pins;
 106:lcd.c         **** 	LCD_OUT &= ~pins;
 107:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_BOOTUP);
 108:lcd.c         **** 	lcd_out(LCD_SOFT_RESET);
 109:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_RESET_1);
 110:lcd.c         **** 	lcd_enable();
 111:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_RESET_2);
 112:lcd.c         **** 	lcd_enable();
 113:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_RESET_3);
 114:lcd.c         **** 	lcd_out(LCD_SET_FUNCTION | LCD_FUNCTION_4BIT);
 115:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_4BIT);
 116:lcd.c         **** 	lcd_command(LCD_SET_FUNCTION | LCD_FUNCTION_4BIT |
 117:lcd.c         **** 		LCD_FUNCTION_2LINE | LCD_FUNCTION_5X7);
 118:lcd.c         **** 	lcd_command(LCD_SET_DISPLAY | LCD_DISPLAY_ON |
 119:lcd.c         **** 		LCD_CURSOR_OFF | LCD_BLINKING_OFF);
 120:lcd.c         **** 	lcd_command(LCD_SET_ENTRY | LCD_ENTRY_INCREASE |
 121:lcd.c         **** 		LCD_ENTRY_NOSHIFT);
 122:lcd.c         **** 	lcd_clear();
 123:lcd.c         **** }
 124:lcd.c         **** 
 125:lcd.c         **** static void lcd_data(uint8_t data)
 126:lcd.c         **** {
 865               		.loc 7 126 1 view -0
 866               		.cfi_startproc
 867               		.loc 7 126 1 is_stmt 0 view .LVU209
 868 02ce CF93      		push r28
 869               	.LCFI27:
 870               		.cfi_def_cfa_offset 3
 871               		.cfi_offset 28, -2
 872               	/* prologue: function */
 873               	/* frame size = 0 */
 874               	/* stack size = 1 */
 875               	.L__stack_usage = 1
 876 02d0 C82F      		mov r28,r24
 127:lcd.c         **** 	LCD_OUT |= (1 << LCD_RS);
 877               		.loc 7 127 2 is_stmt 1 view .LVU210
 878               		.loc 7 127 10 is_stmt 0 view .LVU211
 879 02d2 5F9A      		sbi 0xb,7
 128:lcd.c         **** 	lcd_out(data);
 880               		.loc 7 128 2 is_stmt 1 view .LVU212
 881 02d4 0E94 0000 		call lcd_out
 882               	.LVL61:
 129:lcd.c         **** 	lcd_out(data << 4);
 883               		.loc 7 129 2 view .LVU213
 884 02d8 8C2F      		mov r24,r28
 885 02da 8295      		swap r24
 886 02dc 807F      		andi r24,lo8(-16)
 887 02de 0E94 0000 		call lcd_out
 888               	.LVL62:
 130:lcd.c         **** 	LCD_DELAY_US(LCD_DELAY_US_DATA);
 889               		.loc 7 130 2 view .LVU214
 890               	.LBB56:
 891               	.LBI56:
 255:/usr/avr/include/util/delay.h **** {
 892               		.loc 8 255 1 view .LVU215
 893               	.LBB57:
 257:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 894               		.loc 8 257 2 view .LVU216
 261:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 895               		.loc 8 261 2 view .LVU217
 262:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 896               		.loc 8 262 2 view .LVU218
 263:/usr/avr/include/util/delay.h **** 
 897               		.loc 8 263 2 view .LVU219
 273:/usr/avr/include/util/delay.h **** 	#endif
 898               		.loc 8 273 3 view .LVU220
 899               		.loc 8 276 2 view .LVU221
 900 02e2 85EF      		ldi r24,lo8(-11)
 901 02e4 8A95      	1:	dec r24
 902 02e6 01F4      		brne 1b
 903 02e8 0000      		nop
 904               	.LVL63:
 905               	/* epilogue start */
 906               		.loc 8 276 2 is_stmt 0 view .LVU222
 907               	.LBE57:
 908               	.LBE56:
 131:lcd.c         **** }
 909               		.loc 7 131 1 view .LVU223
 910 02ea CF91      		pop r28
 911               	.LVL64:
 912               		.loc 7 131 1 view .LVU224
 913 02ec 0895      		ret
 914               		.cfi_endproc
 915               	.LFE13:
 918               	lcd_string:
 919               	.LVL65:
 920               	.LFB16:
 132:lcd.c         **** 
 133:lcd.c         **** static void lcd_command(uint8_t data)
 134:lcd.c         **** {
 135:lcd.c         **** 	LCD_OUT &= ~(1 << LCD_RS);
 136:lcd.c         **** 	lcd_out(data);
 137:lcd.c         **** 	lcd_out(data << 4);
 138:lcd.c         **** 	LCD_DELAY_US(LCD_DELAY_US_COMMAND);
 139:lcd.c         **** }
 140:lcd.c         **** 
 141:lcd.c         **** static void lcd_clear(void)
 142:lcd.c         **** {
 143:lcd.c         **** 	lcd_command(LCD_CLEAR_DISPLAY);
 144:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_CLEAR);
 145:lcd.c         **** }
 146:lcd.c         **** 
 147:lcd.c         **** static void lcd_string(const char *s)
 148:lcd.c         **** {
 921               		.loc 7 148 1 is_stmt 1 view -0
 922               		.cfi_startproc
 923               		.loc 7 148 1 is_stmt 0 view .LVU226
 924 02ee CF93      		push r28
 925               	.LCFI28:
 926               		.cfi_def_cfa_offset 3
 927               		.cfi_offset 28, -2
 928 02f0 DF93      		push r29
 929               	.LCFI29:
 930               		.cfi_def_cfa_offset 4
 931               		.cfi_offset 29, -3
 932               	/* prologue: function */
 933               	/* frame size = 0 */
 934               	/* stack size = 2 */
 935               	.L__stack_usage = 2
 936 02f2 EC01      		movw r28,r24
 149:lcd.c         **** 	register uint8_t c;
 937               		.loc 7 149 2 is_stmt 1 view .LVU227
 150:lcd.c         **** 	for(; (c = (uint8_t)*s); ++s)
 938               		.loc 7 150 2 view .LVU228
 939               	.LVL66:
 940               	.L46:
 941               		.loc 7 150 8 discriminator 1 view .LVU229
 942               		.loc 7 150 11 is_stmt 0 discriminator 1 view .LVU230
 943 02f4 8991      		ld r24,Y+
 944               	.LVL67:
 945               		.loc 7 150 2 discriminator 1 view .LVU231
 946 02f6 8111      		cpse r24,__zero_reg__
 947 02f8 00C0      		rjmp .L47
 948               	/* epilogue start */
 151:lcd.c         **** 	{
 152:lcd.c         **** 		lcd_data(c);
 153:lcd.c         **** 	}
 154:lcd.c         **** }
 949               		.loc 7 154 1 view .LVU232
 950 02fa DF91      		pop r29
 951 02fc CF91      		pop r28
 952               	.LVL68:
 953               		.loc 7 154 1 view .LVU233
 954 02fe 0895      		ret
 955               	.LVL69:
 956               	.L47:
 152:lcd.c         **** 	}
 957               		.loc 7 152 3 is_stmt 1 discriminator 2 view .LVU234
 958 0300 0E94 0000 		call lcd_data
 959               	.LVL70:
 150:lcd.c         **** 	for(; (c = (uint8_t)*s); ++s)
 960               		.loc 7 150 27 discriminator 2 view .LVU235
 150:lcd.c         **** 	for(; (c = (uint8_t)*s); ++s)
 961               		.loc 7 150 27 is_stmt 0 discriminator 2 view .LVU236
 962 0304 00C0      		rjmp .L46
 963               		.cfi_endproc
 964               	.LFE16:
 967               	lcd_string_P:
 968               	.LVL71:
 969               	.LFB17:
 155:lcd.c         **** 
 156:lcd.c         **** static void lcd_string_P(const char *s)
 157:lcd.c         **** {
 970               		.loc 7 157 1 is_stmt 1 view -0
 971               		.cfi_startproc
 972               		.loc 7 157 1 is_stmt 0 view .LVU238
 973 0306 CF93      		push r28
 974               	.LCFI30:
 975               		.cfi_def_cfa_offset 3
 976               		.cfi_offset 28, -2
 977 0308 DF93      		push r29
 978               	.LCFI31:
 979               		.cfi_def_cfa_offset 4
 980               		.cfi_offset 29, -3
 981               	/* prologue: function */
 982               	/* frame size = 0 */
 983               	/* stack size = 2 */
 984               	.L__stack_usage = 2
 985 030a EC01      		movw r28,r24
 158:lcd.c         **** 	register uint8_t c;
 986               		.loc 7 158 2 is_stmt 1 view .LVU239
 159:lcd.c         **** 	for(; (c = (uint8_t)pgm_read_byte(s)); ++s)
 987               		.loc 7 159 2 view .LVU240
 988               	.LVL72:
 989               	.L49:
 990               		.loc 7 159 8 discriminator 1 view .LVU241
 991               	.LBB58:
 992               		.loc 7 159 22 discriminator 1 view .LVU242
 993               		.loc 7 159 22 discriminator 1 view .LVU243
 994               		.loc 7 159 22 discriminator 1 view .LVU244
 995 030c FE01      		movw r30,r28
 996               	/* #APP */
 997               	 ;  159 "lcd.c" 1
 998 030e 8491      		lpm r24, Z
 999               		
 1000               	 ;  0 "" 2
 1001               	.LVL73:
 1002               		.loc 7 159 22 discriminator 1 view .LVU245
 1003               		.loc 7 159 22 is_stmt 0 discriminator 1 view .LVU246
 1004               	/* #NOAPP */
 1005               	.LBE58:
 1006               		.loc 7 159 2 discriminator 1 view .LVU247
 1007 0310 8111      		cpse r24,__zero_reg__
 1008 0312 00C0      		rjmp .L50
 1009               	/* epilogue start */
 160:lcd.c         **** 	{
 161:lcd.c         **** 		lcd_data(c);
 162:lcd.c         **** 	}
 163:lcd.c         **** }
 1010               		.loc 7 163 1 view .LVU248
 1011 0314 DF91      		pop r29
 1012 0316 CF91      		pop r28
 1013               	.LVL74:
 1014               		.loc 7 163 1 view .LVU249
 1015 0318 0895      		ret
 1016               	.LVL75:
 1017               	.L50:
 161:lcd.c         **** 	}
 1018               		.loc 7 161 3 is_stmt 1 discriminator 2 view .LVU250
 1019 031a 0E94 0000 		call lcd_data
 1020               	.LVL76:
 159:lcd.c         **** 	for(; (c = (uint8_t)pgm_read_byte(s)); ++s)
 1021               		.loc 7 159 41 discriminator 2 view .LVU251
 1022 031e 2196      		adiw r28,1
 1023               	.LVL77:
 159:lcd.c         **** 	for(; (c = (uint8_t)pgm_read_byte(s)); ++s)
 1024               		.loc 7 159 41 is_stmt 0 discriminator 2 view .LVU252
 1025 0320 00C0      		rjmp .L49
 1026               		.cfi_endproc
 1027               	.LFE17:
 1030               	lcd_command:
 1031               	.LVL78:
 1032               	.LFB14:
 134:lcd.c         **** 	LCD_OUT &= ~(1 << LCD_RS);
 1033               		.loc 7 134 1 is_stmt 1 view -0
 1034               		.cfi_startproc
 134:lcd.c         **** 	LCD_OUT &= ~(1 << LCD_RS);
 1035               		.loc 7 134 1 is_stmt 0 view .LVU254
 1036 0322 CF93      		push r28
 1037               	.LCFI32:
 1038               		.cfi_def_cfa_offset 3
 1039               		.cfi_offset 28, -2
 1040               	/* prologue: function */
 1041               	/* frame size = 0 */
 1042               	/* stack size = 1 */
 1043               	.L__stack_usage = 1
 1044 0324 C82F      		mov r28,r24
 135:lcd.c         **** 	lcd_out(data);
 1045               		.loc 7 135 2 is_stmt 1 view .LVU255
 135:lcd.c         **** 	lcd_out(data);
 1046               		.loc 7 135 10 is_stmt 0 view .LVU256
 1047 0326 5F98      		cbi 0xb,7
 136:lcd.c         **** 	lcd_out(data << 4);
 1048               		.loc 7 136 2 is_stmt 1 view .LVU257
 1049 0328 0E94 0000 		call lcd_out
 1050               	.LVL79:
 137:lcd.c         **** 	LCD_DELAY_US(LCD_DELAY_US_COMMAND);
 1051               		.loc 7 137 2 view .LVU258
 1052 032c 8C2F      		mov r24,r28
 1053 032e 8295      		swap r24
 1054 0330 807F      		andi r24,lo8(-16)
 1055 0332 0E94 0000 		call lcd_out
 1056               	.LVL80:
 138:lcd.c         **** }
 1057               		.loc 7 138 2 view .LVU259
 1058               	.LBB59:
 1059               	.LBI59:
 255:/usr/avr/include/util/delay.h **** {
 1060               		.loc 8 255 1 view .LVU260
 1061               	.LBB60:
 257:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1062               		.loc 8 257 2 view .LVU261
 261:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1063               		.loc 8 261 2 view .LVU262
 262:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 1064               		.loc 8 262 2 view .LVU263
 263:/usr/avr/include/util/delay.h **** 
 1065               		.loc 8 263 2 view .LVU264
 273:/usr/avr/include/util/delay.h **** 	#endif
 1066               		.loc 8 273 3 view .LVU265
 1067               		.loc 8 276 2 view .LVU266
 1068 0336 80EE      		ldi r24,lo8(-32)
 1069 0338 8A95      	1:	dec r24
 1070 033a 01F4      		brne 1b
 1071               	.LVL81:
 1072               	/* epilogue start */
 1073               		.loc 8 276 2 is_stmt 0 view .LVU267
 1074               	.LBE60:
 1075               	.LBE59:
 139:lcd.c         **** 
 1076               		.loc 7 139 1 view .LVU268
 1077 033c CF91      		pop r28
 1078               	.LVL82:
 139:lcd.c         **** 
 1079               		.loc 7 139 1 view .LVU269
 1080 033e 0895      		ret
 1081               		.cfi_endproc
 1082               	.LFE14:
 1085               	lcd_gchar:
 1086               	.LVL83:
 1087               	.LFB18:
 164:lcd.c         **** 
 165:lcd.c         **** static void lcd_gchar(uint8_t addr, const uint8_t *data)
 166:lcd.c         **** {
 1088               		.loc 7 166 1 is_stmt 1 view -0
 1089               		.cfi_startproc
 1090               		.loc 7 166 1 is_stmt 0 view .LVU271
 1091 0340 0F93      		push r16
 1092               	.LCFI33:
 1093               		.cfi_def_cfa_offset 3
 1094               		.cfi_offset 16, -2
 1095 0342 1F93      		push r17
 1096               	.LCFI34:
 1097               		.cfi_def_cfa_offset 4
 1098               		.cfi_offset 17, -3
 1099 0344 CF93      		push r28
 1100               	.LCFI35:
 1101               		.cfi_def_cfa_offset 5
 1102               		.cfi_offset 28, -4
 1103 0346 DF93      		push r29
 1104               	.LCFI36:
 1105               		.cfi_def_cfa_offset 6
 1106               		.cfi_offset 29, -5
 1107               	/* prologue: function */
 1108               	/* frame size = 0 */
 1109               	/* stack size = 4 */
 1110               	.L__stack_usage = 4
 1111 0348 8B01      		movw r16,r22
 167:lcd.c         **** 	uint8_t i;
 1112               		.loc 7 167 2 is_stmt 1 view .LVU272
 168:lcd.c         **** 	lcd_command(LCD_SET_CGADR | (addr << 3));
 1113               		.loc 7 168 2 view .LVU273
 1114               		.loc 7 168 36 is_stmt 0 view .LVU274
 1115 034a 28E0      		ldi r18,lo8(8)
 1116 034c 829F      		mul r24,r18
 1117 034e C001      		movw r24,r0
 1118 0350 1124      		clr __zero_reg__
 1119               	.LVL84:
 1120               		.loc 7 168 2 view .LVU275
 1121 0352 8064      		ori r24,lo8(64)
 1122 0354 0E94 0000 		call lcd_command
 1123               	.LVL85:
 169:lcd.c         **** 	for(i = 0; i < 8; ++i)
 1124               		.loc 7 169 2 is_stmt 1 view .LVU276
 1125               		.loc 7 169 13 view .LVU277
 1126 0358 E801      		movw r28,r16
 1127 035a 085F      		subi r16,-8
 1128 035c 1F4F      		sbci r17,-1
 1129               	.LVL86:
 1130               	.L53:
 170:lcd.c         **** 	{
 171:lcd.c         **** 		lcd_data(data[i]);
 1131               		.loc 7 171 3 discriminator 3 view .LVU278
 1132 035e 8991      		ld r24,Y+
 1133               	.LVL87:
 1134               		.loc 7 171 3 is_stmt 0 discriminator 3 view .LVU279
 1135 0360 0E94 0000 		call lcd_data
 1136               	.LVL88:
 169:lcd.c         **** 	for(i = 0; i < 8; ++i)
 1137               		.loc 7 169 20 is_stmt 1 discriminator 3 view .LVU280
 169:lcd.c         **** 	for(i = 0; i < 8; ++i)
 1138               		.loc 7 169 13 discriminator 3 view .LVU281
 169:lcd.c         **** 	for(i = 0; i < 8; ++i)
 1139               		.loc 7 169 2 is_stmt 0 discriminator 3 view .LVU282
 1140 0364 C017      		cp r28,r16
 1141 0366 D107      		cpc r29,r17
 1142 0368 01F4      		brne .L53
 172:lcd.c         **** 	}
 173:lcd.c         **** 
 174:lcd.c         **** 	lcd_command(LCD_SET_DDADR);
 1143               		.loc 7 174 2 is_stmt 1 view .LVU283
 1144 036a 80E8      		ldi r24,lo8(-128)
 1145               	/* epilogue start */
 175:lcd.c         **** }
 1146               		.loc 7 175 1 is_stmt 0 view .LVU284
 1147 036c DF91      		pop r29
 1148 036e CF91      		pop r28
 1149               	.LVL89:
 1150               		.loc 7 175 1 view .LVU285
 1151 0370 1F91      		pop r17
 1152 0372 0F91      		pop r16
 1153               	.LVL90:
 174:lcd.c         **** }
 1154               		.loc 7 174 2 view .LVU286
 1155 0374 0C94 0000 		jmp lcd_command
 1156               	.LVL91:
 1157               		.cfi_endproc
 1158               	.LFE18:
 1161               	player_render_pause:
 1162               	.LFB54:
 189:player.c      **** 
 190:player.c      **** static void player_event(uint8_t button)
 191:player.c      **** {
 192:player.c      **** 	switch(button)
 193:player.c      **** 	{
 194:player.c      **** 		/* Row 1 */
 195:player.c      **** 		case 0:
 196:player.c      **** 			/* Play/Pause */
 197:player.c      **** 			if(player_flags.Paused)
 198:player.c      **** 			{
 199:player.c      **** 				player_flags.Paused = 0;
 200:player.c      **** 				player_render_pause();
 201:player.c      **** 				player_audio_start();
 202:player.c      **** 			}
 203:player.c      **** 			else
 204:player.c      **** 			{
 205:player.c      **** 				player_flags.Paused = 1;
 206:player.c      **** 				player_render_pause();
 207:player.c      **** 				player_audio_stop();
 208:player.c      **** 			}
 209:player.c      **** 			break;
 210:player.c      **** 
 211:player.c      **** 		case 1:
 212:player.c      **** 			/* Skip Forward */
 213:player.c      **** 			player_flags.SkipFwd = 1;
 214:player.c      **** 			break;
 215:player.c      **** 
 216:player.c      **** 		case 2:
 217:player.c      **** 			/* Increase Skip Interval */
 218:player.c      **** 			if(player_skip_idx < PLAYER_NUM_INTERVALS - 1)
 219:player.c      **** 			{
 220:player.c      **** 				++player_skip_idx;
 221:player.c      **** 				player_render_interval();
 222:player.c      **** 			}
 223:player.c      **** 			break;
 224:player.c      **** 
 225:player.c      **** 		case 3:
 226:player.c      **** 			player_flags.Rewind = 1;
 227:player.c      **** 			break;
 228:player.c      **** 
 229:player.c      **** 		/* Row 2 */
 230:player.c      **** 		case 4:
 231:player.c      **** 			/* Exit */
 232:player.c      **** 			player_flags.Exit = 1;
 233:player.c      **** 			break;
 234:player.c      **** 
 235:player.c      **** 		case 5:
 236:player.c      **** 			/* Skip Backward */
 237:player.c      **** 			player_flags.SkipBwd = 1;
 238:player.c      **** 			break;
 239:player.c      **** 
 240:player.c      **** 		case 6:
 241:player.c      **** 			/* Decrease Skip Interval */
 242:player.c      **** 			if(player_skip_idx > 0)
 243:player.c      **** 			{
 244:player.c      **** 				--player_skip_idx;
 245:player.c      **** 				player_render_interval();
 246:player.c      **** 			}
 247:player.c      **** 			break;
 248:player.c      **** 	}
 249:player.c      **** }
 250:player.c      **** 
 251:player.c      **** static void player_render_pause(void)
 252:player.c      **** {
 1163               		.loc 5 252 1 is_stmt 1 view -0
 1164               		.cfi_startproc
 1165               	/* prologue: function */
 1166               	/* frame size = 0 */
 1167               	/* stack size = 0 */
 1168               	.L__stack_usage = 0
 253:player.c      **** 	lcd_cursor(0, 0);
 1169               		.loc 5 253 2 view .LVU288
 1170 0378 80E8      		ldi r24,lo8(-128)
 1171 037a 0E94 0000 		call lcd_command
 1172               	.LVL92:
 254:player.c      **** 	lcd_char(player_flags.Paused ? LCD_CHAR_PAUSE : LCD_CHAR_PLAY);
 1173               		.loc 5 254 2 view .LVU289
 1174 037e 8091 0000 		lds r24,player_flags
 1175 0382 8695      		lsr r24
 1176 0384 8170      		andi r24,1
 1177 0386 0C94 0000 		jmp lcd_data
 1178               	.LVL93:
 1179               		.cfi_endproc
 1180               	.LFE54:
 1183               	player_render_interval:
 1184               	.LFB57:
 255:player.c      **** }
 256:player.c      **** 
 257:player.c      **** static void player_render_name(const char *name)
 258:player.c      **** {
 259:player.c      **** 	const char *s;
 260:player.c      **** 	char c;
 261:player.c      **** 	lcd_cursor(2, 0);
 262:player.c      **** 
 263:player.c      **** 	for(s = name; (c = *s); ++s)
 264:player.c      **** 	{
 265:player.c      **** 		if(c == '/')
 266:player.c      **** 		{
 267:player.c      **** 			name = s + 1;
 268:player.c      **** 		}
 269:player.c      **** 	}
 270:player.c      **** 
 271:player.c      **** 	for(; (c = *name) && c != '.'; ++name)
 272:player.c      **** 	{
 273:player.c      **** 		lcd_char(c);
 274:player.c      **** 	}
 275:player.c      **** }
 276:player.c      **** 
 277:player.c      **** static void player_render_plus_minus(void)
 278:player.c      **** {
 279:player.c      **** 	lcd_cursor(12, 0);
 280:player.c      **** 	lcd_char(LCD_CHAR_PLUS_MINUS);
 281:player.c      **** }
 282:player.c      **** 
 283:player.c      **** static void player_render_interval(void)
 284:player.c      **** {
 1185               		.loc 5 284 1 view -0
 1186               		.cfi_startproc
 1187 038a CF93      		push r28
 1188               	.LCFI37:
 1189               		.cfi_def_cfa_offset 3
 1190               		.cfi_offset 28, -2
 1191 038c DF93      		push r29
 1192               	.LCFI38:
 1193               		.cfi_def_cfa_offset 4
 1194               		.cfi_offset 29, -3
 1195               	/* prologue: function */
 1196               	/* frame size = 0 */
 1197               	/* stack size = 2 */
 1198               	.L__stack_usage = 2
 285:player.c      **** 	const char *s = player_skip_interval_str + 3 * player_skip_idx;
 1199               		.loc 5 285 2 view .LVU291
 1200               		.loc 5 285 47 is_stmt 0 view .LVU292
 1201 038e C091 0000 		lds r28,player_skip_idx
 1202 0392 83E0      		ldi r24,lo8(3)
 1203 0394 C89F      		mul r28,r24
 1204 0396 E001      		movw r28,r0
 1205 0398 1124      		clr __zero_reg__
 1206               		.loc 5 285 14 view .LVU293
 1207 039a C050      		subi r28,lo8(-(player_skip_interval_str))
 1208 039c D040      		sbci r29,hi8(-(player_skip_interval_str))
 1209               	.LVL94:
 286:player.c      **** 	lcd_cursor(13, 0);
 1210               		.loc 5 286 2 is_stmt 1 view .LVU294
 1211 039e 8DE8      		ldi r24,lo8(-115)
 1212 03a0 0E94 0000 		call lcd_command
 1213               	.LVL95:
 287:player.c      **** 	lcd_char(pgm_read_byte(s));
 1214               		.loc 5 287 2 view .LVU295
 1215               	.LBB61:
 1216               		.loc 5 287 2 view .LVU296
 1217               		.loc 5 287 2 view .LVU297
 1218               		.loc 5 287 2 view .LVU298
 1219 03a4 FE01      		movw r30,r28
 1220               	/* #APP */
 1221               	 ;  287 "player.c" 1
 1222 03a6 8491      		lpm r24, Z
 1223               		
 1224               	 ;  0 "" 2
 1225               	.LVL96:
 1226               		.loc 5 287 2 view .LVU299
 1227               	/* #NOAPP */
 1228               	.LBE61:
 1229 03a8 0E94 0000 		call lcd_data
 1230               	.LVL97:
 288:player.c      **** 	lcd_char(pgm_read_byte(s + 1));
 1231               		.loc 5 288 2 view .LVU300
 1232               	.LBB62:
 1233               		.loc 5 288 2 view .LVU301
 1234               		.loc 5 288 2 view .LVU302
 1235               		.loc 5 288 2 view .LVU303
 1236 03ac FE01      		movw r30,r28
 1237 03ae 3196      		adiw r30,1
 1238               	.LVL98:
 1239               		.loc 5 288 2 is_stmt 0 view .LVU304
 1240               	/* #APP */
 1241               	 ;  288 "player.c" 1
 1242 03b0 8491      		lpm r24, Z
 1243               		
 1244               	 ;  0 "" 2
 1245               	.LVL99:
 1246               		.loc 5 288 2 is_stmt 1 view .LVU305
 1247               	/* #NOAPP */
 1248               	.LBE62:
 1249 03b2 0E94 0000 		call lcd_data
 1250               	.LVL100:
 289:player.c      **** 	lcd_char(pgm_read_byte(s + 2));
 1251               		.loc 5 289 2 view .LVU306
 1252               	.LBB63:
 1253               		.loc 5 289 2 view .LVU307
 1254               		.loc 5 289 2 view .LVU308
 1255               		.loc 5 289 2 view .LVU309
 1256 03b6 FE01      		movw r30,r28
 1257 03b8 3296      		adiw r30,2
 1258               	.LVL101:
 1259               		.loc 5 289 2 is_stmt 0 view .LVU310
 1260               	/* #APP */
 1261               	 ;  289 "player.c" 1
 1262 03ba 8491      		lpm r24, Z
 1263               		
 1264               	 ;  0 "" 2
 1265               	.LVL102:
 1266               		.loc 5 289 2 is_stmt 1 view .LVU311
 1267               	/* #NOAPP */
 1268               	/* epilogue start */
 1269               	.LBE63:
 290:player.c      **** }
 1270               		.loc 5 290 1 is_stmt 0 view .LVU312
 1271 03bc DF91      		pop r29
 1272 03be CF91      		pop r28
 1273               	.LVL103:
 289:player.c      **** 	lcd_char(pgm_read_byte(s + 2));
 1274               		.loc 5 289 2 view .LVU313
 1275 03c0 0C94 0000 		jmp lcd_data
 1276               	.LVL104:
 289:player.c      **** 	lcd_char(pgm_read_byte(s + 2));
 1277               		.loc 5 289 2 view .LVU314
 1278               		.cfi_endproc
 1279               	.LFE57:
 1282               	player_event:
 1283               	.LVL105:
 1284               	.LFB53:
 191:player.c      **** 	switch(button)
 1285               		.loc 5 191 1 is_stmt 1 view -0
 1286               		.cfi_startproc
 1287               	/* prologue: function */
 1288               	/* frame size = 0 */
 1289               	/* stack size = 0 */
 1290               	.L__stack_usage = 0
 192:player.c      **** 	{
 1291               		.loc 5 192 2 view .LVU316
 1292 03c4 8730      		cpi r24,lo8(7)
 1293 03c6 00F4      		brsh .L57
 1294 03c8 E82F      		mov r30,r24
 1295 03ca F0E0      		ldi r31,0
 1296 03cc E050      		subi r30,lo8(-(gs(.L60)))
 1297 03ce F040      		sbci r31,hi8(-(gs(.L60)))
 1298 03d0 0C94 0000 		jmp __tablejump2__
 1299               		.section	.jumptables.gcc.player_event,"a",@progbits
 1300               		.p2align	1
 1301               	.L60:
 1302 0000 0000      		.word gs(.L66)
 1303 0002 0000      		.word gs(.L65)
 1304 0004 0000      		.word gs(.L64)
 1305 0006 0000      		.word gs(.L63)
 1306 0008 0000      		.word gs(.L62)
 1307 000a 0000      		.word gs(.L61)
 1308 000c 0000      		.word gs(.L59)
 1309               		.text
 1310               	.L66:
 197:player.c      **** 			{
 1311               		.loc 5 197 4 view .LVU317
 197:player.c      **** 			{
 1312               		.loc 5 197 7 is_stmt 0 view .LVU318
 1313 03d4 8091 0000 		lds r24,player_flags
 1314               	.LVL106:
 197:player.c      **** 			{
 1315               		.loc 5 197 6 view .LVU319
 1316 03d8 81FF      		sbrs r24,1
 1317 03da 00C0      		rjmp .L67
 199:player.c      **** 				player_render_pause();
 1318               		.loc 5 199 5 is_stmt 1 view .LVU320
 199:player.c      **** 				player_render_pause();
 1319               		.loc 5 199 25 is_stmt 0 view .LVU321
 1320 03dc 8D7F      		andi r24,lo8(~(1<<1))
 1321 03de 8093 0000 		sts player_flags,r24
 200:player.c      **** 				player_audio_start();
 1322               		.loc 5 200 5 is_stmt 1 view .LVU322
 1323 03e2 0E94 0000 		call player_render_pause
 1324               	.LVL107:
 201:player.c      **** 			}
 1325               		.loc 5 201 5 view .LVU323
 1326 03e6 0C94 0000 		jmp player_audio_start
 1327               	.LVL108:
 1328               	.L67:
 205:player.c      **** 				player_render_pause();
 1329               		.loc 5 205 5 view .LVU324
 205:player.c      **** 				player_render_pause();
 1330               		.loc 5 205 25 is_stmt 0 view .LVU325
 1331 03ea 8260      		ori r24,lo8(1<<1)
 1332 03ec 8093 0000 		sts player_flags,r24
 206:player.c      **** 				player_audio_stop();
 1333               		.loc 5 206 5 is_stmt 1 view .LVU326
 1334 03f0 0E94 0000 		call player_render_pause
 1335               	.LVL109:
 207:player.c      **** 			}
 1336               		.loc 5 207 5 view .LVU327
 1337 03f4 0C94 0000 		jmp player_audio_stop
 1338               	.LVL110:
 1339               	.L65:
 213:player.c      **** 			break;
 1340               		.loc 5 213 4 view .LVU328
 213:player.c      **** 			break;
 1341               		.loc 5 213 25 is_stmt 0 view .LVU329
 1342 03f8 8091 0000 		lds r24,player_flags
 1343               	.LVL111:
 213:player.c      **** 			break;
 1344               		.loc 5 213 25 view .LVU330
 1345 03fc 8860      		ori r24,lo8(1<<3)
 1346               	.L72:
 237:player.c      **** 			break;
 1347               		.loc 5 237 25 view .LVU331
 1348 03fe 8093 0000 		sts player_flags,r24
 238:player.c      **** 
 1349               		.loc 5 238 4 is_stmt 1 view .LVU332
 1350 0402 0895      		ret
 1351               	.LVL112:
 1352               	.L64:
 218:player.c      **** 			{
 1353               		.loc 5 218 4 view .LVU333
 218:player.c      **** 			{
 1354               		.loc 5 218 23 is_stmt 0 view .LVU334
 1355 0404 8091 0000 		lds r24,player_skip_idx
 1356               	.LVL113:
 218:player.c      **** 			{
 1357               		.loc 5 218 6 view .LVU335
 1358 0408 8530      		cpi r24,lo8(5)
 1359 040a 00F4      		brsh .L57
 220:player.c      **** 				player_render_interval();
 1360               		.loc 5 220 5 is_stmt 1 view .LVU336
 1361 040c 8F5F      		subi r24,lo8(-(1))
 1362               	.L71:
 244:player.c      **** 				player_render_interval();
 1363               		.loc 5 244 5 is_stmt 0 view .LVU337
 1364 040e 8093 0000 		sts player_skip_idx,r24
 245:player.c      **** 			}
 1365               		.loc 5 245 5 is_stmt 1 view .LVU338
 1366 0412 0C94 0000 		jmp player_render_interval
 1367               	.LVL114:
 1368               	.L63:
 226:player.c      **** 			break;
 1369               		.loc 5 226 4 view .LVU339
 226:player.c      **** 			break;
 1370               		.loc 5 226 24 is_stmt 0 view .LVU340
 1371 0416 8091 0000 		lds r24,player_flags
 1372               	.LVL115:
 226:player.c      **** 			break;
 1373               		.loc 5 226 24 view .LVU341
 1374 041a 8460      		ori r24,lo8(1<<2)
 1375 041c 00C0      		rjmp .L72
 1376               	.LVL116:
 1377               	.L62:
 232:player.c      **** 			break;
 1378               		.loc 5 232 4 is_stmt 1 view .LVU342
 232:player.c      **** 			break;
 1379               		.loc 5 232 22 is_stmt 0 view .LVU343
 1380 041e 8091 0000 		lds r24,player_flags
 1381               	.LVL117:
 232:player.c      **** 			break;
 1382               		.loc 5 232 22 view .LVU344
 1383 0422 8160      		ori r24,lo8(1<<0)
 1384 0424 00C0      		rjmp .L72
 1385               	.LVL118:
 1386               	.L61:
 237:player.c      **** 			break;
 1387               		.loc 5 237 4 is_stmt 1 view .LVU345
 237:player.c      **** 			break;
 1388               		.loc 5 237 25 is_stmt 0 view .LVU346
 1389 0426 8091 0000 		lds r24,player_flags
 1390               	.LVL119:
 237:player.c      **** 			break;
 1391               		.loc 5 237 25 view .LVU347
 1392 042a 8061      		ori r24,lo8(1<<4)
 1393 042c 00C0      		rjmp .L72
 1394               	.LVL120:
 1395               	.L59:
 242:player.c      **** 			{
 1396               		.loc 5 242 4 is_stmt 1 view .LVU348
 242:player.c      **** 			{
 1397               		.loc 5 242 23 is_stmt 0 view .LVU349
 1398 042e 8091 0000 		lds r24,player_skip_idx
 1399               	.LVL121:
 242:player.c      **** 			{
 1400               		.loc 5 242 6 view .LVU350
 1401 0432 8823      		tst r24
 1402 0434 01F0      		breq .L57
 244:player.c      **** 				player_render_interval();
 1403               		.loc 5 244 5 is_stmt 1 view .LVU351
 1404 0436 8150      		subi r24,lo8(-(-1))
 1405 0438 00C0      		rjmp .L71
 1406               	.L57:
 1407               	/* epilogue start */
 249:player.c      **** 
 1408               		.loc 5 249 1 is_stmt 0 view .LVU352
 1409 043a 0895      		ret
 1410               		.cfi_endproc
 1411               	.LFE53:
 1413               		.section	.rodata.str1.1,"aMS",@progbits,1
 1414               	.LC0:
 1415 0000 4449 5200 		.string	"DIR"
 1416               		.text
 1418               	dir_out_file:
 1419               	.LVL122:
 1420               	.LFB68:
  35:dir.c         **** 
  36:dir.c         **** static void dir_out_file(uint8_t line)
  37:dir.c         **** {
 1421               		.loc 6 37 1 is_stmt 1 view -0
 1422               		.cfi_startproc
 1423               		.loc 6 37 1 is_stmt 0 view .LVU354
 1424 043c CF92      		push r12
 1425               	.LCFI39:
 1426               		.cfi_def_cfa_offset 3
 1427               		.cfi_offset 12, -2
 1428 043e DF92      		push r13
 1429               	.LCFI40:
 1430               		.cfi_def_cfa_offset 4
 1431               		.cfi_offset 13, -3
 1432 0440 EF92      		push r14
 1433               	.LCFI41:
 1434               		.cfi_def_cfa_offset 5
 1435               		.cfi_offset 14, -4
 1436 0442 FF92      		push r15
 1437               	.LCFI42:
 1438               		.cfi_def_cfa_offset 6
 1439               		.cfi_offset 15, -5
 1440 0444 0F93      		push r16
 1441               	.LCFI43:
 1442               		.cfi_def_cfa_offset 7
 1443               		.cfi_offset 16, -6
 1444 0446 1F93      		push r17
 1445               	.LCFI44:
 1446               		.cfi_def_cfa_offset 8
 1447               		.cfi_offset 17, -7
 1448 0448 CF93      		push r28
 1449               	.LCFI45:
 1450               		.cfi_def_cfa_offset 9
 1451               		.cfi_offset 28, -8
 1452 044a DF93      		push r29
 1453               	.LCFI46:
 1454               		.cfi_def_cfa_offset 10
 1455               		.cfi_offset 29, -9
 1456               	/* prologue: function */
 1457               	/* frame size = 0 */
 1458               	/* stack size = 8 */
 1459               	.L__stack_usage = 8
 1460 044c C82F      		mov r28,r24
  38:dir.c         **** 	char *s, c;
 1461               		.loc 6 38 2 is_stmt 1 view .LVU355
  39:dir.c         **** 	lcd_cursor(2, line);
 1462               		.loc 6 39 2 view .LVU356
 1463 044e 82E8      		ldi r24,lo8(-126)
 1464               	.LVL123:
 1465               		.loc 6 39 2 is_stmt 0 view .LVU357
 1466 0450 C111      		cpse r28,__zero_reg__
 1467 0452 82EC      		ldi r24,lo8(-62)
 1468               	.L74:
 1469               		.loc 6 39 2 discriminator 4 view .LVU358
 1470 0454 0E94 0000 		call lcd_command
 1471               	.LVL124:
  40:dir.c         **** 	s = dirent[line].name;
 1472               		.loc 6 40 2 is_stmt 1 discriminator 4 view .LVU359
 1473               		.loc 6 40 18 is_stmt 0 discriminator 4 view .LVU360
 1474 0458 CC2E      		mov r12,r28
 1475 045a D12C      		mov r13,__zero_reg__
 1476               	.LVL125:
  41:dir.c         **** 	for(; (c = *s) && c != '.'; ++s)
 1477               		.loc 6 41 2 is_stmt 1 discriminator 4 view .LVU361
  40:dir.c         **** 	s = dirent[line].name;
 1478               		.loc 6 40 4 is_stmt 0 discriminator 4 view .LVU362
 1479 045c 82E1      		ldi r24,lo8(18)
 1480 045e C89F      		mul r28,r24
 1481 0460 8001      		movw r16,r0
 1482 0462 1124      		clr __zero_reg__
 1483 0464 0050      		subi r16,lo8(-(dirent+5))
 1484 0466 1040      		sbci r17,hi8(-(dirent+5))
 1485               	.LVL126:
 1486               	.L75:
  40:dir.c         **** 	s = dirent[line].name;
 1487               		.loc 6 40 4 discriminator 4 view .LVU363
 1488 0468 7801      		movw r14,r16
 1489               	.LVL127:
 1490               		.loc 6 41 8 is_stmt 1 discriminator 1 view .LVU364
 1491               		.loc 6 41 11 is_stmt 0 discriminator 1 view .LVU365
 1492 046a F801      		movw r30,r16
 1493 046c 8191      		ld r24,Z+
 1494 046e 8F01      		movw r16,r30
 1495               	.LVL128:
 1496               		.loc 6 41 2 discriminator 1 view .LVU366
 1497 0470 8111      		cpse r24,__zero_reg__
 1498 0472 00C0      		rjmp .L76
 1499               	.L80:
  42:dir.c         **** 	{
  43:dir.c         **** 		lcd_char(c);
  44:dir.c         **** 	}
  45:dir.c         **** 
  46:dir.c         **** 	lcd_cursor(13, line);
 1500               		.loc 6 46 2 is_stmt 1 view .LVU367
 1501 0474 8DEC      		ldi r24,lo8(-51)
 1502               	.LVL129:
 1503               		.loc 6 46 2 is_stmt 0 view .LVU368
 1504 0476 C111      		cpse r28,__zero_reg__
 1505 0478 00C0      		rjmp .L77
 1506 047a 8DE8      		ldi r24,lo8(-115)
 1507               	.L77:
 1508               		.loc 6 46 2 discriminator 4 view .LVU369
 1509 047c 0E94 0000 		call lcd_command
 1510               	.LVL130:
  47:dir.c         **** 	if(dirent[line].type & AM_DIR)
 1511               		.loc 6 47 2 is_stmt 1 discriminator 4 view .LVU370
 1512               		.loc 6 47 17 is_stmt 0 discriminator 4 view .LVU371
 1513 0480 82E1      		ldi r24,lo8(18)
 1514 0482 8C9D      		mul r24,r12
 1515 0484 F001      		movw r30,r0
 1516 0486 8D9D      		mul r24,r13
 1517 0488 F00D      		add r31,r0
 1518 048a 1124      		clr __zero_reg__
 1519 048c E050      		subi r30,lo8(-(dirent))
 1520 048e F040      		sbci r31,hi8(-(dirent))
 1521               		.loc 6 47 4 discriminator 4 view .LVU372
 1522 0490 8481      		ldd r24,Z+4
  48:dir.c         **** 	{
  49:dir.c         **** 		lcd_string("DIR");
  50:dir.c         **** 	}
  51:dir.c         **** 	else
  52:dir.c         **** 	{
  53:dir.c         **** 		for(++s; (c = *s); ++s)
 1523               		.loc 6 53 7 discriminator 4 view .LVU373
 1524 0492 E701      		movw r28,r14
 1525 0494 2196      		adiw r28,1
  47:dir.c         **** 	if(dirent[line].type & AM_DIR)
 1526               		.loc 6 47 4 discriminator 4 view .LVU374
 1527 0496 84FF      		sbrs r24,4
 1528 0498 00C0      		rjmp .L82
  49:dir.c         **** 	}
 1529               		.loc 6 49 3 is_stmt 1 view .LVU375
 1530 049a 80E0      		ldi r24,lo8(.LC0)
 1531 049c 90E0      		ldi r25,hi8(.LC0)
 1532               	/* epilogue start */
  54:dir.c         **** 		{
  55:dir.c         **** 			lcd_char(c);
  56:dir.c         **** 		}
  57:dir.c         **** 	}
  58:dir.c         **** }
 1533               		.loc 6 58 1 is_stmt 0 view .LVU376
 1534 049e DF91      		pop r29
 1535 04a0 CF91      		pop r28
 1536 04a2 1F91      		pop r17
 1537 04a4 0F91      		pop r16
 1538 04a6 FF90      		pop r15
 1539 04a8 EF90      		pop r14
 1540               	.LVL131:
 1541               		.loc 6 58 1 view .LVU377
 1542 04aa DF90      		pop r13
 1543 04ac CF90      		pop r12
 1544               	.LVL132:
  49:dir.c         **** 	}
 1545               		.loc 6 49 3 view .LVU378
 1546 04ae 0C94 0000 		jmp lcd_string
 1547               	.LVL133:
 1548               	.L76:
  41:dir.c         **** 	{
 1549               		.loc 6 41 17 discriminator 2 view .LVU379
 1550 04b2 8E32      		cpi r24,lo8(46)
 1551 04b4 01F0      		breq .L80
  43:dir.c         **** 	}
 1552               		.loc 6 43 3 is_stmt 1 discriminator 3 view .LVU380
 1553 04b6 0E94 0000 		call lcd_data
 1554               	.LVL134:
  41:dir.c         **** 	{
 1555               		.loc 6 41 30 discriminator 3 view .LVU381
  41:dir.c         **** 	{
 1556               		.loc 6 41 30 is_stmt 0 discriminator 3 view .LVU382
 1557 04ba 00C0      		rjmp .L75
 1558               	.LVL135:
 1559               	.L83:
  55:dir.c         **** 		}
 1560               		.loc 6 55 4 is_stmt 1 discriminator 3 view .LVU383
 1561 04bc 0E94 0000 		call lcd_data
 1562               	.LVL136:
  53:dir.c         **** 		{
 1563               		.loc 6 53 22 discriminator 3 view .LVU384
 1564               	.L82:
  53:dir.c         **** 		{
 1565               		.loc 6 53 12 discriminator 1 view .LVU385
  53:dir.c         **** 		{
 1566               		.loc 6 53 15 is_stmt 0 discriminator 1 view .LVU386
 1567 04c0 8991      		ld r24,Y+
 1568               	.LVL137:
  53:dir.c         **** 		{
 1569               		.loc 6 53 3 discriminator 1 view .LVU387
 1570 04c2 8111      		cpse r24,__zero_reg__
 1571 04c4 00C0      		rjmp .L83
 1572               	/* epilogue start */
 1573               		.loc 6 58 1 view .LVU388
 1574 04c6 DF91      		pop r29
 1575 04c8 CF91      		pop r28
 1576               	.LVL138:
 1577               		.loc 6 58 1 view .LVU389
 1578 04ca 1F91      		pop r17
 1579 04cc 0F91      		pop r16
 1580 04ce FF90      		pop r15
 1581 04d0 EF90      		pop r14
 1582 04d2 DF90      		pop r13
 1583 04d4 CF90      		pop r12
 1584               	.LVL139:
 1585               		.loc 6 58 1 view .LVU390
 1586 04d6 0895      		ret
 1587               		.cfi_endproc
 1588               	.LFE68:
 1591               	lcd_clear:
 1592               	.LFB15:
 142:lcd.c         **** 	lcd_command(LCD_CLEAR_DISPLAY);
 1593               		.loc 7 142 1 is_stmt 1 view -0
 1594               		.cfi_startproc
 1595               	/* prologue: function */
 1596               	/* frame size = 0 */
 1597               	/* stack size = 0 */
 1598               	.L__stack_usage = 0
 143:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_CLEAR);
 1599               		.loc 7 143 2 view .LVU392
 1600 04d8 81E0      		ldi r24,lo8(1)
 1601 04da 0E94 0000 		call lcd_command
 1602               	.LVL140:
 144:lcd.c         **** }
 1603               		.loc 7 144 2 view .LVU393
 1604               	.LBB64:
 1605               	.LBI64:
 166:/usr/avr/include/util/delay.h **** {
 1606               		.loc 8 166 1 view .LVU394
 1607               	.LBB65:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1608               		.loc 8 168 2 view .LVU395
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1609               		.loc 8 172 2 view .LVU396
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1610               		.loc 8 173 2 view .LVU397
 174:/usr/avr/include/util/delay.h **** 
 1611               		.loc 8 174 2 view .LVU398
 184:/usr/avr/include/util/delay.h **** 	#endif
 1612               		.loc 8 184 3 view .LVU399
 187:/usr/avr/include/util/delay.h **** 
 1613               		.loc 8 187 2 view .LVU400
 1614 04de 8FE3      		ldi r24,lo8(7999)
 1615 04e0 9FE1      		ldi r25,hi8(7999)
 1616 04e2 0197      	1:	sbiw r24,1
 1617 04e4 01F4      		brne 1b
 1618 04e6 00C0      		rjmp .
 1619 04e8 0000      		nop
 1620               	.LVL141:
 1621               	/* epilogue start */
 187:/usr/avr/include/util/delay.h **** 
 1622               		.loc 8 187 2 is_stmt 0 view .LVU401
 1623               	.LBE65:
 1624               	.LBE64:
 145:lcd.c         **** 
 1625               		.loc 7 145 1 view .LVU402
 1626 04ea 0895      		ret
 1627               		.cfi_endproc
 1628               	.LFE15:
 1631               	mode_error:
 1632               	.LVL142:
 1633               	.LFB65:
 1634               		.file 9 "error.c"
   1:error.c       **** /* Error Messages */
   2:error.c       **** static const char error_sd[] PROGMEM = "SD-Card Error";
   3:error.c       **** static const char error_fat[] PROGMEM = "FAT32 Error";
   4:error.c       **** static const char error_io[] PROGMEM = "I/O Error";
   5:error.c       **** 
   6:error.c       **** static void mode_error(const char *msg)
   7:error.c       **** {
 1635               		.loc 9 7 1 is_stmt 1 view -0
 1636               		.cfi_startproc
 1637               	/* prologue: function */
 1638               	/* frame size = 0 */
 1639               	/* stack size = 0 */
 1640               	.L__stack_usage = 0
 1641               		.loc 9 7 1 is_stmt 0 view .LVU404
 1642 04ec D82F      		mov r29,r24
 1643 04ee C92F      		mov r28,r25
   8:error.c       **** 	static const char notice[] PROGMEM = "Reset required";
 1644               		.loc 9 8 2 is_stmt 1 view .LVU405
   9:error.c       **** 	player_audio_stop();
 1645               		.loc 9 9 2 view .LVU406
 1646 04f0 0E94 0000 		call player_audio_stop
 1647               	.LVL143:
  10:error.c       **** 	lcd_clear();
 1648               		.loc 9 10 2 view .LVU407
 1649 04f4 0E94 0000 		call lcd_clear
 1650               	.LVL144:
  11:error.c       **** 
  12:error.c       **** 	/* First Line */
  13:error.c       **** 	lcd_string_P(msg);
 1651               		.loc 9 13 2 view .LVU408
 1652 04f8 8D2F      		mov r24,r29
 1653 04fa 9C2F      		mov r25,r28
 1654 04fc 0E94 0000 		call lcd_string_P
 1655               	.LVL145:
  14:error.c       **** 
  15:error.c       **** 	/* Second Line */
  16:error.c       **** 	lcd_cursor(0, 1);
 1656               		.loc 9 16 2 view .LVU409
 1657 0500 80EC      		ldi r24,lo8(-64)
 1658 0502 0E94 0000 		call lcd_command
 1659               	.LVL146:
  17:error.c       **** 	lcd_string_P(notice);
 1660               		.loc 9 17 2 view .LVU410
 1661 0506 80E0      		ldi r24,lo8(notice.1)
 1662 0508 90E0      		ldi r25,hi8(notice.1)
 1663 050a 0E94 0000 		call lcd_string_P
 1664               	.LVL147:
 1665               	.L89:
  18:error.c       **** 	for(;;) ;
 1666               		.loc 9 18 2 discriminator 1 view .LVU411
 1667               		.loc 9 18 10 discriminator 1 view .LVU412
 1668               		.loc 9 18 7 discriminator 1 view .LVU413
 1669 050e 00C0      		rjmp .L89
 1670               		.cfi_endproc
 1671               	.LFE65:
 1674               	dir_render:
 1675               	.LFB69:
  59:dir.c         **** 
  60:dir.c         **** static void dir_render(void)
  61:dir.c         **** {
 1676               		.loc 6 61 1 view -0
 1677               		.cfi_startproc
 1678               	/* prologue: function */
 1679               	/* frame size = 0 */
 1680               	/* stack size = 0 */
 1681               	.L__stack_usage = 0
  62:dir.c         **** 	lcd_clear();
 1682               		.loc 6 62 2 view .LVU415
 1683 0510 0E94 0000 		call lcd_clear
 1684               	.LVL148:
  63:dir.c         **** 
  64:dir.c         **** 	/* Selected file */
  65:dir.c         **** 	lcd_cursor(0, dir_sel & 1);
 1685               		.loc 6 65 2 view .LVU416
 1686 0514 8091 0000 		lds r24,dir_sel
 1687 0518 20E4      		ldi r18,lo8(64)
 1688 051a 829F      		mul r24,r18
 1689 051c C001      		movw r24,r0
 1690 051e 1124      		clr __zero_reg__
 1691 0520 8074      		andi r24,lo8(64)
 1692 0522 8058      		subi r24,lo8(-(-128))
 1693 0524 0E94 0000 		call lcd_command
 1694               	.LVL149:
  66:dir.c         **** 	lcd_char('>');
 1695               		.loc 6 66 2 view .LVU417
 1696 0528 8EE3      		ldi r24,lo8(62)
 1697 052a 0E94 0000 		call lcd_data
 1698               	.LVL150:
  67:dir.c         **** 
  68:dir.c         **** 	/* Filenames */
  69:dir.c         **** 	dir_out_file(0);
 1699               		.loc 6 69 2 view .LVU418
 1700 052e 80E0      		ldi r24,0
 1701 0530 0E94 0000 		call dir_out_file
 1702               	.LVL151:
  70:dir.c         **** 	if(dir_sel != 2)
 1703               		.loc 6 70 2 view .LVU419
 1704               		.loc 6 70 4 is_stmt 0 view .LVU420
 1705 0534 8091 0000 		lds r24,dir_sel
 1706 0538 8230      		cpi r24,lo8(2)
 1707 053a 01F0      		breq .L90
  71:dir.c         **** 	{
  72:dir.c         **** 		dir_out_file(1);
 1708               		.loc 6 72 3 is_stmt 1 view .LVU421
 1709 053c 81E0      		ldi r24,lo8(1)
 1710 053e 0C94 0000 		jmp dir_out_file
 1711               	.LVL152:
 1712               	.L90:
 1713               	/* epilogue start */
  73:dir.c         **** 	}
  74:dir.c         **** }
 1714               		.loc 6 74 1 is_stmt 0 view .LVU422
 1715 0542 0895      		ret
 1716               		.cfi_endproc
 1717               	.LFE69:
 1720               	sd_read:
 1721               	.LVL153:
 1722               	.LFB29:
 105:sd.c          **** 
 106:sd.c          **** static uint8_t sd_init(void)
 107:sd.c          **** {
 108:sd.c          **** 	uint8_t response;
 109:sd.c          **** 	uint16_t i;
 110:sd.c          **** 	uint32_t arg;
 111:sd.c          **** 
 112:sd.c          **** 	CONF_SPI();
 113:sd.c          **** 	DESELECT();
 114:sd.c          **** 	SPCR = (0 << SPIE) | (1 << SPE)  | (0 << DORD) | (1 << MSTR) |
 115:sd.c          **** 		(0 << CPOL) | (0 << CPHA) | (1 << SPR1) | (1 << SPR0);
 116:sd.c          **** 	SPSR &= ~(1 << SPI2X);
 117:sd.c          **** 	_card_type = 0;
 118:sd.c          **** 	for(i = 0; i < 10; ++i)
 119:sd.c          **** 	{
 120:sd.c          **** 		_spi_xchg(0xFF);
 121:sd.c          **** 	}
 122:sd.c          **** 
 123:sd.c          **** 	SELECT();
 124:sd.c          **** 	for(i = 0; ; ++i)
 125:sd.c          **** 	{
 126:sd.c          **** 		if(_command(CMD_GO_IDLE_STATE, 0) == IDLE_STATE)
 127:sd.c          **** 		{
 128:sd.c          **** 			break;
 129:sd.c          **** 		}
 130:sd.c          **** 
 131:sd.c          **** 		if(i == 0x1ff)
 132:sd.c          **** 		{
 133:sd.c          **** 			DESELECT();
 134:sd.c          **** 			return 1;
 135:sd.c          **** 		}
 136:sd.c          **** 	}
 137:sd.c          **** 
 138:sd.c          **** 	if((_command(CMD_SEND_IF_COND, 0x1AA) & ILLEGAL_CMD) == 0)
 139:sd.c          **** 	{
 140:sd.c          **** 		_spi_xchg(0xFF);
 141:sd.c          **** 		_spi_xchg(0xFF);
 142:sd.c          **** 		if(((_spi_xchg(0xFF) & 0x01) == 0) ||
 143:sd.c          **** 			(_spi_xchg(0xFF) != 0xAA))
 144:sd.c          **** 		{
 145:sd.c          **** 			return 1;
 146:sd.c          **** 		}
 147:sd.c          **** 
 148:sd.c          **** 		_card_type |= SD_2;
 149:sd.c          **** 	}
 150:sd.c          **** 	else
 151:sd.c          **** 	{
 152:sd.c          **** 		_command(CMD_APP, 0);
 153:sd.c          **** 		if((_command(CMD_SD_SEND_OP_COND, 0) & ILLEGAL_CMD) == 0)
 154:sd.c          **** 		{
 155:sd.c          **** 			_card_type |= SD_1;
 156:sd.c          **** 		}
 157:sd.c          **** 	}
 158:sd.c          **** 
 159:sd.c          **** 	for(i = 0; ; ++i)
 160:sd.c          **** 	{
 161:sd.c          **** 		if(_card_type & (SD_1 | SD_2))
 162:sd.c          **** 		{
 163:sd.c          **** 			arg = 0;
 164:sd.c          **** 			if(_card_type & SD_2)
 165:sd.c          **** 			{
 166:sd.c          **** 				arg = 0x40000000;
 167:sd.c          **** 			}
 168:sd.c          **** 
 169:sd.c          **** 			_command(CMD_APP, 0);
 170:sd.c          **** 			response = _command(CMD_SD_SEND_OP_COND, arg);
 171:sd.c          **** 		}
 172:sd.c          **** 		else
 173:sd.c          **** 		{
 174:sd.c          **** 			response = _command(CMD_SEND_OP_COND, 0);
 175:sd.c          **** 		}
 176:sd.c          **** 
 177:sd.c          **** 		if((response & IDLE_STATE) == 0)
 178:sd.c          **** 		{
 179:sd.c          **** 			break;
 180:sd.c          **** 		}
 181:sd.c          **** 
 182:sd.c          **** 		if(i == 0x7FFF)
 183:sd.c          **** 		{
 184:sd.c          **** 			DESELECT();
 185:sd.c          **** 			return 1;
 186:sd.c          **** 		}
 187:sd.c          **** 	}
 188:sd.c          **** 
 189:sd.c          **** 	if(_card_type & SD_2)
 190:sd.c          **** 	{
 191:sd.c          **** 		if(_command(CMD_READ_OCR, 0))
 192:sd.c          **** 		{
 193:sd.c          **** 			DESELECT();
 194:sd.c          **** 			return 1;
 195:sd.c          **** 		}
 196:sd.c          **** 
 197:sd.c          **** 		if(_spi_xchg(0xFF) & 0x40)
 198:sd.c          **** 		{
 199:sd.c          **** 			_card_type |= SD_HC;
 200:sd.c          **** 		}
 201:sd.c          **** 
 202:sd.c          **** 		_spi_xchg(0xFF);
 203:sd.c          **** 		_spi_xchg(0xFF);
 204:sd.c          **** 		_spi_xchg(0xFF);
 205:sd.c          **** 	}
 206:sd.c          **** 
 207:sd.c          **** 	if(_command(CMD_SET_BLOCKLEN, 512))
 208:sd.c          **** 	{
 209:sd.c          **** 		DESELECT();
 210:sd.c          **** 		return 1;
 211:sd.c          **** 	}
 212:sd.c          **** 
 213:sd.c          **** 	DESELECT();
 214:sd.c          **** 	SPCR &= ~((1 << SPR1) | (1 << SPR0));
 215:sd.c          **** 	SPSR |= (1 << SPI2X);
 216:sd.c          **** 	_delay_ms(20);
 217:sd.c          **** 	return 0;
 218:sd.c          **** }
 219:sd.c          **** 
 220:sd.c          **** static uint8_t sd_read
 221:sd.c          **** 	(uint8_t *buffer, uint32_t block, uint16_t offset, uint16_t count)
 222:sd.c          **** {
 1723               		.loc 3 222 1 is_stmt 1 view -0
 1724               		.cfi_startproc
 1725               		.loc 3 222 1 is_stmt 0 view .LVU424
 1726 0544 AF92      		push r10
 1727               	.LCFI47:
 1728               		.cfi_def_cfa_offset 3
 1729               		.cfi_offset 10, -2
 1730 0546 BF92      		push r11
 1731               	.LCFI48:
 1732               		.cfi_def_cfa_offset 4
 1733               		.cfi_offset 11, -3
 1734 0548 CF92      		push r12
 1735               	.LCFI49:
 1736               		.cfi_def_cfa_offset 5
 1737               		.cfi_offset 12, -4
 1738 054a DF92      		push r13
 1739               	.LCFI50:
 1740               		.cfi_def_cfa_offset 6
 1741               		.cfi_offset 13, -5
 1742 054c EF92      		push r14
 1743               	.LCFI51:
 1744               		.cfi_def_cfa_offset 7
 1745               		.cfi_offset 14, -6
 1746 054e FF92      		push r15
 1747               	.LCFI52:
 1748               		.cfi_def_cfa_offset 8
 1749               		.cfi_offset 15, -7
 1750 0550 0F93      		push r16
 1751               	.LCFI53:
 1752               		.cfi_def_cfa_offset 9
 1753               		.cfi_offset 16, -8
 1754 0552 1F93      		push r17
 1755               	.LCFI54:
 1756               		.cfi_def_cfa_offset 10
 1757               		.cfi_offset 17, -9
 1758 0554 CF93      		push r28
 1759               	.LCFI55:
 1760               		.cfi_def_cfa_offset 11
 1761               		.cfi_offset 28, -10
 1762 0556 DF93      		push r29
 1763               	.LCFI56:
 1764               		.cfi_def_cfa_offset 12
 1765               		.cfi_offset 29, -11
 1766               	/* prologue: function */
 1767               	/* frame size = 0 */
 1768               	/* stack size = 10 */
 1769               	.L__stack_usage = 10
 1770 0558 B82E      		mov r11,r24
 1771 055a A92E      		mov r10,r25
 1772 055c E901      		movw r28,r18
 1773 055e 7801      		movw r14,r16
 223:sd.c          **** 	uint16_t i;
 1774               		.loc 3 223 2 is_stmt 1 view .LVU425
 224:sd.c          **** 	SELECT();
 1775               		.loc 3 224 2 view .LVU426
 1776 0560 2A98      		cbi 0x5,2
 225:sd.c          **** 	if(_command(CMD_READ_SINGLE_BLOCK,
 1777               		.loc 3 225 2 view .LVU427
 1778               		.loc 3 225 5 is_stmt 0 view .LVU428
 1779 0562 8091 0000 		lds r24,_card_type
 1780               	.LVL154:
 1781               		.loc 3 225 5 view .LVU429
 1782 0566 82FD      		sbrc r24,2
 1783 0568 00C0      		rjmp .L93
 1784               		.loc 3 225 5 discriminator 1 view .LVU430
 1785 056a 89E0      		ldi r24,9
 1786               		1:
 1787 056c 7695      		lsr r23
 1788 056e 6795      		ror r22
 1789 0570 5795      		ror r21
 1790 0572 4795      		ror r20
 1791 0574 8A95      		dec r24
 1792 0576 01F4      		brne 1b
 1793               	.LVL155:
 1794               	.L93:
 1795               		.loc 3 225 5 discriminator 4 view .LVU431
 1796 0578 81E1      		ldi r24,lo8(17)
 1797 057a 0E94 0000 		call _command
 1798               	.LVL156:
 1799               		.loc 3 225 5 discriminator 4 view .LVU432
 1800 057e 182F      		mov r17,r24
 1801               	.LBB68:
 1802               	.LBB69:
 226:sd.c          **** 		_card_type & SD_HC ? block : (block >> 9)))
 227:sd.c          **** 	{
 228:sd.c          **** 		DESELECT();
 229:sd.c          **** 		return 1;
 230:sd.c          **** 	}
 231:sd.c          **** 
 232:sd.c          **** 	for(i = 0; ; ++i)
 1803               		.loc 3 232 8 discriminator 4 view .LVU433
 1804 0580 D12C      		mov r13,__zero_reg__
 1805 0582 C12C      		mov r12,__zero_reg__
 1806               	.LBE69:
 1807               	.LBE68:
 225:sd.c          **** 	if(_command(CMD_READ_SINGLE_BLOCK,
 1808               		.loc 3 225 4 discriminator 4 view .LVU434
 1809 0584 8823      		tst r24
 1810 0586 01F0      		breq .L94
 1811               	.L105:
 1812               	.LBB72:
 1813               	.LBB70:
 233:sd.c          **** 	{
 234:sd.c          **** 		if(_spi_xchg(0xFF) == 0xFE)
 235:sd.c          **** 		{
 236:sd.c          **** 			break;
 237:sd.c          **** 		}
 238:sd.c          **** 
 239:sd.c          **** 		if(i == 0xFFFF)
 240:sd.c          **** 		{
 241:sd.c          **** 			DESELECT();
 1814               		.loc 3 241 4 is_stmt 1 view .LVU435
 1815 0588 2A9A      		sbi 0x5,2
 242:sd.c          **** 			return 1;
 1816               		.loc 3 242 4 view .LVU436
 1817               		.loc 3 242 11 is_stmt 0 view .LVU437
 1818 058a 11E0      		ldi r17,lo8(1)
 1819               	.LVL157:
 1820               	.L92:
 1821               		.loc 3 242 11 view .LVU438
 1822               	.LBE70:
 1823               	.LBE72:
 243:sd.c          **** 		}
 244:sd.c          **** 	}
 245:sd.c          **** 
 246:sd.c          **** 	for(i = 0; i < offset; ++i)
 247:sd.c          **** 	{
 248:sd.c          **** 		_spi_xchg(0xFF);
 249:sd.c          **** 	}
 250:sd.c          **** 
 251:sd.c          **** 	for(; i < offset + count; ++i)
 252:sd.c          **** 	{
 253:sd.c          **** 		*buffer++ = _spi_xchg(0xFF);
 254:sd.c          **** 	}
 255:sd.c          **** 
 256:sd.c          **** 	for(; i < 512; ++i)
 257:sd.c          **** 	{
 258:sd.c          **** 		_spi_xchg(0xFF);
 259:sd.c          **** 	}
 260:sd.c          **** 
 261:sd.c          **** 	_spi_xchg(0xFF);
 262:sd.c          **** 	_spi_xchg(0xFF);
 263:sd.c          **** 	DESELECT();
 264:sd.c          **** 	_spi_xchg(0xFF);
 265:sd.c          **** 	return 0;
 266:sd.c          **** }
 1824               		.loc 3 266 1 view .LVU439
 1825 058c 812F      		mov r24,r17
 1826               	/* epilogue start */
 1827 058e DF91      		pop r29
 1828 0590 CF91      		pop r28
 1829 0592 1F91      		pop r17
 1830 0594 0F91      		pop r16
 1831               	.LVL158:
 1832               		.loc 3 266 1 view .LVU440
 1833 0596 FF90      		pop r15
 1834 0598 EF90      		pop r14
 1835 059a DF90      		pop r13
 1836 059c CF90      		pop r12
 1837 059e BF90      		pop r11
 1838 05a0 AF90      		pop r10
 1839 05a2 0895      		ret
 1840               	.LVL159:
 1841               	.L94:
 1842               	.LBB73:
 1843               	.LBB71:
 234:sd.c          **** 		{
 1844               		.loc 3 234 3 is_stmt 1 view .LVU441
 234:sd.c          **** 		{
 1845               		.loc 3 234 6 is_stmt 0 view .LVU442
 1846 05a4 8FEF      		ldi r24,lo8(-1)
 1847 05a6 0E94 0000 		call _spi_xchg
 1848               	.LVL160:
 234:sd.c          **** 		{
 1849               		.loc 3 234 5 view .LVU443
 1850 05aa 8E3F      		cpi r24,lo8(-2)
 1851 05ac 01F0      		breq .L104
 239:sd.c          **** 		{
 1852               		.loc 3 239 3 is_stmt 1 view .LVU444
 239:sd.c          **** 		{
 1853               		.loc 3 239 5 is_stmt 0 view .LVU445
 1854 05ae 8FEF      		ldi r24,-1
 1855 05b0 C816      		cp r12,r24
 1856 05b2 D806      		cpc r13,r24
 1857 05b4 01F0      		breq .L105
 232:sd.c          **** 	{
 1858               		.loc 3 232 15 is_stmt 1 view .LVU446
 1859 05b6 EFEF      		ldi r30,-1
 1860 05b8 CE1A      		sub r12,r30
 1861 05ba DE0A      		sbc r13,r30
 1862               	.LVL161:
 232:sd.c          **** 	{
 1863               		.loc 3 232 13 view .LVU447
 234:sd.c          **** 		{
 1864               		.loc 3 234 5 is_stmt 0 view .LVU448
 1865 05bc 00C0      		rjmp .L94
 1866               	.L98:
 248:sd.c          **** 	}
 1867               		.loc 3 248 3 is_stmt 1 view .LVU449
 1868 05be 8FEF      		ldi r24,lo8(-1)
 1869 05c0 0E94 0000 		call _spi_xchg
 1870               	.LVL162:
 246:sd.c          **** 	{
 1871               		.loc 3 246 25 view .LVU450
 1872 05c4 FFEF      		ldi r31,-1
 1873 05c6 CF1A      		sub r12,r31
 1874 05c8 DF0A      		sbc r13,r31
 1875               	.LVL163:
 1876               	.L96:
 246:sd.c          **** 	{
 1877               		.loc 3 246 13 view .LVU451
 246:sd.c          **** 	{
 1878               		.loc 3 246 2 is_stmt 0 view .LVU452
 1879 05ca CC15      		cp r28,r12
 1880 05cc DD05      		cpc r29,r13
 1881 05ce 01F4      		brne .L98
 251:sd.c          **** 	{
 1882               		.loc 3 251 19 view .LVU453
 1883 05d0 EC0E      		add r14,r28
 1884 05d2 FD1E      		adc r15,r29
 1885               	.LVL164:
 1886               	.L99:
 251:sd.c          **** 	{
 1887               		.loc 3 251 8 is_stmt 1 view .LVU454
 251:sd.c          **** 	{
 1888               		.loc 3 251 2 is_stmt 0 view .LVU455
 1889 05d4 CE15      		cp r28,r14
 1890 05d6 DF05      		cpc r29,r15
 1891 05d8 00F0      		brlo .L100
 1892               	.L101:
 256:sd.c          **** 	{
 1893               		.loc 3 256 8 is_stmt 1 view .LVU456
 258:sd.c          **** 	}
 1894               		.loc 3 258 3 is_stmt 0 view .LVU457
 1895 05da 8FEF      		ldi r24,lo8(-1)
 256:sd.c          **** 	{
 1896               		.loc 3 256 2 view .LVU458
 1897 05dc C115      		cp r28,__zero_reg__
 1898 05de F2E0      		ldi r31,2
 1899 05e0 DF07      		cpc r29,r31
 1900 05e2 00F0      		brlo .L102
 261:sd.c          **** 	_spi_xchg(0xFF);
 1901               		.loc 3 261 2 is_stmt 1 view .LVU459
 1902 05e4 0E94 0000 		call _spi_xchg
 1903               	.LVL165:
 262:sd.c          **** 	DESELECT();
 1904               		.loc 3 262 2 view .LVU460
 1905 05e8 8FEF      		ldi r24,lo8(-1)
 1906 05ea 0E94 0000 		call _spi_xchg
 1907               	.LVL166:
 263:sd.c          **** 	_spi_xchg(0xFF);
 1908               		.loc 3 263 2 view .LVU461
 1909 05ee 2A9A      		sbi 0x5,2
 264:sd.c          **** 	return 0;
 1910               		.loc 3 264 2 view .LVU462
 1911 05f0 8FEF      		ldi r24,lo8(-1)
 1912 05f2 0E94 0000 		call _spi_xchg
 1913               	.LVL167:
 265:sd.c          **** }
 1914               		.loc 3 265 2 view .LVU463
 265:sd.c          **** }
 1915               		.loc 3 265 9 is_stmt 0 view .LVU464
 1916 05f6 00C0      		rjmp .L92
 1917               	.LVL168:
 1918               	.L104:
 246:sd.c          **** 	{
 1919               		.loc 3 246 8 view .LVU465
 1920 05f8 D12C      		mov r13,__zero_reg__
 1921 05fa C12C      		mov r12,__zero_reg__
 1922               	.LVL169:
 246:sd.c          **** 	{
 1923               		.loc 3 246 8 view .LVU466
 1924 05fc 00C0      		rjmp .L96
 1925               	.LVL170:
 1926               	.L100:
 253:sd.c          **** 	}
 1927               		.loc 3 253 3 is_stmt 1 view .LVU467
 253:sd.c          **** 	}
 1928               		.loc 3 253 10 is_stmt 0 view .LVU468
 1929 05fe CB2C      		mov r12,r11
 1930 0600 DA2C      		mov r13,r10
 1931               	.LVL171:
 253:sd.c          **** 	}
 1932               		.loc 3 253 15 view .LVU469
 1933 0602 8FEF      		ldi r24,lo8(-1)
 1934 0604 0E94 0000 		call _spi_xchg
 1935               	.LVL172:
 253:sd.c          **** 	}
 1936               		.loc 3 253 13 view .LVU470
 1937 0608 F601      		movw r30,r12
 1938 060a 8193      		st Z+,r24
 1939               	.LVL173:
 253:sd.c          **** 	}
 1940               		.loc 3 253 13 view .LVU471
 1941 060c 6F01      		movw r12,r30
 251:sd.c          **** 	{
 1942               		.loc 3 251 28 is_stmt 1 view .LVU472
 1943 060e 2196      		adiw r28,1
 1944               	.LVL174:
 253:sd.c          **** 	}
 1945               		.loc 3 253 10 is_stmt 0 view .LVU473
 1946 0610 BE2E      		mov r11,r30
 1947 0612 AD2C      		mov r10,r13
 1948 0614 00C0      		rjmp .L99
 1949               	.LVL175:
 1950               	.L102:
 258:sd.c          **** 	}
 1951               		.loc 3 258 3 is_stmt 1 view .LVU474
 1952 0616 0E94 0000 		call _spi_xchg
 1953               	.LVL176:
 256:sd.c          **** 	{
 1954               		.loc 3 256 17 view .LVU475
 1955 061a 2196      		adiw r28,1
 1956               	.LVL177:
 256:sd.c          **** 	{
 1957               		.loc 3 256 17 is_stmt 0 view .LVU476
 1958 061c 00C0      		rjmp .L101
 1959               	.LBE71:
 1960               	.LBE73:
 1961               		.cfi_endproc
 1962               	.LFE29:
 1965               	get_fat:
 1966               	.LVL178:
 1967               	.LFB30:
  56:fat.c         **** 	uint8_t buf[4];
 1968               		.loc 4 56 1 is_stmt 1 view -0
 1969               		.cfi_startproc
  56:fat.c         **** 	uint8_t buf[4];
 1970               		.loc 4 56 1 is_stmt 0 view .LVU478
 1971 061e 0F93      		push r16
 1972               	.LCFI57:
 1973               		.cfi_def_cfa_offset 3
 1974               		.cfi_offset 16, -2
 1975 0620 1F93      		push r17
 1976               	.LCFI58:
 1977               		.cfi_def_cfa_offset 4
 1978               		.cfi_offset 17, -3
 1979 0622 CF93      		push r28
 1980               	.LCFI59:
 1981               		.cfi_def_cfa_offset 5
 1982               		.cfi_offset 28, -4
 1983 0624 DF93      		push r29
 1984               	.LCFI60:
 1985               		.cfi_def_cfa_offset 6
 1986               		.cfi_offset 29, -5
 1987 0626 CDB7      		in r28,__SP_L__
 1988 0628 DEB7      		in r29,__SP_H__
 1989               	.LCFI61:
 1990               		.cfi_def_cfa_register 28
 1991 062a 2897      		sbiw r28,8
 1992               	.LCFI62:
 1993               		.cfi_def_cfa_offset 14
 1994 062c 0FB6      		in __tmp_reg__,__SREG__
 1995 062e F894      		cli
 1996 0630 DEBF      		out __SP_H__,r29
 1997 0632 0FBE      		out __SREG__,__tmp_reg__
 1998 0634 CDBF      		out __SP_L__,r28
 1999               	/* prologue: function */
 2000               	/* frame size = 8 */
 2001               	/* stack size = 12 */
 2002               	.L__stack_usage = 12
 2003 0636 462F      		mov r20,r22
 2004 0638 572F      		mov r21,r23
 2005 063a BC01      		movw r22,r24
 2006               	.LVL179:
  57:fat.c         **** 	if(cluster < 2 || cluster >= _fs.n_fatent)
 2007               		.loc 4 57 2 is_stmt 1 view .LVU479
  58:fat.c         **** 	{
 2008               		.loc 4 58 2 view .LVU480
  58:fat.c         **** 	{
 2009               		.loc 4 58 4 is_stmt 0 view .LVU481
 2010 063c 4230      		cpi r20,2
 2011 063e 5105      		cpc r21,__zero_reg__
 2012 0640 6105      		cpc r22,__zero_reg__
 2013 0642 7105      		cpc r23,__zero_reg__
 2014 0644 00F4      		brsh .+2
 2015 0646 00C0      		rjmp .L110
  58:fat.c         **** 	{
 2016               		.loc 4 58 17 discriminator 1 view .LVU482
 2017 0648 8091 0000 		lds r24,_fs+3
 2018 064c 9091 0000 		lds r25,_fs+3+1
 2019 0650 A091 0000 		lds r26,_fs+3+2
 2020 0654 B091 0000 		lds r27,_fs+3+3
 2021 0658 4817      		cp r20,r24
 2022 065a 5907      		cpc r21,r25
 2023 065c 6A07      		cpc r22,r26
 2024 065e 7B07      		cpc r23,r27
 2025 0660 00F4      		brsh .L110
 2026               	.LVL180:
 2027               	.LBB76:
 2028               	.LBI76:
  55:fat.c         **** {
 2029               		.loc 4 55 17 is_stmt 1 view .LVU483
 2030               	.LBB77:
  63:fat.c         **** 		((uint16_t)cluster % 128) * 4, 4))
 2031               		.loc 4 63 2 view .LVU484
  64:fat.c         **** 	{
 2032               		.loc 4 64 22 is_stmt 0 view .LVU485
 2033 0662 9A01      		movw r18,r20
 2034 0664 2F77      		andi r18,127
 2035 0666 3327      		clr r19
  63:fat.c         **** 		((uint16_t)cluster % 128) * 4, 4))
 2036               		.loc 4 63 5 view .LVU486
 2037 0668 220F      		lsl r18
 2038 066a 331F      		rol r19
 2039 066c 220F      		lsl r18
 2040 066e 331F      		rol r19
  63:fat.c         **** 		((uint16_t)cluster % 128) * 4, 4))
 2041               		.loc 4 63 40 view .LVU487
 2042 0670 97E0      		ldi r25,7
 2043               		1:
 2044 0672 7695      		lsr r23
 2045 0674 6795      		ror r22
 2046 0676 5795      		ror r21
 2047 0678 4795      		ror r20
 2048 067a 9A95      		dec r25
 2049 067c 01F4      		brne 1b
 2050               	.LVL181:
  63:fat.c         **** 		((uint16_t)cluster % 128) * 4, 4))
 2051               		.loc 4 63 5 view .LVU488
 2052 067e 8091 0000 		lds r24,_fs+7
 2053 0682 9091 0000 		lds r25,_fs+7+1
 2054 0686 A091 0000 		lds r26,_fs+7+2
 2055 068a B091 0000 		lds r27,_fs+7+3
 2056 068e 480F      		add r20,r24
 2057 0690 591F      		adc r21,r25
 2058 0692 6A1F      		adc r22,r26
 2059 0694 7B1F      		adc r23,r27
 2060 0696 04E0      		ldi r16,lo8(4)
 2061 0698 10E0      		ldi r17,0
 2062 069a CE01      		movw r24,r28
 2063 069c 0196      		adiw r24,1
 2064 069e 0E94 0000 		call sd_read
 2065               	.LVL182:
  63:fat.c         **** 		((uint16_t)cluster % 128) * 4, 4))
 2066               		.loc 4 63 4 view .LVU489
 2067 06a2 8111      		cpse r24,__zero_reg__
 2068 06a4 00C0      		rjmp .L110
  69:fat.c         **** }
 2069               		.loc 4 69 2 is_stmt 1 view .LVU490
  69:fat.c         **** }
 2070               		.loc 4 69 9 is_stmt 0 view .LVU491
 2071 06a6 CE01      		movw r24,r28
 2072 06a8 0196      		adiw r24,1
 2073 06aa 0E94 0000 		call ld_u32
 2074               	.LVL183:
 2075 06ae DC01      		movw r26,r24
 2076 06b0 CB01      		movw r24,r22
  69:fat.c         **** }
 2077               		.loc 4 69 21 view .LVU492
 2078 06b2 BF70      		andi r27,15
 2079               	.L112:
  69:fat.c         **** }
 2080               		.loc 4 69 21 view .LVU493
 2081               	.LBE77:
 2082               	.LBE76:
  60:fat.c         **** 	}
 2083               		.loc 4 60 10 view .LVU494
 2084 06b4 8D83      		std Y+5,r24
 2085 06b6 9E83      		std Y+6,r25
 2086 06b8 AF83      		std Y+7,r26
 2087 06ba B887      		std Y+8,r27
  70:fat.c         **** 
 2088               		.loc 4 70 1 view .LVU495
 2089 06bc 6D81      		ldd r22,Y+5
 2090 06be 7E81      		ldd r23,Y+6
 2091 06c0 8F81      		ldd r24,Y+7
 2092 06c2 9885      		ldd r25,Y+8
 2093               	/* epilogue start */
 2094 06c4 2896      		adiw r28,8
 2095 06c6 0FB6      		in __tmp_reg__,__SREG__
 2096 06c8 F894      		cli
 2097 06ca DEBF      		out __SP_H__,r29
 2098 06cc 0FBE      		out __SREG__,__tmp_reg__
 2099 06ce CDBF      		out __SP_L__,r28
 2100 06d0 DF91      		pop r29
 2101 06d2 CF91      		pop r28
 2102 06d4 1F91      		pop r17
 2103 06d6 0F91      		pop r16
 2104 06d8 0895      		ret
 2105               	.L110:
  60:fat.c         **** 	}
 2106               		.loc 4 60 10 view .LVU496
 2107 06da 81E0      		ldi r24,lo8(1)
 2108 06dc 90E0      		ldi r25,0
 2109 06de A0E0      		ldi r26,0
 2110 06e0 B0E0      		ldi r27,0
 2111 06e2 00C0      		rjmp .L112
 2112               		.cfi_endproc
 2113               	.LFE30:
 2116               	dir_next:
 2117               	.LVL184:
 2118               	.LFB35:
 155:fat.c         **** 
 156:fat.c         **** static uint8_t dir_next(dir_t *dj)
 157:fat.c         **** {
 2119               		.loc 4 157 1 is_stmt 1 view -0
 2120               		.cfi_startproc
 2121               		.loc 4 157 1 is_stmt 0 view .LVU498
 2122 06e4 CF92      		push r12
 2123               	.LCFI63:
 2124               		.cfi_def_cfa_offset 3
 2125               		.cfi_offset 12, -2
 2126 06e6 DF92      		push r13
 2127               	.LCFI64:
 2128               		.cfi_def_cfa_offset 4
 2129               		.cfi_offset 13, -3
 2130 06e8 EF92      		push r14
 2131               	.LCFI65:
 2132               		.cfi_def_cfa_offset 5
 2133               		.cfi_offset 14, -4
 2134 06ea FF92      		push r15
 2135               	.LCFI66:
 2136               		.cfi_def_cfa_offset 6
 2137               		.cfi_offset 15, -5
 2138 06ec 0F93      		push r16
 2139               	.LCFI67:
 2140               		.cfi_def_cfa_offset 7
 2141               		.cfi_offset 16, -6
 2142 06ee 1F93      		push r17
 2143               	.LCFI68:
 2144               		.cfi_def_cfa_offset 8
 2145               		.cfi_offset 17, -7
 2146 06f0 CF93      		push r28
 2147               	.LCFI69:
 2148               		.cfi_def_cfa_offset 9
 2149               		.cfi_offset 28, -8
 2150 06f2 DF93      		push r29
 2151               	.LCFI70:
 2152               		.cfi_def_cfa_offset 10
 2153               		.cfi_offset 29, -9
 2154 06f4 CDB7      		in r28,__SP_L__
 2155 06f6 DEB7      		in r29,__SP_H__
 2156               	.LCFI71:
 2157               		.cfi_def_cfa_register 28
 2158 06f8 2A97      		sbiw r28,10
 2159               	.LCFI72:
 2160               		.cfi_def_cfa_offset 20
 2161 06fa 0FB6      		in __tmp_reg__,__SREG__
 2162 06fc F894      		cli
 2163 06fe DEBF      		out __SP_H__,r29
 2164 0700 0FBE      		out __SREG__,__tmp_reg__
 2165 0702 CDBF      		out __SP_L__,r28
 2166               	/* prologue: function */
 2167               	/* frame size = 10 */
 2168               	/* stack size = 18 */
 2169               	.L__stack_usage = 18
 2170 0704 8D83      		std Y+5,r24
 2171 0706 9E83      		std Y+6,r25
 158:fat.c         **** 	uint32_t clst;
 2172               		.loc 4 158 2 is_stmt 1 view .LVU499
 159:fat.c         **** 	uint16_t i;
 2173               		.loc 4 159 2 view .LVU500
 160:fat.c         **** 	if(!(i = dj->index + 1) || !dj->sect)
 2174               		.loc 4 160 2 view .LVU501
 2175               		.loc 4 160 9 is_stmt 0 view .LVU502
 2176 0708 AD81      		ldd r26,Y+5
 2177 070a BE81      		ldd r27,Y+6
 2178 070c 0D91      		ld r16,X+
 2179 070e 1C91      		ld r17,X
 2180 0710 0F5F      		subi r16,-1
 2181 0712 1F4F      		sbci r17,-1
 2182               	.LVL185:
 2183               		.loc 4 160 4 view .LVU503
 2184 0714 01F4      		brne .L114
 2185               	.LVL186:
 2186               	.L116:
 161:fat.c         **** 	{
 162:fat.c         **** 		return 1;
 2187               		.loc 4 162 10 view .LVU504
 2188 0716 81E0      		ldi r24,lo8(1)
 2189               	.L113:
 2190               	/* epilogue start */
 163:fat.c         **** 	}
 164:fat.c         **** 
 165:fat.c         **** 	if(!(i % 16))
 166:fat.c         **** 	{
 167:fat.c         **** 		dj->sect++;
 168:fat.c         **** 		if(dj->clust == 0)
 169:fat.c         **** 		{
 170:fat.c         **** 			if(i >= _fs.n_rootdir)
 171:fat.c         **** 			{
 172:fat.c         **** 				return 1;
 173:fat.c         **** 			}
 174:fat.c         **** 		}
 175:fat.c         **** 		else
 176:fat.c         **** 		{
 177:fat.c         **** 			if(((i / 16) & (_fs.csize - 1)) == 0)
 178:fat.c         **** 			{
 179:fat.c         **** 				clst = get_fat(dj->clust);
 180:fat.c         **** 				if(clst <= 1)
 181:fat.c         **** 				{
 182:fat.c         **** 					return 1;
 183:fat.c         **** 				}
 184:fat.c         **** 
 185:fat.c         **** 				if(clst >= _fs.n_fatent)
 186:fat.c         **** 				{
 187:fat.c         **** 					return 1;
 188:fat.c         **** 				}
 189:fat.c         **** 
 190:fat.c         **** 				dj->clust = clst;
 191:fat.c         **** 				dj->sect = clust2sect(clst);
 192:fat.c         **** 			}
 193:fat.c         **** 		}
 194:fat.c         **** 	}
 195:fat.c         **** 
 196:fat.c         **** 	dj->index = i;
 197:fat.c         **** 	return 0;
 198:fat.c         **** }
 2191               		.loc 4 198 1 view .LVU505
 2192 0718 2A96      		adiw r28,10
 2193 071a 0FB6      		in __tmp_reg__,__SREG__
 2194 071c F894      		cli
 2195 071e DEBF      		out __SP_H__,r29
 2196 0720 0FBE      		out __SREG__,__tmp_reg__
 2197 0722 CDBF      		out __SP_L__,r28
 2198 0724 DF91      		pop r29
 2199 0726 CF91      		pop r28
 2200 0728 1F91      		pop r17
 2201 072a 0F91      		pop r16
 2202               	.LVL187:
 2203               		.loc 4 198 1 view .LVU506
 2204 072c FF90      		pop r15
 2205 072e EF90      		pop r14
 2206 0730 DF90      		pop r13
 2207 0732 CF90      		pop r12
 2208 0734 0895      		ret
 2209               	.LVL188:
 2210               	.L114:
 160:fat.c         **** 	{
 2211               		.loc 4 160 32 discriminator 1 view .LVU507
 2212 0736 ED81      		ldd r30,Y+5
 2213 0738 FE81      		ldd r31,Y+6
 2214 073a 8485      		ldd r24,Z+12
 2215 073c 9585      		ldd r25,Z+13
 2216 073e A685      		ldd r26,Z+14
 2217 0740 B785      		ldd r27,Z+15
 2218               	.LVL189:
 160:fat.c         **** 	{
 2219               		.loc 4 160 26 discriminator 1 view .LVU508
 2220 0742 0097      		sbiw r24,0
 2221 0744 A105      		cpc r26,__zero_reg__
 2222 0746 B105      		cpc r27,__zero_reg__
 2223 0748 01F0      		breq .L116
 165:fat.c         **** 	{
 2224               		.loc 4 165 2 is_stmt 1 view .LVU509
 165:fat.c         **** 	{
 2225               		.loc 4 165 9 is_stmt 0 view .LVU510
 2226 074a 9801      		movw r18,r16
 2227 074c 2F70      		andi r18,15
 2228 074e 3327      		clr r19
 165:fat.c         **** 	{
 2229               		.loc 4 165 4 view .LVU511
 2230 0750 232B      		or r18,r19
 2231 0752 01F4      		brne .L118
 167:fat.c         **** 		if(dj->clust == 0)
 2232               		.loc 4 167 3 is_stmt 1 view .LVU512
 167:fat.c         **** 		if(dj->clust == 0)
 2233               		.loc 4 167 11 is_stmt 0 view .LVU513
 2234 0754 0196      		adiw r24,1
 2235 0756 A11D      		adc r26,__zero_reg__
 2236 0758 B11D      		adc r27,__zero_reg__
 2237 075a 8487      		std Z+12,r24
 2238 075c 9587      		std Z+13,r25
 2239 075e A687      		std Z+14,r26
 2240 0760 B787      		std Z+15,r27
 168:fat.c         **** 		{
 2241               		.loc 4 168 3 is_stmt 1 view .LVU514
 168:fat.c         **** 		{
 2242               		.loc 4 168 8 is_stmt 0 view .LVU515
 2243 0762 8085      		ldd r24,Z+8
 2244 0764 9185      		ldd r25,Z+9
 2245 0766 A285      		ldd r26,Z+10
 2246 0768 B385      		ldd r27,Z+11
 2247 076a 8983      		std Y+1,r24
 2248 076c 9A83      		std Y+2,r25
 2249 076e AB83      		std Y+3,r26
 2250 0770 BC83      		std Y+4,r27
 168:fat.c         **** 		{
 2251               		.loc 4 168 5 view .LVU516
 2252 0772 892B      		or r24,r25
 2253 0774 8A2B      		or r24,r26
 2254 0776 8B2B      		or r24,r27
 2255 0778 01F4      		brne .L119
 170:fat.c         **** 			{
 2256               		.loc 4 170 4 is_stmt 1 view .LVU517
 170:fat.c         **** 			{
 2257               		.loc 4 170 6 is_stmt 0 view .LVU518
 2258 077a 8091 0000 		lds r24,_fs+1
 2259 077e 9091 0000 		lds r25,_fs+1+1
 2260 0782 0817      		cp r16,r24
 2261 0784 1907      		cpc r17,r25
 2262 0786 00F4      		brsh .L116
 2263               	.L118:
 196:fat.c         **** 	return 0;
 2264               		.loc 4 196 2 is_stmt 1 view .LVU519
 196:fat.c         **** 	return 0;
 2265               		.loc 4 196 12 is_stmt 0 view .LVU520
 2266 0788 ED81      		ldd r30,Y+5
 2267 078a FE81      		ldd r31,Y+6
 2268 078c 1183      		std Z+1,r17
 2269 078e 0083      		st Z,r16
 197:fat.c         **** }
 2270               		.loc 4 197 2 is_stmt 1 view .LVU521
 197:fat.c         **** }
 2271               		.loc 4 197 9 is_stmt 0 view .LVU522
 2272 0790 80E0      		ldi r24,0
 2273 0792 00C0      		rjmp .L113
 2274               	.L119:
 177:fat.c         **** 			{
 2275               		.loc 4 177 4 is_stmt 1 view .LVU523
 177:fat.c         **** 			{
 2276               		.loc 4 177 23 is_stmt 0 view .LVU524
 2277 0794 8091 0000 		lds r24,_fs
 177:fat.c         **** 			{
 2278               		.loc 4 177 30 view .LVU525
 2279 0798 8150      		subi r24,1
 2280 079a 990B      		sbc r25,r25
 177:fat.c         **** 			{
 2281               		.loc 4 177 11 view .LVU526
 2282 079c 9801      		movw r18,r16
 2283 079e 44E0      		ldi r20,4
 2284               		1:
 2285 07a0 3695      		lsr r19
 2286 07a2 2795      		ror r18
 2287 07a4 4A95      		dec r20
 2288 07a6 01F4      		brne 1b
 177:fat.c         **** 			{
 2289               		.loc 4 177 17 view .LVU527
 2290 07a8 8223      		and r24,r18
 2291 07aa 9323      		and r25,r19
 177:fat.c         **** 			{
 2292               		.loc 4 177 6 view .LVU528
 2293 07ac 892B      		or r24,r25
 2294 07ae 01F4      		brne .L118
 179:fat.c         **** 				if(clst <= 1)
 2295               		.loc 4 179 5 is_stmt 1 view .LVU529
 179:fat.c         **** 				if(clst <= 1)
 2296               		.loc 4 179 12 is_stmt 0 view .LVU530
 2297 07b0 6981      		ldd r22,Y+1
 2298 07b2 7A81      		ldd r23,Y+2
 2299 07b4 8B81      		ldd r24,Y+3
 2300 07b6 9C81      		ldd r25,Y+4
 2301 07b8 0E94 0000 		call get_fat
 2302               	.LVL190:
 180:fat.c         **** 				{
 2303               		.loc 4 180 5 is_stmt 1 view .LVU531
 180:fat.c         **** 				{
 2304               		.loc 4 180 7 is_stmt 0 view .LVU532
 2305 07bc 6230      		cpi r22,2
 2306 07be 7105      		cpc r23,__zero_reg__
 2307 07c0 8105      		cpc r24,__zero_reg__
 2308 07c2 9105      		cpc r25,__zero_reg__
 2309 07c4 00F4      		brsh .+2
 2310 07c6 00C0      		rjmp .L116
 185:fat.c         **** 				{
 2311               		.loc 4 185 5 is_stmt 1 view .LVU533
 185:fat.c         **** 				{
 2312               		.loc 4 185 7 is_stmt 0 view .LVU534
 2313 07c8 C090 0000 		lds r12,_fs+3
 2314 07cc D090 0000 		lds r13,_fs+3+1
 2315 07d0 E090 0000 		lds r14,_fs+3+2
 2316 07d4 F090 0000 		lds r15,_fs+3+3
 2317 07d8 6C15      		cp r22,r12
 2318 07da 7D05      		cpc r23,r13
 2319 07dc 8E05      		cpc r24,r14
 2320 07de 9F05      		cpc r25,r15
 2321 07e0 00F0      		brlo .+2
 2322 07e2 00C0      		rjmp .L116
 190:fat.c         **** 				dj->sect = clust2sect(clst);
 2323               		.loc 4 190 5 is_stmt 1 view .LVU535
 190:fat.c         **** 				dj->sect = clust2sect(clst);
 2324               		.loc 4 190 15 is_stmt 0 view .LVU536
 2325 07e4 ED81      		ldd r30,Y+5
 2326 07e6 FE81      		ldd r31,Y+6
 2327 07e8 6087      		std Z+8,r22
 2328 07ea 7187      		std Z+9,r23
 2329 07ec 8287      		std Z+10,r24
 2330 07ee 9387      		std Z+11,r25
 191:fat.c         **** 			}
 2331               		.loc 4 191 5 is_stmt 1 view .LVU537
 191:fat.c         **** 			}
 2332               		.loc 4 191 16 is_stmt 0 view .LVU538
 2333 07f0 0E94 0000 		call clust2sect
 2334               	.LVL191:
 191:fat.c         **** 			}
 2335               		.loc 4 191 14 view .LVU539
 2336 07f4 AD81      		ldd r26,Y+5
 2337 07f6 BE81      		ldd r27,Y+6
 2338 07f8 1C96      		adiw r26,12
 2339 07fa 6D93      		st X+,r22
 2340 07fc 7D93      		st X+,r23
 2341 07fe 8D93      		st X+,r24
 2342 0800 9C93      		st X,r25
 2343 0802 1F97      		sbiw r26,12+3
 2344 0804 00C0      		rjmp .L118
 2345               		.cfi_endproc
 2346               	.LFE35:
 2349               	check_fs:
 2350               	.LVL192:
 2351               	.LFB38:
 199:fat.c         **** 
 200:fat.c         **** static uint8_t dir_find(dir_t *dj, uint8_t *dir)
 201:fat.c         **** {
 202:fat.c         **** 	uint8_t res;
 203:fat.c         **** 	if((res = dir_rewind(dj)))
 204:fat.c         **** 	{
 205:fat.c         **** 		return res;
 206:fat.c         **** 	}
 207:fat.c         **** 
 208:fat.c         **** 	do
 209:fat.c         **** 	{
 210:fat.c         **** 		if((res = sd_read(dir, dj->sect, (dj->index % 16) * 32, 32)))
 211:fat.c         **** 		{
 212:fat.c         **** 			break;
 213:fat.c         **** 		}
 214:fat.c         **** 
 215:fat.c         **** 		if(dir[DIR_NAME] == 0)
 216:fat.c         **** 		{
 217:fat.c         **** 			res = 1;
 218:fat.c         **** 			break;
 219:fat.c         **** 		}
 220:fat.c         **** 
 221:fat.c         **** 		if(!(dir[DIR_ATTR] & AM_VOL) && mem_cmp(dir, dj->fn, 11))
 222:fat.c         **** 		{
 223:fat.c         **** 			break;
 224:fat.c         **** 		}
 225:fat.c         **** 
 226:fat.c         **** 		res = dir_next(dj);
 227:fat.c         **** 	} while(!res);
 228:fat.c         **** 	return res;
 229:fat.c         **** }
 230:fat.c         **** 
 231:fat.c         **** static uint8_t follow_path(dir_t *dj, uint8_t *dir, const char *path)
 232:fat.c         **** {
 233:fat.c         **** 	uint8_t res;
 234:fat.c         **** 	while(*path == ' ')
 235:fat.c         **** 	{
 236:fat.c         **** 		++path;
 237:fat.c         **** 	}
 238:fat.c         **** 
 239:fat.c         **** 	if(*path == '/')
 240:fat.c         **** 	{
 241:fat.c         **** 		++path;
 242:fat.c         **** 	}
 243:fat.c         **** 
 244:fat.c         **** 	dj->sclust = 0;
 245:fat.c         **** 	if(*path < ' ')
 246:fat.c         **** 	{
 247:fat.c         **** 		res = dir_rewind(dj);
 248:fat.c         **** 		dir[0] = 0;
 249:fat.c         **** 	}
 250:fat.c         **** 	else
 251:fat.c         **** 	{
 252:fat.c         **** 		for(;;)
 253:fat.c         **** 		{
 254:fat.c         **** 			if((res = create_name(dj, &path)))
 255:fat.c         **** 			{
 256:fat.c         **** 				break;
 257:fat.c         **** 			}
 258:fat.c         **** 
 259:fat.c         **** 			if((res = dir_find(dj, dir)))
 260:fat.c         **** 			{
 261:fat.c         **** 				break;
 262:fat.c         **** 			}
 263:fat.c         **** 
 264:fat.c         **** 			if(dj->fn[11])
 265:fat.c         **** 			{
 266:fat.c         **** 				break;
 267:fat.c         **** 			}
 268:fat.c         **** 
 269:fat.c         **** 			if(!(dir[DIR_ATTR] & AM_DIR))
 270:fat.c         **** 			{
 271:fat.c         **** 				res = 1;
 272:fat.c         **** 				break;
 273:fat.c         **** 			}
 274:fat.c         **** 
 275:fat.c         **** 			dj->sclust = get_cluster(dir);
 276:fat.c         **** 		}
 277:fat.c         **** 	}
 278:fat.c         **** 
 279:fat.c         **** 	return res;
 280:fat.c         **** }
 281:fat.c         **** 
 282:fat.c         **** static uint8_t check_fs(uint8_t *buf, uint32_t sect)
 283:fat.c         **** {
 2352               		.loc 4 283 1 is_stmt 1 view -0
 2353               		.cfi_startproc
 2354               		.loc 4 283 1 is_stmt 0 view .LVU541
 2355 0806 CF92      		push r12
 2356               	.LCFI73:
 2357               		.cfi_def_cfa_offset 3
 2358               		.cfi_offset 12, -2
 2359 0808 DF92      		push r13
 2360               	.LCFI74:
 2361               		.cfi_def_cfa_offset 4
 2362               		.cfi_offset 13, -3
 2363 080a EF92      		push r14
 2364               	.LCFI75:
 2365               		.cfi_def_cfa_offset 5
 2366               		.cfi_offset 14, -4
 2367 080c FF92      		push r15
 2368               	.LCFI76:
 2369               		.cfi_def_cfa_offset 6
 2370               		.cfi_offset 15, -5
 2371 080e 0F93      		push r16
 2372               	.LCFI77:
 2373               		.cfi_def_cfa_offset 7
 2374               		.cfi_offset 16, -6
 2375 0810 1F93      		push r17
 2376               	.LCFI78:
 2377               		.cfi_def_cfa_offset 8
 2378               		.cfi_offset 17, -7
 2379 0812 CF93      		push r28
 2380               	.LCFI79:
 2381               		.cfi_def_cfa_offset 9
 2382               		.cfi_offset 28, -8
 2383 0814 DF93      		push r29
 2384               	.LCFI80:
 2385               		.cfi_def_cfa_offset 10
 2386               		.cfi_offset 29, -9
 2387               	/* prologue: function */
 2388               	/* frame size = 0 */
 2389               	/* stack size = 8 */
 2390               	.L__stack_usage = 8
 2391 0816 EC01      		movw r28,r24
 2392 0818 6A01      		movw r12,r20
 2393 081a 7B01      		movw r14,r22
 284:fat.c         **** 	if(sd_read(buf, sect, 510, 2))
 2394               		.loc 4 284 2 is_stmt 1 view .LVU542
 2395               		.loc 4 284 5 is_stmt 0 view .LVU543
 2396 081c 02E0      		ldi r16,lo8(2)
 2397 081e 10E0      		ldi r17,0
 2398 0820 2EEF      		ldi r18,lo8(-2)
 2399 0822 31E0      		ldi r19,lo8(1)
 2400 0824 0E94 0000 		call sd_read
 2401               	.LVL193:
 2402               		.loc 4 284 4 view .LVU544
 2403 0828 8111      		cpse r24,__zero_reg__
 2404 082a 00C0      		rjmp .L127
 285:fat.c         **** 	{
 286:fat.c         **** 		return 3;
 287:fat.c         **** 	}
 288:fat.c         **** 
 289:fat.c         **** 	if(ld_u16(buf) != 0xAA55)
 2405               		.loc 4 289 2 is_stmt 1 view .LVU545
 2406               	.LVL194:
 2407               	.LBB86:
 2408               	.LBI86:
   7:util.c        **** {
 2409               		.loc 2 7 17 view .LVU546
 2410               	.LBB87:
   9:util.c        **** }
 2411               		.loc 2 9 2 view .LVU547
   9:util.c        **** }
 2412               		.loc 2 9 2 is_stmt 0 view .LVU548
 2413               	.LBE87:
 2414               	.LBE86:
 2415               		.loc 4 289 4 view .LVU549
 2416 082c 8881      		ld r24,Y
 2417 082e 9981      		ldd r25,Y+1
 2418 0830 8535      		cpi r24,85
 2419 0832 9A4A      		sbci r25,-86
 2420 0834 01F4      		brne .L128
 2421               	.LVL195:
 2422               	.LBB88:
 2423               	.LBI88:
 282:fat.c         **** {
 2424               		.loc 4 282 16 is_stmt 1 view .LVU550
 2425               	.LBB89:
 290:fat.c         **** 	{
 291:fat.c         **** 		return 2;
 292:fat.c         **** 	}
 293:fat.c         **** 
 294:fat.c         **** 	if(!sd_read(buf, sect, BS_FILESYSTEM_TYPE_32, 2)
 2426               		.loc 4 294 2 view .LVU551
 2427               		.loc 4 294 6 is_stmt 0 view .LVU552
 2428 0836 22E5      		ldi r18,lo8(82)
 2429 0838 30E0      		ldi r19,0
 2430 083a A601      		movw r20,r12
 2431 083c B701      		movw r22,r14
 2432 083e CE01      		movw r24,r28
 2433 0840 0E94 0000 		call sd_read
 2434               	.LVL196:
 2435               		.loc 4 294 4 view .LVU553
 2436 0844 8111      		cpse r24,__zero_reg__
 2437 0846 00C0      		rjmp .L129
 2438               	.LVL197:
 2439               	.LBB90:
 2440               	.LBI90:
   7:util.c        **** {
 2441               		.loc 2 7 17 is_stmt 1 view .LVU554
 2442               	.LBB91:
   9:util.c        **** }
 2443               		.loc 2 9 2 view .LVU555
   9:util.c        **** }
 2444               		.loc 2 9 2 is_stmt 0 view .LVU556
 2445               	.LBE91:
 2446               	.LBE90:
 295:fat.c         **** 		&& ld_u16(buf) == 0x4146)
 2447               		.loc 4 295 3 view .LVU557
 2448 0848 81E0      		ldi r24,lo8(1)
 2449 084a 2881      		ld r18,Y
 2450 084c 3981      		ldd r19,Y+1
 2451 084e 2634      		cpi r18,70
 2452 0850 3144      		sbci r19,65
 2453 0852 01F4      		brne .L124
 2454 0854 80E0      		ldi r24,0
 2455               	.LVL198:
 2456               	.L124:
 2457               	/* epilogue start */
 2458               		.loc 4 295 3 view .LVU558
 2459               	.LBE89:
 2460               	.LBE88:
 296:fat.c         **** 	{
 297:fat.c         **** 		return 0;
 298:fat.c         **** 	}
 299:fat.c         **** 
 300:fat.c         **** 	return 1;
 301:fat.c         **** }
 2461               		.loc 4 301 1 view .LVU559
 2462 0856 DF91      		pop r29
 2463 0858 CF91      		pop r28
 2464               	.LVL199:
 2465               		.loc 4 301 1 view .LVU560
 2466 085a 1F91      		pop r17
 2467 085c 0F91      		pop r16
 2468 085e FF90      		pop r15
 2469 0860 EF90      		pop r14
 2470 0862 DF90      		pop r13
 2471 0864 CF90      		pop r12
 2472 0866 0895      		ret
 2473               	.LVL200:
 2474               	.L127:
 286:fat.c         **** 	}
 2475               		.loc 4 286 10 view .LVU561
 2476 0868 83E0      		ldi r24,lo8(3)
 2477 086a 00C0      		rjmp .L124
 2478               	.L128:
 291:fat.c         **** 	}
 2479               		.loc 4 291 10 view .LVU562
 2480 086c 82E0      		ldi r24,lo8(2)
 2481 086e 00C0      		rjmp .L124
 2482               	.LVL201:
 2483               	.L129:
 2484               	.LBB93:
 2485               	.LBB92:
 300:fat.c         **** }
 2486               		.loc 4 300 9 view .LVU563
 2487 0870 81E0      		ldi r24,lo8(1)
 2488               	.LVL202:
 300:fat.c         **** }
 2489               		.loc 4 300 9 view .LVU564
 2490 0872 00C0      		rjmp .L124
 2491               	.LBE92:
 2492               	.LBE93:
 2493               		.cfi_endproc
 2494               	.LFE38:
 2497               	fat_readdir.constprop.0:
 2498               	.LVL203:
 2499               	.LFB88:
 302:fat.c         **** 
 303:fat.c         **** static uint8_t fat_mount(void)
 304:fat.c         **** {
 305:fat.c         **** 	uint8_t fmt, buf[36];
 306:fat.c         **** 	uint32_t bsect, fsize, tsect, mclst;
 307:fat.c         **** 	bsect = 0;
 308:fat.c         **** 	if((fmt = check_fs(buf, bsect)))
 309:fat.c         **** 	{
 310:fat.c         **** 		if(!sd_read(buf, bsect, MBR_TABLE, 16))
 311:fat.c         **** 		{
 312:fat.c         **** 			if(buf[4])
 313:fat.c         **** 			{
 314:fat.c         **** 				bsect = ld_u32(&buf[8]);
 315:fat.c         **** 				fmt = check_fs(buf, bsect);
 316:fat.c         **** 			}
 317:fat.c         **** 		}
 318:fat.c         **** 	}
 319:fat.c         **** 
 320:fat.c         **** 	if(fmt)
 321:fat.c         **** 	{
 322:fat.c         **** 		return 1;
 323:fat.c         **** 	}
 324:fat.c         **** 
 325:fat.c         **** 	if(sd_read(buf, bsect, 13, sizeof(buf)))
 326:fat.c         **** 	{
 327:fat.c         **** 		return 1;
 328:fat.c         **** 	}
 329:fat.c         **** 
 330:fat.c         **** 	if(!(fsize = ld_u16(buf + BPB_FAT_SIZE_16 - 13)))
 331:fat.c         **** 	{
 332:fat.c         **** 		fsize = ld_u32(buf + BPB_FAT_SIZE_32 - 13);
 333:fat.c         **** 	}
 334:fat.c         **** 
 335:fat.c         **** 	fsize *= buf[PBP_NUM_FATS - 13];
 336:fat.c         **** 	_fs.fatbase = bsect + ld_u16(buf + BPB_RESERVED_SECTOR_COUNT - 13);
 337:fat.c         **** 	_fs.csize = buf[BPB_SECTORS_PER_CLUSTER - 13];
 338:fat.c         **** 	_fs.n_rootdir = ld_u16(buf + PBP_ROOT_ENTRY_COUNT - 13);
 339:fat.c         **** 	if(!(tsect = ld_u16(buf + BPB_TOTAL_SECTORS_16 - 13)))
 340:fat.c         **** 	{
 341:fat.c         **** 		tsect = ld_u32(buf + BPB_TOTAL_SECTORS_32 - 13);
 342:fat.c         **** 	}
 343:fat.c         **** 
 344:fat.c         **** 	mclst = (tsect - ld_u16(buf + BPB_RESERVED_SECTOR_COUNT - 13) -
 345:fat.c         **** 		fsize - _fs.n_rootdir / 16) / _fs.csize + 2;
 346:fat.c         **** 
 347:fat.c         **** 	_fs.n_fatent = (uint32_t)mclst;
 348:fat.c         **** 	if(!(mclst >= 0xFFF7))
 349:fat.c         **** 	{
 350:fat.c         **** 		return 1;
 351:fat.c         **** 	}
 352:fat.c         **** 
 353:fat.c         **** 	_fs.dirbase = ld_u32(buf + (BPB_ROOT_CLUSTER - 13));
 354:fat.c         **** 	_fs.database = _fs.fatbase + fsize + _fs.n_rootdir / 16;
 355:fat.c         **** 	return 0;
 356:fat.c         **** }
 357:fat.c         **** 
 358:fat.c         **** static uint8_t fat_fopen(const char *path)
 359:fat.c         **** {
 360:fat.c         **** 	dir_t dj;
 361:fat.c         **** 	uint8_t sp[12], dir[32];
 362:fat.c         **** 	dj.fn = sp;
 363:fat.c         **** 
 364:fat.c         **** 	if(follow_path(&dj, dir, path) || !dir[0] ||
 365:fat.c         **** 		(dir[DIR_ATTR] & AM_DIR))
 366:fat.c         **** 	{
 367:fat.c         **** 		return 1;
 368:fat.c         **** 	}
 369:fat.c         **** 
 370:fat.c         **** 	_fs.org_clust = get_cluster(dir);
 371:fat.c         **** 	fat_fsize = ld_u32(dir + DIR_FILESIZE);
 372:fat.c         **** 	fat_ftell = 0;
 373:fat.c         **** 	return 0;
 374:fat.c         **** }
 375:fat.c         **** 
 376:fat.c         **** static uint8_t fat_fread(void *buf, uint16_t btr, uint16_t *br)
 377:fat.c         **** {
 378:fat.c         **** 	uint32_t clst, sect, remain;
 379:fat.c         **** 	uint16_t rcnt;
 380:fat.c         **** 	uint8_t cs, *rbuf;
 381:fat.c         **** 	rbuf = buf;
 382:fat.c         **** 	*br = 0;
 383:fat.c         **** 	remain = fat_fsize - fat_ftell;
 384:fat.c         **** 	if(btr > remain)
 385:fat.c         **** 	{
 386:fat.c         **** 		btr = (uint16_t)remain;
 387:fat.c         **** 	}
 388:fat.c         **** 
 389:fat.c         **** 	while(btr)
 390:fat.c         **** 	{
 391:fat.c         **** 		if((fat_ftell % 512) == 0)
 392:fat.c         **** 		{
 393:fat.c         **** 			if(!(cs = (uint8_t)(fat_ftell / 512 & (_fs.csize - 1))))
 394:fat.c         **** 			{
 395:fat.c         **** 				if((clst = fat_ftell ?
 396:fat.c         **** 					get_fat(_fs.curr_clust) : _fs.org_clust) <= 1)
 397:fat.c         **** 				{
 398:fat.c         **** 					return 1;
 399:fat.c         **** 				}
 400:fat.c         **** 
 401:fat.c         **** 				_fs.curr_clust = clst;
 402:fat.c         **** 			}
 403:fat.c         **** 
 404:fat.c         **** 			if(!(sect = clust2sect(_fs.curr_clust)))
 405:fat.c         **** 			{
 406:fat.c         **** 				return 1;
 407:fat.c         **** 			}
 408:fat.c         **** 
 409:fat.c         **** 			_fs.dsect = sect + cs;
 410:fat.c         **** 		}
 411:fat.c         **** 
 412:fat.c         **** 		if((rcnt = 512 - (uint16_t)fat_ftell % 512) > btr)
 413:fat.c         **** 		{
 414:fat.c         **** 			rcnt = btr;
 415:fat.c         **** 		}
 416:fat.c         **** 
 417:fat.c         **** 		if(sd_read(rbuf, _fs.dsect, (uint16_t)fat_ftell % 512, rcnt))
 418:fat.c         **** 		{
 419:fat.c         **** 			return 1;
 420:fat.c         **** 		}
 421:fat.c         **** 
 422:fat.c         **** 		fat_ftell += rcnt;
 423:fat.c         **** 		btr -= rcnt;
 424:fat.c         **** 		*br += rcnt;
 425:fat.c         **** 		if(rbuf)
 426:fat.c         **** 		{
 427:fat.c         **** 			rbuf += rcnt;
 428:fat.c         **** 		}
 429:fat.c         **** 	}
 430:fat.c         **** 
 431:fat.c         **** 	return 0;
 432:fat.c         **** }
 433:fat.c         **** 
 434:fat.c         **** static uint8_t fat_fseek(uint32_t offset)
 435:fat.c         **** {
 436:fat.c         **** 	uint32_t clst, bcs, sect, ifptr;
 437:fat.c         **** 	if(offset > fat_fsize)
 438:fat.c         **** 	{
 439:fat.c         **** 		offset = fat_fsize;
 440:fat.c         **** 	}
 441:fat.c         **** 
 442:fat.c         **** 	ifptr = fat_ftell;
 443:fat.c         **** 	fat_ftell = 0;
 444:fat.c         **** 	if(offset > 0)
 445:fat.c         **** 	{
 446:fat.c         **** 		bcs = (uint32_t)_fs.csize * 512;
 447:fat.c         **** 		if(ifptr > 0 && (offset - 1) / bcs >= (ifptr - 1) / bcs)
 448:fat.c         **** 		{
 449:fat.c         **** 			fat_ftell = (ifptr - 1) & ~(bcs - 1);
 450:fat.c         **** 			offset -= fat_ftell;
 451:fat.c         **** 			clst = _fs.curr_clust;
 452:fat.c         **** 		}
 453:fat.c         **** 		else
 454:fat.c         **** 		{
 455:fat.c         **** 			clst = _fs.org_clust;
 456:fat.c         **** 			_fs.curr_clust = clst;
 457:fat.c         **** 		}
 458:fat.c         **** 
 459:fat.c         **** 		while(offset > bcs)
 460:fat.c         **** 		{
 461:fat.c         **** 			clst = get_fat(clst);
 462:fat.c         **** 			if(clst <= 1 || clst >= _fs.n_fatent)
 463:fat.c         **** 			{
 464:fat.c         **** 				return 1;
 465:fat.c         **** 			}
 466:fat.c         **** 
 467:fat.c         **** 			_fs.curr_clust = clst;
 468:fat.c         **** 			fat_ftell += bcs;
 469:fat.c         **** 			offset -= bcs;
 470:fat.c         **** 		}
 471:fat.c         **** 
 472:fat.c         **** 		fat_ftell += offset;
 473:fat.c         **** 		if(!(sect = clust2sect(clst)))
 474:fat.c         **** 		{
 475:fat.c         **** 			return 1;
 476:fat.c         **** 		}
 477:fat.c         **** 
 478:fat.c         **** 		_fs.dsect = sect + (fat_ftell / 512 & (_fs.csize - 1));
 479:fat.c         **** 	}
 480:fat.c         **** 
 481:fat.c         **** 	return 0;
 482:fat.c         **** }
 483:fat.c         **** 
 484:fat.c         **** /* Directory */
 485:fat.c         **** static void get_fileinfo(dir_t *dj, uint8_t *dir, direntry_t *fno)
 486:fat.c         **** {
 487:fat.c         **** 	uint8_t i, c;
 488:fat.c         **** 	char *p;
 489:fat.c         **** 	p = fno->name;
 490:fat.c         **** 	if(dj->sect)
 491:fat.c         **** 	{
 492:fat.c         **** 		for(i = 0; i < 8; i++)
 493:fat.c         **** 		{
 494:fat.c         **** 			c = dir[i];
 495:fat.c         **** 			if(c == ' ')
 496:fat.c         **** 			{
 497:fat.c         **** 				break;
 498:fat.c         **** 			}
 499:fat.c         **** 
 500:fat.c         **** 			if(c == 0x05)
 501:fat.c         **** 			{
 502:fat.c         **** 				c = 0xE5;
 503:fat.c         **** 			}
 504:fat.c         **** 
 505:fat.c         **** 			*p++ = c;
 506:fat.c         **** 		}
 507:fat.c         **** 
 508:fat.c         **** 		if(dir[8] != ' ')
 509:fat.c         **** 		{
 510:fat.c         **** 			*p++ = '.';
 511:fat.c         **** 			for(i = 8; i < 11; i++)
 512:fat.c         **** 			{
 513:fat.c         **** 				c = dir[i];
 514:fat.c         **** 				if (c == ' ')
 515:fat.c         **** 				{
 516:fat.c         **** 					break;
 517:fat.c         **** 				}
 518:fat.c         **** 
 519:fat.c         **** 				*p++ = c;
 520:fat.c         **** 			}
 521:fat.c         **** 		}
 522:fat.c         **** 
 523:fat.c         **** 		fno->type = dir[DIR_ATTR] & AM_DIR;
 524:fat.c         **** 		fno->size = ld_u32(dir + DIR_FILESIZE);
 525:fat.c         **** 	}
 526:fat.c         **** 
 527:fat.c         **** 	*p = 0;
 528:fat.c         **** }
 529:fat.c         **** 
 530:fat.c         **** static uint8_t dir_read(dir_t *dj, uint8_t *dir)
 531:fat.c         **** {
 532:fat.c         **** 	uint8_t res, a, c;
 533:fat.c         **** 	res = 2;
 534:fat.c         **** 	while(dj->sect)
 535:fat.c         **** 	{
 536:fat.c         **** 		if((res = sd_read(dir, dj->sect, (dj->index % 16) * 32, 32)))
 537:fat.c         **** 		{
 538:fat.c         **** 			break;
 539:fat.c         **** 		}
 540:fat.c         **** 
 541:fat.c         **** 		c = dir[DIR_NAME];
 542:fat.c         **** 		if(!c)
 543:fat.c         **** 		{
 544:fat.c         **** 			res = 2;
 545:fat.c         **** 			break;
 546:fat.c         **** 		}
 547:fat.c         **** 
 548:fat.c         **** 		a = dir[DIR_ATTR] & AM_MASK;
 549:fat.c         **** 		if(c != 0xE5 && c != '.' && !(a & AM_VOL))
 550:fat.c         **** 		{
 551:fat.c         **** 			break;
 552:fat.c         **** 		}
 553:fat.c         **** 
 554:fat.c         **** 		if((res = dir_next(dj)))
 555:fat.c         **** 		{
 556:fat.c         **** 			break;
 557:fat.c         **** 		}
 558:fat.c         **** 	}
 559:fat.c         **** 
 560:fat.c         **** 	if(res)
 561:fat.c         **** 	{
 562:fat.c         **** 		dj->sect = 0;
 563:fat.c         **** 	}
 564:fat.c         **** 
 565:fat.c         **** 	return res;
 566:fat.c         **** }
 567:fat.c         **** 
 568:fat.c         **** static uint8_t fat_opendir(dir_t *dj, const char *path)
 569:fat.c         **** {
 570:fat.c         **** 	uint8_t res;
 571:fat.c         **** 	uint8_t sp[12], dir[32];
 572:fat.c         **** 	dj->fn = sp;
 573:fat.c         **** 	if(!(res = follow_path(dj, dir, path)))
 574:fat.c         **** 	{
 575:fat.c         **** 		if(dir[0])
 576:fat.c         **** 		{
 577:fat.c         **** 			if(dir[DIR_ATTR] & AM_DIR)
 578:fat.c         **** 			{
 579:fat.c         **** 				dj->sclust = get_cluster(dir);
 580:fat.c         **** 			}
 581:fat.c         **** 			else
 582:fat.c         **** 			{
 583:fat.c         **** 				res = 2;
 584:fat.c         **** 			}
 585:fat.c         **** 		}
 586:fat.c         **** 
 587:fat.c         **** 		if(!res)
 588:fat.c         **** 		{
 589:fat.c         **** 			res = dir_rewind(dj);
 590:fat.c         **** 		}
 591:fat.c         **** 	}
 592:fat.c         **** 
 593:fat.c         **** 	return res;
 594:fat.c         **** }
 595:fat.c         **** 
 596:fat.c         **** static uint8_t fat_readdir(dir_t *dj, direntry_t *fno)
 2500               		.loc 4 596 16 is_stmt 1 view -0
 2501               		.cfi_startproc
 2502               		.loc 4 596 16 is_stmt 0 view .LVU566
 2503 0874 EF92      		push r14
 2504               	.LCFI81:
 2505               		.cfi_def_cfa_offset 3
 2506               		.cfi_offset 14, -2
 2507 0876 FF92      		push r15
 2508               	.LCFI82:
 2509               		.cfi_def_cfa_offset 4
 2510               		.cfi_offset 15, -3
 2511 0878 0F93      		push r16
 2512               	.LCFI83:
 2513               		.cfi_def_cfa_offset 5
 2514               		.cfi_offset 16, -4
 2515 087a 1F93      		push r17
 2516               	.LCFI84:
 2517               		.cfi_def_cfa_offset 6
 2518               		.cfi_offset 17, -5
 2519 087c CF93      		push r28
 2520               	.LCFI85:
 2521               		.cfi_def_cfa_offset 7
 2522               		.cfi_offset 28, -6
 2523 087e DF93      		push r29
 2524               	.LCFI86:
 2525               		.cfi_def_cfa_offset 8
 2526               		.cfi_offset 29, -7
 2527 0880 CDB7      		in r28,__SP_L__
 2528 0882 DEB7      		in r29,__SP_H__
 2529               	.LCFI87:
 2530               		.cfi_def_cfa_register 28
 2531 0884 AC97      		sbiw r28,44
 2532               	.LCFI88:
 2533               		.cfi_def_cfa_offset 52
 2534 0886 0FB6      		in __tmp_reg__,__SREG__
 2535 0888 F894      		cli
 2536 088a DEBF      		out __SP_H__,r29
 2537 088c 0FBE      		out __SREG__,__tmp_reg__
 2538 088e CDBF      		out __SP_L__,r28
 2539               	/* prologue: function */
 2540               	/* frame size = 44 */
 2541               	/* stack size = 50 */
 2542               	.L__stack_usage = 50
 2543 0890 7C01      		movw r14,r24
 2544               	.LVL204:
 597:fat.c         **** {
 598:fat.c         **** 	uint8_t res, sp[12], dir[32];
 2545               		.loc 4 598 2 is_stmt 1 view .LVU567
 599:fat.c         **** 	dj->fn = sp;
 2546               		.loc 4 599 2 view .LVU568
 2547               		.loc 4 599 9 is_stmt 0 view .LVU569
 2548 0892 CE01      		movw r24,r28
 2549               	.LVL205:
 2550               		.loc 4 599 9 view .LVU570
 2551 0894 8196      		adiw r24,33
 2552 0896 9093 0000 		sts dir+2+1,r25
 2553 089a 8093 0000 		sts dir+2,r24
 600:fat.c         **** 	if(!fno)
 2554               		.loc 4 600 2 is_stmt 1 view .LVU571
 2555               	.LBB98:
 2556               	.LBB99:
 533:fat.c         **** 	while(dj->sect)
 2557               		.loc 4 533 6 is_stmt 0 view .LVU572
 2558 089e 82E0      		ldi r24,lo8(2)
 2559               	.L131:
 2560               	.LVL206:
 534:fat.c         **** 	{
 2561               		.loc 4 534 7 is_stmt 1 view .LVU573
 534:fat.c         **** 	{
 2562               		.loc 4 534 10 is_stmt 0 view .LVU574
 2563 08a0 4091 0000 		lds r20,dir+12
 2564 08a4 5091 0000 		lds r21,dir+12+1
 2565 08a8 6091 0000 		lds r22,dir+12+2
 2566 08ac 7091 0000 		lds r23,dir+12+3
 534:fat.c         **** 	{
 2567               		.loc 4 534 7 view .LVU575
 2568 08b0 4115      		cp r20,__zero_reg__
 2569 08b2 5105      		cpc r21,__zero_reg__
 2570 08b4 6105      		cpc r22,__zero_reg__
 2571 08b6 7105      		cpc r23,__zero_reg__
 2572 08b8 01F4      		brne .L135
 560:fat.c         **** 	{
 2573               		.loc 4 560 2 is_stmt 1 view .LVU576
 560:fat.c         **** 	{
 2574               		.loc 4 560 4 is_stmt 0 view .LVU577
 2575 08ba 8111      		cpse r24,__zero_reg__
 2576 08bc 00C0      		rjmp .L132
 2577               	.LVL207:
 2578               	.L134:
 565:fat.c         **** }
 2579               		.loc 4 565 2 is_stmt 1 view .LVU578
 565:fat.c         **** }
 2580               		.loc 4 565 2 is_stmt 0 view .LVU579
 2581               	.LBE99:
 2582               	.LBE98:
 601:fat.c         **** 	{
 602:fat.c         **** 		res = dir_rewind(dj);
 603:fat.c         **** 	}
 604:fat.c         **** 	else
 605:fat.c         **** 	{
 606:fat.c         **** 		if((res = dir_read(dj, dir)) == 2)
 607:fat.c         **** 		{
 608:fat.c         **** 			res = 0;
 609:fat.c         **** 		}
 610:fat.c         **** 
 611:fat.c         **** 		if(!res)
 2583               		.loc 4 611 3 is_stmt 1 view .LVU580
 612:fat.c         **** 		{
 613:fat.c         **** 			get_fileinfo(dj, dir, fno);
 2584               		.loc 4 613 4 view .LVU581
 2585               	.LBB102:
 2586               	.LBI102:
 485:fat.c         **** {
 2587               		.loc 4 485 13 view .LVU582
 2588               	.LBB103:
 487:fat.c         **** 	char *p;
 2589               		.loc 4 487 2 view .LVU583
 488:fat.c         **** 	p = fno->name;
 2590               		.loc 4 488 2 view .LVU584
 489:fat.c         **** 	if(dj->sect)
 2591               		.loc 4 489 2 view .LVU585
 489:fat.c         **** 	if(dj->sect)
 2592               		.loc 4 489 4 is_stmt 0 view .LVU586
 2593 08be 8701      		movw r16,r14
 2594 08c0 0B5F      		subi r16,-5
 2595 08c2 1F4F      		sbci r17,-1
 2596               	.LVL208:
 490:fat.c         **** 	{
 2597               		.loc 4 490 2 is_stmt 1 view .LVU587
 490:fat.c         **** 	{
 2598               		.loc 4 490 4 is_stmt 0 view .LVU588
 2599 08c4 8091 0000 		lds r24,dir+12
 2600 08c8 9091 0000 		lds r25,dir+12+1
 2601 08cc A091 0000 		lds r26,dir+12+2
 2602 08d0 B091 0000 		lds r27,dir+12+3
 2603 08d4 892B      		or r24,r25
 2604 08d6 8A2B      		or r24,r26
 2605 08d8 8B2B      		or r24,r27
 2606 08da 01F0      		breq .+2
 2607 08dc 00C0      		rjmp .L137
 2608               	.L138:
 527:fat.c         **** }
 2609               		.loc 4 527 2 is_stmt 1 view .LVU589
 527:fat.c         **** }
 2610               		.loc 4 527 5 is_stmt 0 view .LVU590
 2611 08de D801      		movw r26,r16
 2612 08e0 1C92      		st X,__zero_reg__
 2613               	.LVL209:
 527:fat.c         **** }
 2614               		.loc 4 527 5 view .LVU591
 2615               	.LBE103:
 2616               	.LBE102:
 614:fat.c         **** 			if((res = dir_next(dj)) == 2)
 2617               		.loc 4 614 4 is_stmt 1 view .LVU592
 2618               		.loc 4 614 14 is_stmt 0 view .LVU593
 2619 08e2 80E0      		ldi r24,lo8(dir)
 2620 08e4 90E0      		ldi r25,hi8(dir)
 2621 08e6 0E94 0000 		call dir_next
 2622               	.LVL210:
 2623               		.loc 4 614 6 view .LVU594
 2624 08ea 8230      		cpi r24,lo8(2)
 2625 08ec 01F4      		brne .L130
 615:fat.c         **** 			{
 616:fat.c         **** 				res = 0;
 2626               		.loc 4 616 9 view .LVU595
 2627 08ee 80E0      		ldi r24,0
 2628               	.LVL211:
 617:fat.c         **** 			}
 618:fat.c         **** 		}
 619:fat.c         **** 	}
 620:fat.c         **** 
 621:fat.c         **** 	return res;
 2629               		.loc 4 621 2 is_stmt 1 view .LVU596
 2630               		.loc 4 621 9 is_stmt 0 view .LVU597
 2631 08f0 00C0      		rjmp .L130
 2632               	.LVL212:
 2633               	.L135:
 2634               	.LBB105:
 2635               	.LBB100:
 536:fat.c         **** 		{
 2636               		.loc 4 536 3 is_stmt 1 view .LVU598
 536:fat.c         **** 		{
 2637               		.loc 4 536 47 is_stmt 0 view .LVU599
 2638 08f2 2091 0000 		lds r18,dir
 2639 08f6 3091 0000 		lds r19,dir+1
 2640 08fa 2F70      		andi r18,15
 2641 08fc 3327      		clr r19
 536:fat.c         **** 		{
 2642               		.loc 4 536 13 view .LVU600
 2643 08fe 85E0      		ldi r24,5
 2644               		1:
 2645 0900 220F      		lsl r18
 2646 0902 331F      		rol r19
 2647 0904 8A95      		dec r24
 2648 0906 01F4      		brne 1b
 2649               	.LVL213:
 536:fat.c         **** 		{
 2650               		.loc 4 536 13 view .LVU601
 2651 0908 00E2      		ldi r16,lo8(32)
 2652 090a 10E0      		ldi r17,0
 2653 090c CE01      		movw r24,r28
 2654 090e 0196      		adiw r24,1
 2655 0910 0E94 0000 		call sd_read
 2656               	.LVL214:
 536:fat.c         **** 		{
 2657               		.loc 4 536 5 view .LVU602
 2658 0914 8111      		cpse r24,__zero_reg__
 2659 0916 00C0      		rjmp .L132
 541:fat.c         **** 		if(!c)
 2660               		.loc 4 541 3 is_stmt 1 view .LVU603
 541:fat.c         **** 		if(!c)
 2661               		.loc 4 541 5 is_stmt 0 view .LVU604
 2662 0918 8981      		ldd r24,Y+1
 2663               	.LVL215:
 542:fat.c         **** 		{
 2664               		.loc 4 542 3 is_stmt 1 view .LVU605
 542:fat.c         **** 		{
 2665               		.loc 4 542 5 is_stmt 0 view .LVU606
 2666 091a 8823      		tst r24
 2667 091c 01F0      		breq .L145
 548:fat.c         **** 		if(c != 0xE5 && c != '.' && !(a & AM_VOL))
 2668               		.loc 4 548 3 is_stmt 1 view .LVU607
 2669               	.LVL216:
 549:fat.c         **** 		{
 2670               		.loc 4 549 3 view .LVU608
 549:fat.c         **** 		{
 2671               		.loc 4 549 5 is_stmt 0 view .LVU609
 2672 091e 853E      		cpi r24,lo8(-27)
 2673 0920 01F0      		breq .L133
 549:fat.c         **** 		{
 2674               		.loc 4 549 16 view .LVU610
 2675 0922 8E32      		cpi r24,lo8(46)
 2676 0924 01F0      		breq .L133
 549:fat.c         **** 		{
 2677               		.loc 4 549 28 view .LVU611
 2678 0926 8C85      		ldd r24,Y+12
 2679               	.LVL217:
 549:fat.c         **** 		{
 2680               		.loc 4 549 28 view .LVU612
 2681 0928 83FF      		sbrs r24,3
 2682 092a 00C0      		rjmp .L134
 2683               	.L133:
 554:fat.c         **** 		{
 2684               		.loc 4 554 3 is_stmt 1 view .LVU613
 554:fat.c         **** 		{
 2685               		.loc 4 554 13 is_stmt 0 view .LVU614
 2686 092c 80E0      		ldi r24,lo8(dir)
 2687 092e 90E0      		ldi r25,hi8(dir)
 2688 0930 0E94 0000 		call dir_next
 2689               	.LVL218:
 554:fat.c         **** 		{
 2690               		.loc 4 554 5 view .LVU615
 2691 0934 8823      		tst r24
 2692 0936 01F4      		brne .+2
 2693 0938 00C0      		rjmp .L131
 2694               	.LVL219:
 2695               	.L132:
 562:fat.c         **** 	}
 2696               		.loc 4 562 3 is_stmt 1 view .LVU616
 562:fat.c         **** 	}
 2697               		.loc 4 562 12 is_stmt 0 view .LVU617
 2698 093a 1092 0000 		sts dir+12,__zero_reg__
 2699 093e 1092 0000 		sts dir+12+1,__zero_reg__
 2700 0942 1092 0000 		sts dir+12+2,__zero_reg__
 2701 0946 1092 0000 		sts dir+12+3,__zero_reg__
 565:fat.c         **** }
 2702               		.loc 4 565 2 is_stmt 1 view .LVU618
 2703               	.LVL220:
 565:fat.c         **** }
 2704               		.loc 4 565 2 is_stmt 0 view .LVU619
 2705               	.LBE100:
 2706               	.LBE105:
 606:fat.c         **** 		{
 2707               		.loc 4 606 5 view .LVU620
 2708 094a 8230      		cpi r24,lo8(2)
 2709 094c 01F4      		brne .+2
 2710 094e 00C0      		rjmp .L134
 2711               	.LVL221:
 2712               	.L130:
 2713               	/* epilogue start */
 622:fat.c         **** }
 2714               		.loc 4 622 1 view .LVU621
 2715 0950 AC96      		adiw r28,44
 2716 0952 0FB6      		in __tmp_reg__,__SREG__
 2717 0954 F894      		cli
 2718 0956 DEBF      		out __SP_H__,r29
 2719 0958 0FBE      		out __SREG__,__tmp_reg__
 2720 095a CDBF      		out __SP_L__,r28
 2721 095c DF91      		pop r29
 2722 095e CF91      		pop r28
 2723 0960 1F91      		pop r17
 2724 0962 0F91      		pop r16
 2725 0964 FF90      		pop r15
 2726 0966 EF90      		pop r14
 2727               	.LVL222:
 2728               		.loc 4 622 1 view .LVU622
 2729 0968 0895      		ret
 2730               	.LVL223:
 2731               	.L145:
 2732               	.LBB106:
 2733               	.LBB101:
 544:fat.c         **** 			break;
 2734               		.loc 4 544 8 view .LVU623
 2735 096a 82E0      		ldi r24,lo8(2)
 2736               	.LVL224:
 544:fat.c         **** 			break;
 2737               		.loc 4 544 8 view .LVU624
 2738 096c 00C0      		rjmp .L132
 2739               	.LVL225:
 2740               	.L137:
 544:fat.c         **** 			break;
 2741               		.loc 4 544 8 view .LVU625
 2742 096e DE01      		movw r26,r28
 2743 0970 1196      		adiw r26,1
 2744 0972 9701      		movw r18,r14
 2745 0974 235F      		subi r18,-13
 2746 0976 3F4F      		sbci r19,-1
 2747               	.LVL226:
 2748               	.L142:
 544:fat.c         **** 			break;
 2749               		.loc 4 544 8 view .LVU626
 2750               	.LBE101:
 2751               	.LBE106:
 2752               	.LBB107:
 2753               	.LBB104:
 494:fat.c         **** 			if(c == ' ')
 2754               		.loc 4 494 4 is_stmt 1 view .LVU627
 494:fat.c         **** 			if(c == ' ')
 2755               		.loc 4 494 6 is_stmt 0 view .LVU628
 2756 0978 8D91      		ld r24,X+
 2757               	.LVL227:
 495:fat.c         **** 			{
 2758               		.loc 4 495 4 is_stmt 1 view .LVU629
 495:fat.c         **** 			{
 2759               		.loc 4 495 6 is_stmt 0 view .LVU630
 2760 097a 8032      		cpi r24,lo8(32)
 2761 097c 01F0      		breq .L140
 500:fat.c         **** 			{
 2762               		.loc 4 500 4 is_stmt 1 view .LVU631
 500:fat.c         **** 			{
 2763               		.loc 4 500 6 is_stmt 0 view .LVU632
 2764 097e 8530      		cpi r24,lo8(5)
 2765 0980 01F4      		brne .L141
 502:fat.c         **** 			}
 2766               		.loc 4 502 7 view .LVU633
 2767 0982 85EE      		ldi r24,lo8(-27)
 2768               	.LVL228:
 2769               	.L141:
 505:fat.c         **** 		}
 2770               		.loc 4 505 4 is_stmt 1 view .LVU634
 505:fat.c         **** 		}
 2771               		.loc 4 505 6 is_stmt 0 view .LVU635
 2772 0984 F801      		movw r30,r16
 2773               	.LVL229:
 505:fat.c         **** 		}
 2774               		.loc 4 505 9 view .LVU636
 2775 0986 8193      		st Z+,r24
 2776               	.LVL230:
 492:fat.c         **** 		{
 2777               		.loc 4 492 21 is_stmt 1 view .LVU637
 492:fat.c         **** 		{
 2778               		.loc 4 492 14 view .LVU638
 492:fat.c         **** 		{
 2779               		.loc 4 492 3 is_stmt 0 view .LVU639
 2780 0988 E217      		cp r30,r18
 2781 098a F307      		cpc r31,r19
 2782 098c 01F4      		brne .L146
 2783 098e 8901      		movw r16,r18
 2784               	.LVL231:
 2785               	.L140:
 508:fat.c         **** 		{
 2786               		.loc 4 508 3 is_stmt 1 view .LVU640
 508:fat.c         **** 		{
 2787               		.loc 4 508 5 is_stmt 0 view .LVU641
 2788 0990 8985      		ldd r24,Y+9
 2789               	.LVL232:
 508:fat.c         **** 		{
 2790               		.loc 4 508 5 view .LVU642
 2791 0992 8032      		cpi r24,lo8(32)
 2792 0994 01F0      		breq .L143
 510:fat.c         **** 			for(i = 8; i < 11; i++)
 2793               		.loc 4 510 4 is_stmt 1 view .LVU643
 510:fat.c         **** 			for(i = 8; i < 11; i++)
 2794               		.loc 4 510 6 is_stmt 0 view .LVU644
 2795 0996 F801      		movw r30,r16
 2796               	.LVL233:
 510:fat.c         **** 			for(i = 8; i < 11; i++)
 2797               		.loc 4 510 9 view .LVU645
 2798 0998 8EE2      		ldi r24,lo8(46)
 2799 099a 8193      		st Z+,r24
 2800               	.LVL234:
 511:fat.c         **** 			{
 2801               		.loc 4 511 4 is_stmt 1 view .LVU646
 511:fat.c         **** 			{
 2802               		.loc 4 511 15 view .LVU647
 2803 099c DE01      		movw r26,r28
 2804 099e 1996      		adiw r26,9
 2805 09a0 C801      		movw r24,r16
 2806 09a2 0496      		adiw r24,4
 2807               	.LVL235:
 2808               	.L147:
 511:fat.c         **** 			{
 2809               		.loc 4 511 15 is_stmt 0 view .LVU648
 2810 09a4 8F01      		movw r16,r30
 2811               	.LVL236:
 513:fat.c         **** 				if (c == ' ')
 2812               		.loc 4 513 5 is_stmt 1 view .LVU649
 513:fat.c         **** 				if (c == ' ')
 2813               		.loc 4 513 7 is_stmt 0 view .LVU650
 2814 09a6 2D91      		ld r18,X+
 2815               	.LVL237:
 514:fat.c         **** 				{
 2816               		.loc 4 514 5 is_stmt 1 view .LVU651
 514:fat.c         **** 				{
 2817               		.loc 4 514 8 is_stmt 0 view .LVU652
 2818 09a8 2032      		cpi r18,lo8(32)
 2819 09aa 01F0      		breq .L143
 519:fat.c         **** 			}
 2820               		.loc 4 519 5 is_stmt 1 view .LVU653
 2821               	.LVL238:
 519:fat.c         **** 			}
 2822               		.loc 4 519 10 is_stmt 0 view .LVU654
 2823 09ac 2193      		st Z+,r18
 2824               	.LVL239:
 511:fat.c         **** 			{
 2825               		.loc 4 511 23 is_stmt 1 view .LVU655
 511:fat.c         **** 			{
 2826               		.loc 4 511 15 view .LVU656
 511:fat.c         **** 			{
 2827               		.loc 4 511 4 is_stmt 0 view .LVU657
 2828 09ae E817      		cp r30,r24
 2829 09b0 F907      		cpc r31,r25
 2830 09b2 01F4      		brne .L147
 2831               	.LVL240:
 511:fat.c         **** 			{
 2832               		.loc 4 511 4 view .LVU658
 2833 09b4 8C01      		movw r16,r24
 2834               	.LVL241:
 2835               	.L143:
 523:fat.c         **** 		fno->size = ld_u32(dir + DIR_FILESIZE);
 2836               		.loc 4 523 3 is_stmt 1 view .LVU659
 523:fat.c         **** 		fno->size = ld_u32(dir + DIR_FILESIZE);
 2837               		.loc 4 523 29 is_stmt 0 view .LVU660
 2838 09b6 8C85      		ldd r24,Y+12
 2839 09b8 8071      		andi r24,lo8(16)
 523:fat.c         **** 		fno->size = ld_u32(dir + DIR_FILESIZE);
 2840               		.loc 4 523 13 view .LVU661
 2841 09ba D701      		movw r26,r14
 2842 09bc 1496      		adiw r26,4
 2843 09be 8C93      		st X,r24
 524:fat.c         **** 	}
 2844               		.loc 4 524 3 is_stmt 1 view .LVU662
 524:fat.c         **** 	}
 2845               		.loc 4 524 15 is_stmt 0 view .LVU663
 2846 09c0 CE01      		movw r24,r28
 2847 09c2 4D96      		adiw r24,29
 2848 09c4 0E94 0000 		call ld_u32
 2849               	.LVL242:
 2850 09c8 F701      		movw r30,r14
 2851 09ca 6083      		st Z,r22
 2852 09cc 7183      		std Z+1,r23
 2853 09ce 8283      		std Z+2,r24
 2854 09d0 9383      		std Z+3,r25
 2855 09d2 00C0      		rjmp .L138
 2856               	.LVL243:
 2857               	.L146:
 524:fat.c         **** 	}
 2858               		.loc 4 524 15 view .LVU664
 2859 09d4 8F01      		movw r16,r30
 2860 09d6 00C0      		rjmp .L142
 2861               	.LBE104:
 2862               	.LBE107:
 2863               		.cfi_endproc
 2864               	.LFE88:
 2867               	fat_fread.constprop.0:
 2868               	.LVL244:
 2869               	.LFB84:
 376:fat.c         **** {
 2870               		.loc 4 376 16 is_stmt 1 view -0
 2871               		.cfi_startproc
 376:fat.c         **** {
 2872               		.loc 4 376 16 is_stmt 0 view .LVU666
 2873 09d8 4F92      		push r4
 2874               	.LCFI89:
 2875               		.cfi_def_cfa_offset 3
 2876               		.cfi_offset 4, -2
 2877 09da 5F92      		push r5
 2878               	.LCFI90:
 2879               		.cfi_def_cfa_offset 4
 2880               		.cfi_offset 5, -3
 2881 09dc 6F92      		push r6
 2882               	.LCFI91:
 2883               		.cfi_def_cfa_offset 5
 2884               		.cfi_offset 6, -4
 2885 09de 7F92      		push r7
 2886               	.LCFI92:
 2887               		.cfi_def_cfa_offset 6
 2888               		.cfi_offset 7, -5
 2889 09e0 8F92      		push r8
 2890               	.LCFI93:
 2891               		.cfi_def_cfa_offset 7
 2892               		.cfi_offset 8, -6
 2893 09e2 9F92      		push r9
 2894               	.LCFI94:
 2895               		.cfi_def_cfa_offset 8
 2896               		.cfi_offset 9, -7
 2897 09e4 AF92      		push r10
 2898               	.LCFI95:
 2899               		.cfi_def_cfa_offset 9
 2900               		.cfi_offset 10, -8
 2901 09e6 BF92      		push r11
 2902               	.LCFI96:
 2903               		.cfi_def_cfa_offset 10
 2904               		.cfi_offset 11, -9
 2905 09e8 CF92      		push r12
 2906               	.LCFI97:
 2907               		.cfi_def_cfa_offset 11
 2908               		.cfi_offset 12, -10
 2909 09ea DF92      		push r13
 2910               	.LCFI98:
 2911               		.cfi_def_cfa_offset 12
 2912               		.cfi_offset 13, -11
 2913 09ec EF92      		push r14
 2914               	.LCFI99:
 2915               		.cfi_def_cfa_offset 13
 2916               		.cfi_offset 14, -12
 2917 09ee FF92      		push r15
 2918               	.LCFI100:
 2919               		.cfi_def_cfa_offset 14
 2920               		.cfi_offset 15, -13
 2921 09f0 0F93      		push r16
 2922               	.LCFI101:
 2923               		.cfi_def_cfa_offset 15
 2924               		.cfi_offset 16, -14
 2925 09f2 1F93      		push r17
 2926               	.LCFI102:
 2927               		.cfi_def_cfa_offset 16
 2928               		.cfi_offset 17, -15
 2929 09f4 CF93      		push r28
 2930               	.LCFI103:
 2931               		.cfi_def_cfa_offset 17
 2932               		.cfi_offset 28, -16
 2933 09f6 DF93      		push r29
 2934               	.LCFI104:
 2935               		.cfi_def_cfa_offset 18
 2936               		.cfi_offset 29, -17
 2937 09f8 00D0      		rcall .
 2938 09fa 00D0      		rcall .
 2939 09fc 00D0      		rcall .
 2940               	.LCFI105:
 2941               		.cfi_def_cfa_offset 24
 2942 09fe CDB7      		in r28,__SP_L__
 2943 0a00 DEB7      		in r29,__SP_H__
 2944               	.LCFI106:
 2945               		.cfi_def_cfa_register 28
 2946               	/* prologue: function */
 2947               	/* frame size = 6 */
 2948               	/* stack size = 22 */
 2949               	.L__stack_usage = 22
 2950 0a02 6C01      		movw r12,r24
 2951 0a04 5B01      		movw r10,r22
 2952               	.LVL245:
 378:fat.c         **** 	uint16_t rcnt;
 2953               		.loc 4 378 2 is_stmt 1 view .LVU667
 379:fat.c         **** 	uint8_t cs, *rbuf;
 2954               		.loc 4 379 2 view .LVU668
 380:fat.c         **** 	rbuf = buf;
 2955               		.loc 4 380 2 view .LVU669
 381:fat.c         **** 	*br = 0;
 2956               		.loc 4 381 2 view .LVU670
 382:fat.c         **** 	remain = fat_fsize - fat_ftell;
 2957               		.loc 4 382 2 view .LVU671
 382:fat.c         **** 	remain = fat_fsize - fat_ftell;
 2958               		.loc 4 382 6 is_stmt 0 view .LVU672
 2959 0a06 DB01      		movw r26,r22
 2960 0a08 1D92      		st X+,__zero_reg__
 2961 0a0a 1C92      		st X,__zero_reg__
 383:fat.c         **** 	if(btr > remain)
 2962               		.loc 4 383 2 is_stmt 1 view .LVU673
 383:fat.c         **** 	if(btr > remain)
 2963               		.loc 4 383 9 is_stmt 0 view .LVU674
 2964 0a0c 8091 0000 		lds r24,fat_fsize
 2965 0a10 9091 0000 		lds r25,fat_fsize+1
 2966 0a14 A091 0000 		lds r26,fat_fsize+2
 2967 0a18 B091 0000 		lds r27,fat_fsize+3
 2968               	.LVL246:
 383:fat.c         **** 	if(btr > remain)
 2969               		.loc 4 383 9 view .LVU675
 2970 0a1c 4091 0000 		lds r20,fat_ftell
 2971 0a20 5091 0000 		lds r21,fat_ftell+1
 2972 0a24 6091 0000 		lds r22,fat_ftell+2
 2973 0a28 7091 0000 		lds r23,fat_ftell+3
 2974 0a2c 841B      		sub r24,r20
 2975 0a2e 950B      		sbc r25,r21
 2976 0a30 A60B      		sbc r26,r22
 2977 0a32 B70B      		sbc r27,r23
 2978               	.LVL247:
 384:fat.c         **** 	{
 2979               		.loc 4 384 2 is_stmt 1 view .LVU676
 384:fat.c         **** 	{
 2980               		.loc 4 384 4 is_stmt 0 view .LVU677
 2981 0a34 8115      		cp r24,__zero_reg__
 2982 0a36 E2E0      		ldi r30,2
 2983 0a38 9E07      		cpc r25,r30
 2984 0a3a A105      		cpc r26,__zero_reg__
 2985 0a3c B105      		cpc r27,__zero_reg__
 2986 0a3e 00F0      		brlo .L167
 2987 0a40 80E0      		ldi r24,0
 2988 0a42 92E0      		ldi r25,lo8(2)
 2989 0a44 A0E0      		ldi r26,0
 2990 0a46 B0E0      		ldi r27,0
 2991               	.LVL248:
 2992               	.L167:
 384:fat.c         **** 	{
 2993               		.loc 4 384 4 view .LVU678
 2994 0a48 9E83      		std Y+6,r25
 2995 0a4a 8D83      		std Y+5,r24
 412:fat.c         **** 		{
 2996               		.loc 4 412 12 view .LVU679
 2997 0a4c 812C      		mov r8,__zero_reg__
 2998 0a4e 32E0      		ldi r19,lo8(2)
 2999 0a50 932E      		mov r9,r19
 3000               	.LVL249:
 3001               	.L168:
 389:fat.c         **** 	{
 3002               		.loc 4 389 7 is_stmt 1 view .LVU680
 3003 0a52 ED81      		ldd r30,Y+5
 3004 0a54 FE81      		ldd r31,Y+6
 3005               	.LVL250:
 389:fat.c         **** 	{
 3006               		.loc 4 389 7 is_stmt 0 view .LVU681
 3007 0a56 EF2B      		or r30,r31
 3008 0a58 01F4      		brne .L178
 431:fat.c         **** }
 3009               		.loc 4 431 9 view .LVU682
 3010 0a5a 80E0      		ldi r24,0
 3011 0a5c 00C0      		rjmp .L166
 3012               	.L178:
 3013               	.LVL251:
 391:fat.c         **** 		{
 3014               		.loc 4 391 3 is_stmt 1 view .LVU683
 391:fat.c         **** 		{
 3015               		.loc 4 391 17 is_stmt 0 view .LVU684
 3016 0a5e 4090 0000 		lds r4,fat_ftell
 3017 0a62 5090 0000 		lds r5,fat_ftell+1
 3018 0a66 6090 0000 		lds r6,fat_ftell+2
 3019 0a6a 7090 0000 		lds r7,fat_ftell+3
 3020 0a6e D301      		movw r26,r6
 3021 0a70 C201      		movw r24,r4
 3022 0a72 9170      		andi r25,1
 3023 0a74 AA27      		clr r26
 3024 0a76 BB27      		clr r27
 391:fat.c         **** 		{
 3025               		.loc 4 391 5 view .LVU685
 3026 0a78 892B      		or r24,r25
 3027 0a7a 8A2B      		or r24,r26
 3028 0a7c 8B2B      		or r24,r27
 3029 0a7e 01F0      		breq .+2
 3030 0a80 00C0      		rjmp .L169
 393:fat.c         **** 			{
 3031               		.loc 4 393 4 is_stmt 1 view .LVU686
 393:fat.c         **** 			{
 3032               		.loc 4 393 53 is_stmt 0 view .LVU687
 3033 0a82 F090 0000 		lds r15,_fs
 3034 0a86 FA94      		dec r15
 393:fat.c         **** 			{
 3035               		.loc 4 393 34 view .LVU688
 3036 0a88 D301      		movw r26,r6
 3037 0a8a C201      		movw r24,r4
 3038 0a8c 29E0      		ldi r18,9
 3039               		1:
 3040 0a8e B695      		lsr r27
 3041 0a90 A795      		ror r26
 3042 0a92 9795      		ror r25
 3043 0a94 8795      		ror r24
 3044 0a96 2A95      		dec r18
 3045 0a98 01F4      		brne 1b
 393:fat.c         **** 			{
 3046               		.loc 4 393 12 view .LVU689
 3047 0a9a F822      		and r15,r24
 3048               	.LVL252:
 393:fat.c         **** 			{
 3049               		.loc 4 393 6 view .LVU690
 3050 0a9c 01F0      		breq .+2
 3051 0a9e 00C0      		rjmp .L170
 395:fat.c         **** 					get_fat(_fs.curr_clust) : _fs.org_clust) <= 1)
 3052               		.loc 4 395 5 is_stmt 1 view .LVU691
 396:fat.c         **** 				{
 3053               		.loc 4 396 30 is_stmt 0 view .LVU692
 3054 0aa0 4114      		cp r4,__zero_reg__
 3055 0aa2 5104      		cpc r5,__zero_reg__
 3056 0aa4 6104      		cpc r6,__zero_reg__
 3057 0aa6 7104      		cpc r7,__zero_reg__
 3058 0aa8 01F0      		breq .L171
 396:fat.c         **** 				{
 3059               		.loc 4 396 6 view .LVU693
 3060 0aaa 8091 0000 		lds r24,_fs+23
 3061 0aae 9091 0000 		lds r25,_fs+23+1
 3062 0ab2 A091 0000 		lds r26,_fs+23+2
 3063 0ab6 B091 0000 		lds r27,_fs+23+3
 3064 0aba BC01      		movw r22,r24
 3065 0abc CD01      		movw r24,r26
 3066 0abe 0E94 0000 		call get_fat
 3067               	.LVL253:
 3068 0ac2 462F      		mov r20,r22
 3069 0ac4 572F      		mov r21,r23
 3070 0ac6 BC01      		movw r22,r24
 3071               	.L172:
 3072               	.LVL254:
 395:fat.c         **** 					get_fat(_fs.curr_clust) : _fs.org_clust) <= 1)
 3073               		.loc 4 395 7 view .LVU694
 3074 0ac8 4230      		cpi r20,2
 3075 0aca 5105      		cpc r21,__zero_reg__
 3076 0acc 6105      		cpc r22,__zero_reg__
 3077 0ace 7105      		cpc r23,__zero_reg__
 3078 0ad0 00F4      		brsh .L173
 3079               	.LVL255:
 3080               	.L175:
 398:fat.c         **** 				}
 3081               		.loc 4 398 13 view .LVU695
 3082 0ad2 81E0      		ldi r24,lo8(1)
 3083               	.L166:
 3084               	/* epilogue start */
 432:fat.c         **** 
 3085               		.loc 4 432 1 view .LVU696
 3086 0ad4 2696      		adiw r28,6
 3087 0ad6 0FB6      		in __tmp_reg__,__SREG__
 3088 0ad8 F894      		cli
 3089 0ada DEBF      		out __SP_H__,r29
 3090 0adc 0FBE      		out __SREG__,__tmp_reg__
 3091 0ade CDBF      		out __SP_L__,r28
 3092 0ae0 DF91      		pop r29
 3093 0ae2 CF91      		pop r28
 3094 0ae4 1F91      		pop r17
 3095 0ae6 0F91      		pop r16
 3096 0ae8 FF90      		pop r15
 3097 0aea EF90      		pop r14
 3098 0aec DF90      		pop r13
 3099 0aee CF90      		pop r12
 3100               	.LVL256:
 432:fat.c         **** 
 3101               		.loc 4 432 1 view .LVU697
 3102 0af0 BF90      		pop r11
 3103 0af2 AF90      		pop r10
 3104               	.LVL257:
 432:fat.c         **** 
 3105               		.loc 4 432 1 view .LVU698
 3106 0af4 9F90      		pop r9
 3107 0af6 8F90      		pop r8
 3108 0af8 7F90      		pop r7
 3109 0afa 6F90      		pop r6
 3110 0afc 5F90      		pop r5
 3111 0afe 4F90      		pop r4
 3112 0b00 0895      		ret
 3113               	.LVL258:
 3114               	.L171:
 396:fat.c         **** 				{
 3115               		.loc 4 396 30 view .LVU699
 3116 0b02 4091 0000 		lds r20,_fs+19
 3117 0b06 5091 0000 		lds r21,_fs+19+1
 3118 0b0a 6091 0000 		lds r22,_fs+19+2
 3119 0b0e 7091 0000 		lds r23,_fs+19+3
 3120 0b12 00C0      		rjmp .L172
 3121               	.LVL259:
 3122               	.L173:
 401:fat.c         **** 			}
 3123               		.loc 4 401 5 is_stmt 1 view .LVU700
 401:fat.c         **** 			}
 3124               		.loc 4 401 20 is_stmt 0 view .LVU701
 3125 0b14 4093 0000 		sts _fs+23,r20
 3126 0b18 5093 0000 		sts _fs+23+1,r21
 3127 0b1c 6093 0000 		sts _fs+23+2,r22
 3128 0b20 7093 0000 		sts _fs+23+3,r23
 3129               	.LVL260:
 3130               	.L170:
 404:fat.c         **** 			{
 3131               		.loc 4 404 4 is_stmt 1 view .LVU702
 404:fat.c         **** 			{
 3132               		.loc 4 404 16 is_stmt 0 view .LVU703
 3133 0b24 8091 0000 		lds r24,_fs+23
 3134 0b28 9091 0000 		lds r25,_fs+23+1
 3135 0b2c A091 0000 		lds r26,_fs+23+2
 3136 0b30 B091 0000 		lds r27,_fs+23+3
 3137 0b34 8983      		std Y+1,r24
 3138 0b36 9A83      		std Y+2,r25
 3139 0b38 AB83      		std Y+3,r26
 3140 0b3a BC83      		std Y+4,r27
 3141 0b3c BC01      		movw r22,r24
 3142 0b3e CD01      		movw r24,r26
 3143 0b40 0E94 0000 		call clust2sect
 3144               	.LVL261:
 3145 0b44 462F      		mov r20,r22
 3146 0b46 572F      		mov r21,r23
 3147 0b48 BC01      		movw r22,r24
 3148               	.LVL262:
 404:fat.c         **** 			{
 3149               		.loc 4 404 6 view .LVU704
 3150 0b4a 4115      		cp r20,__zero_reg__
 3151 0b4c 5105      		cpc r21,__zero_reg__
 3152 0b4e 6105      		cpc r22,__zero_reg__
 3153 0b50 7105      		cpc r23,__zero_reg__
 3154 0b52 01F4      		brne .+2
 3155 0b54 00C0      		rjmp .L175
 409:fat.c         **** 		}
 3156               		.loc 4 409 4 is_stmt 1 view .LVU705
 409:fat.c         **** 		}
 3157               		.loc 4 409 21 is_stmt 0 view .LVU706
 3158 0b56 4F0D      		add r20,r15
 3159 0b58 511D      		adc r21,__zero_reg__
 3160 0b5a 611D      		adc r22,__zero_reg__
 3161 0b5c 711D      		adc r23,__zero_reg__
 3162               	.LVL263:
 409:fat.c         **** 		}
 3163               		.loc 4 409 14 view .LVU707
 3164 0b5e 4093 0000 		sts _fs+27,r20
 3165 0b62 5093 0000 		sts _fs+27+1,r21
 3166 0b66 6093 0000 		sts _fs+27+2,r22
 3167 0b6a 7093 0000 		sts _fs+27+3,r23
 3168               	.LVL264:
 3169               	.L169:
 412:fat.c         **** 		{
 3170               		.loc 4 412 3 is_stmt 1 view .LVU708
 412:fat.c         **** 		{
 3171               		.loc 4 412 40 is_stmt 0 view .LVU709
 3172 0b6e 9201      		movw r18,r4
 3173 0b70 3170      		andi r19,1
 3174               	.LVL265:
 412:fat.c         **** 		{
 3175               		.loc 4 412 40 view .LVU710
 3176 0b72 7401      		movw r14,r8
 3177 0b74 E21A      		sub r14,r18
 3178 0b76 F30A      		sbc r15,r19
 3179               	.LVL266:
 412:fat.c         **** 		{
 3180               		.loc 4 412 40 view .LVU711
 3181 0b78 AD81      		ldd r26,Y+5
 3182 0b7a BE81      		ldd r27,Y+6
 3183 0b7c AE15      		cp r26,r14
 3184 0b7e BF05      		cpc r27,r15
 3185 0b80 00F4      		brsh .L176
 3186 0b82 7D01      		movw r14,r26
 3187               	.LVL267:
 3188               	.L176:
 417:fat.c         **** 		{
 3189               		.loc 4 417 3 is_stmt 1 view .LVU712
 417:fat.c         **** 		{
 3190               		.loc 4 417 6 is_stmt 0 view .LVU713
 3191 0b84 4091 0000 		lds r20,_fs+27
 3192 0b88 5091 0000 		lds r21,_fs+27+1
 3193 0b8c 6091 0000 		lds r22,_fs+27+2
 3194 0b90 7091 0000 		lds r23,_fs+27+3
 3195 0b94 8701      		movw r16,r14
 3196 0b96 C601      		movw r24,r12
 3197 0b98 0E94 0000 		call sd_read
 3198               	.LVL268:
 417:fat.c         **** 		{
 3199               		.loc 4 417 5 view .LVU714
 3200 0b9c 8111      		cpse r24,__zero_reg__
 3201 0b9e 00C0      		rjmp .L175
 422:fat.c         **** 		btr -= rcnt;
 3202               		.loc 4 422 3 is_stmt 1 view .LVU715
 422:fat.c         **** 		btr -= rcnt;
 3203               		.loc 4 422 13 is_stmt 0 view .LVU716
 3204 0ba0 4E0C      		add r4,r14
 3205 0ba2 5F1C      		adc r5,r15
 3206 0ba4 611C      		adc r6,__zero_reg__
 3207 0ba6 711C      		adc r7,__zero_reg__
 3208 0ba8 4092 0000 		sts fat_ftell,r4
 3209 0bac 5092 0000 		sts fat_ftell+1,r5
 3210 0bb0 6092 0000 		sts fat_ftell+2,r6
 3211 0bb4 7092 0000 		sts fat_ftell+3,r7
 423:fat.c         **** 		*br += rcnt;
 3212               		.loc 4 423 3 is_stmt 1 view .LVU717
 423:fat.c         **** 		*br += rcnt;
 3213               		.loc 4 423 7 is_stmt 0 view .LVU718
 3214 0bb8 ED81      		ldd r30,Y+5
 3215 0bba FE81      		ldd r31,Y+6
 3216 0bbc EE19      		sub r30,r14
 3217 0bbe FF09      		sbc r31,r15
 3218 0bc0 FE83      		std Y+6,r31
 3219 0bc2 ED83      		std Y+5,r30
 3220               	.LVL269:
 424:fat.c         **** 		if(rbuf)
 3221               		.loc 4 424 3 is_stmt 1 view .LVU719
 424:fat.c         **** 		if(rbuf)
 3222               		.loc 4 424 7 is_stmt 0 view .LVU720
 3223 0bc4 D501      		movw r26,r10
 3224 0bc6 8D91      		ld r24,X+
 3225 0bc8 9C91      		ld r25,X
 3226 0bca 1197      		sbiw r26,1
 3227 0bcc 8E0D      		add r24,r14
 3228 0bce 9F1D      		adc r25,r15
 3229 0bd0 8D93      		st X+,r24
 3230 0bd2 9C93      		st X,r25
 425:fat.c         **** 		{
 3231               		.loc 4 425 3 is_stmt 1 view .LVU721
 425:fat.c         **** 		{
 3232               		.loc 4 425 5 is_stmt 0 view .LVU722
 3233 0bd4 C114      		cp r12,__zero_reg__
 3234 0bd6 D104      		cpc r13,__zero_reg__
 3235 0bd8 01F4      		brne .+2
 3236 0bda 00C0      		rjmp .L168
 427:fat.c         **** 		}
 3237               		.loc 4 427 4 is_stmt 1 view .LVU723
 427:fat.c         **** 		}
 3238               		.loc 4 427 9 is_stmt 0 view .LVU724
 3239 0bdc CE0C      		add r12,r14
 3240 0bde DF1C      		adc r13,r15
 3241               	.LVL270:
 427:fat.c         **** 		}
 3242               		.loc 4 427 9 view .LVU725
 3243 0be0 00C0      		rjmp .L168
 3244               		.cfi_endproc
 3245               	.LFE84:
 3248               	fat_fseek.isra.0:
 3249               	.LVL271:
 3250               	.LFB79:
 434:fat.c         **** {
 3251               		.loc 4 434 16 is_stmt 1 view -0
 3252               		.cfi_startproc
 434:fat.c         **** {
 3253               		.loc 4 434 16 is_stmt 0 view .LVU727
 3254 0be2 4F92      		push r4
 3255               	.LCFI107:
 3256               		.cfi_def_cfa_offset 3
 3257               		.cfi_offset 4, -2
 3258 0be4 5F92      		push r5
 3259               	.LCFI108:
 3260               		.cfi_def_cfa_offset 4
 3261               		.cfi_offset 5, -3
 3262 0be6 6F92      		push r6
 3263               	.LCFI109:
 3264               		.cfi_def_cfa_offset 5
 3265               		.cfi_offset 6, -4
 3266 0be8 7F92      		push r7
 3267               	.LCFI110:
 3268               		.cfi_def_cfa_offset 6
 3269               		.cfi_offset 7, -5
 3270 0bea 8F92      		push r8
 3271               	.LCFI111:
 3272               		.cfi_def_cfa_offset 7
 3273               		.cfi_offset 8, -6
 3274 0bec 9F92      		push r9
 3275               	.LCFI112:
 3276               		.cfi_def_cfa_offset 8
 3277               		.cfi_offset 9, -7
 3278 0bee AF92      		push r10
 3279               	.LCFI113:
 3280               		.cfi_def_cfa_offset 9
 3281               		.cfi_offset 10, -8
 3282 0bf0 BF92      		push r11
 3283               	.LCFI114:
 3284               		.cfi_def_cfa_offset 10
 3285               		.cfi_offset 11, -9
 3286 0bf2 CF92      		push r12
 3287               	.LCFI115:
 3288               		.cfi_def_cfa_offset 11
 3289               		.cfi_offset 12, -10
 3290 0bf4 DF92      		push r13
 3291               	.LCFI116:
 3292               		.cfi_def_cfa_offset 12
 3293               		.cfi_offset 13, -11
 3294 0bf6 EF92      		push r14
 3295               	.LCFI117:
 3296               		.cfi_def_cfa_offset 13
 3297               		.cfi_offset 14, -12
 3298 0bf8 FF92      		push r15
 3299               	.LCFI118:
 3300               		.cfi_def_cfa_offset 14
 3301               		.cfi_offset 15, -13
 3302 0bfa CF93      		push r28
 3303               	.LCFI119:
 3304               		.cfi_def_cfa_offset 15
 3305               		.cfi_offset 28, -14
 3306 0bfc DF93      		push r29
 3307               	.LCFI120:
 3308               		.cfi_def_cfa_offset 16
 3309               		.cfi_offset 29, -15
 3310 0bfe CDB7      		in r28,__SP_L__
 3311 0c00 DEB7      		in r29,__SP_H__
 3312               	.LCFI121:
 3313               		.cfi_def_cfa_register 28
 3314 0c02 2997      		sbiw r28,9
 3315               	.LCFI122:
 3316               		.cfi_def_cfa_offset 25
 3317 0c04 0FB6      		in __tmp_reg__,__SREG__
 3318 0c06 F894      		cli
 3319 0c08 DEBF      		out __SP_H__,r29
 3320 0c0a 0FBE      		out __SREG__,__tmp_reg__
 3321 0c0c CDBF      		out __SP_L__,r28
 3322               	/* prologue: function */
 3323               	/* frame size = 9 */
 3324               	/* stack size = 23 */
 3325               	.L__stack_usage = 23
 3326 0c0e 462F      		mov r20,r22
 3327 0c10 572F      		mov r21,r23
 3328 0c12 BC01      		movw r22,r24
 3329               	.LVL272:
 436:fat.c         **** 	if(offset > fat_fsize)
 3330               		.loc 4 436 2 is_stmt 1 view .LVU728
 437:fat.c         **** 	{
 3331               		.loc 4 437 2 view .LVU729
 3332 0c14 8090 0000 		lds r8,fat_fsize
 3333 0c18 9090 0000 		lds r9,fat_fsize+1
 3334 0c1c A090 0000 		lds r10,fat_fsize+2
 3335 0c20 B090 0000 		lds r11,fat_fsize+3
 3336 0c24 4815      		cp r20,r8
 3337 0c26 5905      		cpc r21,r9
 3338 0c28 6A05      		cpc r22,r10
 3339 0c2a 7B05      		cpc r23,r11
 3340 0c2c 00F4      		brsh .L186
 3341 0c2e 4A01      		movw r8,r20
 3342 0c30 5C01      		movw r10,r24
 3343               	.L186:
 3344               	.LVL273:
 442:fat.c         **** 	fat_ftell = 0;
 3345               		.loc 4 442 2 view .LVU730
 442:fat.c         **** 	fat_ftell = 0;
 3346               		.loc 4 442 8 is_stmt 0 view .LVU731
 3347 0c32 8091 0000 		lds r24,fat_ftell
 3348 0c36 9091 0000 		lds r25,fat_ftell+1
 3349 0c3a A091 0000 		lds r26,fat_ftell+2
 3350 0c3e B091 0000 		lds r27,fat_ftell+3
 3351               	.LVL274:
 443:fat.c         **** 	if(offset > 0)
 3352               		.loc 4 443 2 is_stmt 1 view .LVU732
 443:fat.c         **** 	if(offset > 0)
 3353               		.loc 4 443 12 is_stmt 0 view .LVU733
 3354 0c42 1092 0000 		sts fat_ftell,__zero_reg__
 3355 0c46 1092 0000 		sts fat_ftell+1,__zero_reg__
 3356 0c4a 1092 0000 		sts fat_ftell+2,__zero_reg__
 3357 0c4e 1092 0000 		sts fat_ftell+3,__zero_reg__
 444:fat.c         **** 	{
 3358               		.loc 4 444 2 is_stmt 1 view .LVU734
 444:fat.c         **** 	{
 3359               		.loc 4 444 4 is_stmt 0 view .LVU735
 3360 0c52 8114      		cp r8,__zero_reg__
 3361 0c54 9104      		cpc r9,__zero_reg__
 3362 0c56 A104      		cpc r10,__zero_reg__
 3363 0c58 B104      		cpc r11,__zero_reg__
 3364 0c5a 01F4      		brne .+2
 3365 0c5c 00C0      		rjmp .L185
 446:fat.c         **** 		if(ifptr > 0 && (offset - 1) / bcs >= (ifptr - 1) / bcs)
 3366               		.loc 4 446 3 is_stmt 1 view .LVU736
 446:fat.c         **** 		if(ifptr > 0 && (offset - 1) / bcs >= (ifptr - 1) / bcs)
 3367               		.loc 4 446 22 is_stmt 0 view .LVU737
 3368 0c5e 2091 0000 		lds r18,_fs
 3369 0c62 2987      		std Y+9,r18
 446:fat.c         **** 		if(ifptr > 0 && (offset - 1) / bcs >= (ifptr - 1) / bcs)
 3370               		.loc 4 446 9 view .LVU738
 3371 0c64 422E      		mov r4,r18
 3372 0c66 512C      		mov r5,__zero_reg__
 3373 0c68 712C      		mov r7,__zero_reg__
 3374 0c6a 612C      		mov r6,__zero_reg__
 446:fat.c         **** 		if(ifptr > 0 && (offset - 1) / bcs >= (ifptr - 1) / bcs)
 3375               		.loc 4 446 7 view .LVU739
 3376 0c6c 29E0      		ldi r18,9
 3377               		1:
 3378 0c6e 440C      		lsl r4
 3379 0c70 551C      		rol r5
 3380 0c72 661C      		rol r6
 3381 0c74 771C      		rol r7
 3382 0c76 2A95      		dec r18
 3383 0c78 01F4      		brne 1b
 3384               	.LVL275:
 447:fat.c         **** 		{
 3385               		.loc 4 447 3 is_stmt 1 view .LVU740
 447:fat.c         **** 		{
 3386               		.loc 4 447 5 is_stmt 0 view .LVU741
 3387 0c7a 0097      		sbiw r24,0
 3388 0c7c A105      		cpc r26,__zero_reg__
 3389 0c7e B105      		cpc r27,__zero_reg__
 3390 0c80 01F4      		brne .+2
 3391 0c82 00C0      		rjmp .L189
 447:fat.c         **** 		{
 3392               		.loc 4 447 48 view .LVU742
 3393 0c84 9C01      		movw r18,r24
 3394 0c86 AD01      		movw r20,r26
 3395 0c88 2150      		subi r18,1
 3396 0c8a 3109      		sbc r19,__zero_reg__
 3397 0c8c 4109      		sbc r20,__zero_reg__
 3398 0c8e 5109      		sbc r21,__zero_reg__
 3399 0c90 2983      		std Y+1,r18
 3400 0c92 3A83      		std Y+2,r19
 3401 0c94 4B83      		std Y+3,r20
 3402 0c96 5C83      		std Y+4,r21
 447:fat.c         **** 		{
 3403               		.loc 4 447 27 view .LVU743
 3404 0c98 D501      		movw r26,r10
 3405 0c9a C401      		movw r24,r8
 3406               	.LVL276:
 447:fat.c         **** 		{
 3407               		.loc 4 447 27 view .LVU744
 3408 0c9c 0197      		sbiw r24,1
 3409 0c9e A109      		sbc r26,__zero_reg__
 3410 0ca0 B109      		sbc r27,__zero_reg__
 447:fat.c         **** 		{
 3411               		.loc 4 447 32 view .LVU745
 3412 0ca2 BC01      		movw r22,r24
 3413 0ca4 CD01      		movw r24,r26
 3414 0ca6 A301      		movw r20,r6
 3415 0ca8 9201      		movw r18,r4
 3416 0caa 0E94 0000 		call __udivmodsi4
 3417 0cae 6901      		movw r12,r18
 3418 0cb0 7A01      		movw r14,r20
 447:fat.c         **** 		{
 3419               		.loc 4 447 53 view .LVU746
 3420 0cb2 6981      		ldd r22,Y+1
 3421 0cb4 7A81      		ldd r23,Y+2
 3422 0cb6 8B81      		ldd r24,Y+3
 3423 0cb8 9C81      		ldd r25,Y+4
 3424 0cba A301      		movw r20,r6
 3425 0cbc 9201      		movw r18,r4
 3426 0cbe 0E94 0000 		call __udivmodsi4
 447:fat.c         **** 		{
 3427               		.loc 4 447 16 view .LVU747
 3428 0cc2 C216      		cp r12,r18
 3429 0cc4 D306      		cpc r13,r19
 3430 0cc6 E406      		cpc r14,r20
 3431 0cc8 F506      		cpc r15,r21
 3432 0cca 00F4      		brsh .+2
 3433 0ccc 00C0      		rjmp .L189
 449:fat.c         **** 			offset -= fat_ftell;
 3434               		.loc 4 449 4 is_stmt 1 view .LVU748
 449:fat.c         **** 			offset -= fat_ftell;
 3435               		.loc 4 449 30 is_stmt 0 view .LVU749
 3436 0cce 8827      		clr r24
 3437 0cd0 9927      		clr r25
 3438 0cd2 DC01      		movw r26,r24
 3439 0cd4 8419      		sub r24,r4
 3440 0cd6 9509      		sbc r25,r5
 3441 0cd8 A609      		sbc r26,r6
 3442 0cda B709      		sbc r27,r7
 449:fat.c         **** 			offset -= fat_ftell;
 3443               		.loc 4 449 28 view .LVU750
 3444 0cdc 2981      		ldd r18,Y+1
 3445 0cde 3A81      		ldd r19,Y+2
 3446 0ce0 4B81      		ldd r20,Y+3
 3447 0ce2 5C81      		ldd r21,Y+4
 3448 0ce4 8223      		and r24,r18
 3449 0ce6 9323      		and r25,r19
 3450 0ce8 A423      		and r26,r20
 3451 0cea B523      		and r27,r21
 449:fat.c         **** 			offset -= fat_ftell;
 3452               		.loc 4 449 14 view .LVU751
 3453 0cec 8093 0000 		sts fat_ftell,r24
 3454 0cf0 9093 0000 		sts fat_ftell+1,r25
 3455 0cf4 A093 0000 		sts fat_ftell+2,r26
 3456 0cf8 B093 0000 		sts fat_ftell+3,r27
 450:fat.c         **** 			clst = _fs.curr_clust;
 3457               		.loc 4 450 4 is_stmt 1 view .LVU752
 450:fat.c         **** 			clst = _fs.curr_clust;
 3458               		.loc 4 450 11 is_stmt 0 view .LVU753
 3459 0cfc 881A      		sub r8,r24
 3460 0cfe 990A      		sbc r9,r25
 3461 0d00 AA0A      		sbc r10,r26
 3462 0d02 BB0A      		sbc r11,r27
 3463               	.LVL277:
 451:fat.c         **** 		}
 3464               		.loc 4 451 4 is_stmt 1 view .LVU754
 451:fat.c         **** 		}
 3465               		.loc 4 451 9 is_stmt 0 view .LVU755
 3466 0d04 6091 0000 		lds r22,_fs+23
 3467 0d08 7091 0000 		lds r23,_fs+23+1
 3468 0d0c 8091 0000 		lds r24,_fs+23+2
 3469 0d10 9091 0000 		lds r25,_fs+23+3
 3470               	.LVL278:
 3471               	.L191:
 459:fat.c         **** 		{
 3472               		.loc 4 459 8 is_stmt 1 view .LVU756
 3473 0d14 4814      		cp r4,r8
 3474 0d16 5904      		cpc r5,r9
 3475 0d18 6A04      		cpc r6,r10
 3476 0d1a 7B04      		cpc r7,r11
 3477 0d1c 00F4      		brsh .+2
 3478 0d1e 00C0      		rjmp .L193
 472:fat.c         **** 		if(!(sect = clust2sect(clst)))
 3479               		.loc 4 472 3 view .LVU757
 472:fat.c         **** 		if(!(sect = clust2sect(clst)))
 3480               		.loc 4 472 13 is_stmt 0 view .LVU758
 3481 0d20 C090 0000 		lds r12,fat_ftell
 3482 0d24 D090 0000 		lds r13,fat_ftell+1
 3483 0d28 E090 0000 		lds r14,fat_ftell+2
 3484 0d2c F090 0000 		lds r15,fat_ftell+3
 3485 0d30 C80C      		add r12,r8
 3486 0d32 D91C      		adc r13,r9
 3487 0d34 EA1C      		adc r14,r10
 3488 0d36 FB1C      		adc r15,r11
 3489 0d38 C092 0000 		sts fat_ftell,r12
 3490 0d3c D092 0000 		sts fat_ftell+1,r13
 3491 0d40 E092 0000 		sts fat_ftell+2,r14
 3492 0d44 F092 0000 		sts fat_ftell+3,r15
 473:fat.c         **** 		{
 3493               		.loc 4 473 3 is_stmt 1 view .LVU759
 473:fat.c         **** 		{
 3494               		.loc 4 473 15 is_stmt 0 view .LVU760
 3495 0d48 0E94 0000 		call clust2sect
 3496               	.LVL279:
 473:fat.c         **** 		{
 3497               		.loc 4 473 15 view .LVU761
 3498 0d4c 462F      		mov r20,r22
 3499 0d4e 572F      		mov r21,r23
 3500 0d50 BC01      		movw r22,r24
 3501               	.LVL280:
 473:fat.c         **** 		{
 3502               		.loc 4 473 5 view .LVU762
 3503 0d52 4115      		cp r20,__zero_reg__
 3504 0d54 5105      		cpc r21,__zero_reg__
 3505 0d56 6105      		cpc r22,__zero_reg__
 3506 0d58 7105      		cpc r23,__zero_reg__
 3507 0d5a 01F0      		breq .L185
 478:fat.c         **** 	}
 3508               		.loc 4 478 3 is_stmt 1 view .LVU763
 478:fat.c         **** 	}
 3509               		.loc 4 478 33 is_stmt 0 view .LVU764
 3510 0d5c 89E0      		ldi r24,9
 3511               		1:
 3512 0d5e F694      		lsr r15
 3513 0d60 E794      		ror r14
 3514 0d62 D794      		ror r13
 3515 0d64 C794      		ror r12
 3516 0d66 8A95      		dec r24
 3517 0d68 01F4      		brne 1b
 478:fat.c         **** 	}
 3518               		.loc 4 478 52 view .LVU765
 3519 0d6a A985      		ldd r26,Y+9
 3520 0d6c A150      		subi r26,1
 3521 0d6e BB0B      		sbc r27,r27
 3522 0d70 CD01      		movw r24,r26
 3523 0d72 092E      		mov __tmp_reg__,r25
 3524 0d74 000C      		lsl r0
 3525 0d76 AA0B      		sbc r26,r26
 3526 0d78 BB0B      		sbc r27,r27
 478:fat.c         **** 	}
 3527               		.loc 4 478 39 view .LVU766
 3528 0d7a 8C21      		and r24,r12
 3529 0d7c 9D21      		and r25,r13
 3530 0d7e AE21      		and r26,r14
 3531 0d80 BF21      		and r27,r15
 478:fat.c         **** 	}
 3532               		.loc 4 478 20 view .LVU767
 3533 0d82 6C01      		movw r12,r24
 3534 0d84 7D01      		movw r14,r26
 3535 0d86 C40E      		add r12,r20
 3536 0d88 D51E      		adc r13,r21
 3537 0d8a E61E      		adc r14,r22
 3538 0d8c F71E      		adc r15,r23
 478:fat.c         **** 	}
 3539               		.loc 4 478 13 view .LVU768
 3540 0d8e C092 0000 		sts _fs+27,r12
 3541 0d92 D092 0000 		sts _fs+27+1,r13
 3542 0d96 E092 0000 		sts _fs+27+2,r14
 3543 0d9a F092 0000 		sts _fs+27+3,r15
 3544               	.LVL281:
 3545               	.L185:
 3546               	/* epilogue start */
 482:fat.c         **** 
 3547               		.loc 4 482 1 view .LVU769
 3548 0d9e 2996      		adiw r28,9
 3549 0da0 0FB6      		in __tmp_reg__,__SREG__
 3550 0da2 F894      		cli
 3551 0da4 DEBF      		out __SP_H__,r29
 3552 0da6 0FBE      		out __SREG__,__tmp_reg__
 3553 0da8 CDBF      		out __SP_L__,r28
 3554 0daa DF91      		pop r29
 3555 0dac CF91      		pop r28
 3556 0dae FF90      		pop r15
 3557 0db0 EF90      		pop r14
 3558 0db2 DF90      		pop r13
 3559 0db4 CF90      		pop r12
 3560 0db6 BF90      		pop r11
 3561 0db8 AF90      		pop r10
 3562 0dba 9F90      		pop r9
 3563 0dbc 8F90      		pop r8
 3564               	.LVL282:
 482:fat.c         **** 
 3565               		.loc 4 482 1 view .LVU770
 3566 0dbe 7F90      		pop r7
 3567 0dc0 6F90      		pop r6
 3568 0dc2 5F90      		pop r5
 3569 0dc4 4F90      		pop r4
 3570 0dc6 0895      		ret
 3571               	.LVL283:
 3572               	.L189:
 455:fat.c         **** 			_fs.curr_clust = clst;
 3573               		.loc 4 455 4 is_stmt 1 view .LVU771
 455:fat.c         **** 			_fs.curr_clust = clst;
 3574               		.loc 4 455 9 is_stmt 0 view .LVU772
 3575 0dc8 6091 0000 		lds r22,_fs+19
 3576 0dcc 7091 0000 		lds r23,_fs+19+1
 3577 0dd0 8091 0000 		lds r24,_fs+19+2
 3578 0dd4 9091 0000 		lds r25,_fs+19+3
 3579               	.LVL284:
 456:fat.c         **** 		}
 3580               		.loc 4 456 4 is_stmt 1 view .LVU773
 456:fat.c         **** 		}
 3581               		.loc 4 456 19 is_stmt 0 view .LVU774
 3582 0dd8 6093 0000 		sts _fs+23,r22
 3583 0ddc 7093 0000 		sts _fs+23+1,r23
 3584 0de0 8093 0000 		sts _fs+23+2,r24
 3585 0de4 9093 0000 		sts _fs+23+3,r25
 3586 0de8 00C0      		rjmp .L191
 3587               	.L193:
 461:fat.c         **** 			if(clst <= 1 || clst >= _fs.n_fatent)
 3588               		.loc 4 461 4 is_stmt 1 view .LVU775
 461:fat.c         **** 			if(clst <= 1 || clst >= _fs.n_fatent)
 3589               		.loc 4 461 11 is_stmt 0 view .LVU776
 3590 0dea 0E94 0000 		call get_fat
 3591               	.LVL285:
 462:fat.c         **** 			{
 3592               		.loc 4 462 4 is_stmt 1 view .LVU777
 462:fat.c         **** 			{
 3593               		.loc 4 462 6 is_stmt 0 view .LVU778
 3594 0dee 6230      		cpi r22,2
 3595 0df0 7105      		cpc r23,__zero_reg__
 3596 0df2 8105      		cpc r24,__zero_reg__
 3597 0df4 9105      		cpc r25,__zero_reg__
 3598 0df6 00F0      		brlo .L185
 462:fat.c         **** 			{
 3599               		.loc 4 462 17 view .LVU779
 3600 0df8 C090 0000 		lds r12,_fs+3
 3601 0dfc D090 0000 		lds r13,_fs+3+1
 3602 0e00 E090 0000 		lds r14,_fs+3+2
 3603 0e04 F090 0000 		lds r15,_fs+3+3
 3604 0e08 6C15      		cp r22,r12
 3605 0e0a 7D05      		cpc r23,r13
 3606 0e0c 8E05      		cpc r24,r14
 3607 0e0e 9F05      		cpc r25,r15
 3608 0e10 00F4      		brsh .L185
 467:fat.c         **** 			fat_ftell += bcs;
 3609               		.loc 4 467 4 is_stmt 1 view .LVU780
 467:fat.c         **** 			fat_ftell += bcs;
 3610               		.loc 4 467 19 is_stmt 0 view .LVU781
 3611 0e12 6093 0000 		sts _fs+23,r22
 3612 0e16 7093 0000 		sts _fs+23+1,r23
 3613 0e1a 8093 0000 		sts _fs+23+2,r24
 3614 0e1e 9093 0000 		sts _fs+23+3,r25
 468:fat.c         **** 			offset -= bcs;
 3615               		.loc 4 468 4 is_stmt 1 view .LVU782
 468:fat.c         **** 			offset -= bcs;
 3616               		.loc 4 468 14 is_stmt 0 view .LVU783
 3617 0e22 C090 0000 		lds r12,fat_ftell
 3618 0e26 D090 0000 		lds r13,fat_ftell+1
 3619 0e2a E090 0000 		lds r14,fat_ftell+2
 3620 0e2e F090 0000 		lds r15,fat_ftell+3
 3621 0e32 C40C      		add r12,r4
 3622 0e34 D51C      		adc r13,r5
 3623 0e36 E61C      		adc r14,r6
 3624 0e38 F71C      		adc r15,r7
 3625 0e3a C092 0000 		sts fat_ftell,r12
 3626 0e3e D092 0000 		sts fat_ftell+1,r13
 3627 0e42 E092 0000 		sts fat_ftell+2,r14
 3628 0e46 F092 0000 		sts fat_ftell+3,r15
 469:fat.c         **** 		}
 3629               		.loc 4 469 4 is_stmt 1 view .LVU784
 469:fat.c         **** 		}
 3630               		.loc 4 469 11 is_stmt 0 view .LVU785
 3631 0e4a 8418      		sub r8,r4
 3632 0e4c 9508      		sbc r9,r5
 3633 0e4e A608      		sbc r10,r6
 3634 0e50 B708      		sbc r11,r7
 3635               	.LVL286:
 469:fat.c         **** 		}
 3636               		.loc 4 469 11 view .LVU786
 3637 0e52 00C0      		rjmp .L191
 3638               		.cfi_endproc
 3639               	.LFE79:
 3642               	follow_path.constprop.0:
 3643               	.LVL287:
 3644               	.LFB82:
 231:fat.c         **** {
 3645               		.loc 4 231 16 is_stmt 1 view -0
 3646               		.cfi_startproc
 231:fat.c         **** {
 3647               		.loc 4 231 16 is_stmt 0 view .LVU788
 3648 0e54 AF92      		push r10
 3649               	.LCFI123:
 3650               		.cfi_def_cfa_offset 3
 3651               		.cfi_offset 10, -2
 3652 0e56 BF92      		push r11
 3653               	.LCFI124:
 3654               		.cfi_def_cfa_offset 4
 3655               		.cfi_offset 11, -3
 3656 0e58 CF92      		push r12
 3657               	.LCFI125:
 3658               		.cfi_def_cfa_offset 5
 3659               		.cfi_offset 12, -4
 3660 0e5a DF92      		push r13
 3661               	.LCFI126:
 3662               		.cfi_def_cfa_offset 6
 3663               		.cfi_offset 13, -5
 3664 0e5c EF92      		push r14
 3665               	.LCFI127:
 3666               		.cfi_def_cfa_offset 7
 3667               		.cfi_offset 14, -6
 3668 0e5e FF92      		push r15
 3669               	.LCFI128:
 3670               		.cfi_def_cfa_offset 8
 3671               		.cfi_offset 15, -7
 3672 0e60 0F93      		push r16
 3673               	.LCFI129:
 3674               		.cfi_def_cfa_offset 9
 3675               		.cfi_offset 16, -8
 3676 0e62 1F93      		push r17
 3677               	.LCFI130:
 3678               		.cfi_def_cfa_offset 10
 3679               		.cfi_offset 17, -9
 3680 0e64 CF93      		push r28
 3681               	.LCFI131:
 3682               		.cfi_def_cfa_offset 11
 3683               		.cfi_offset 28, -10
 3684 0e66 DF93      		push r29
 3685               	.LCFI132:
 3686               		.cfi_def_cfa_offset 12
 3687               		.cfi_offset 29, -11
 3688               	/* prologue: function */
 3689               	/* frame size = 0 */
 3690               	/* stack size = 10 */
 3691               	.L__stack_usage = 10
 3692 0e68 7C01      		movw r14,r24
 3693 0e6a 6B01      		movw r12,r22
 3694               	.LVL288:
 231:fat.c         **** {
 3695               		.loc 4 231 16 view .LVU789
 3696 0e6c 80E0      		ldi r24,lo8(dir_path)
 3697 0e6e 90E0      		ldi r25,hi8(dir_path)
 3698               	.LVL289:
 3699               	.L201:
 231:fat.c         **** {
 3700               		.loc 4 231 16 view .LVU790
 3701 0e70 5C01      		movw r10,r24
 234:fat.c         **** 	{
 3702               		.loc 4 234 7 is_stmt 1 view .LVU791
 234:fat.c         **** 	{
 3703               		.loc 4 234 8 is_stmt 0 view .LVU792
 3704 0e72 FC01      		movw r30,r24
 3705 0e74 2081      		ld r18,Z
 3706               	.LVL290:
 234:fat.c         **** 	{
 3707               		.loc 4 234 8 view .LVU793
 3708 0e76 0196      		adiw r24,1
 3709               	.LVL291:
 234:fat.c         **** 	{
 3710               		.loc 4 234 7 view .LVU794
 3711 0e78 2032      		cpi r18,lo8(32)
 3712 0e7a 01F0      		breq .L201
 239:fat.c         **** 	{
 3713               		.loc 4 239 2 is_stmt 1 view .LVU795
 239:fat.c         **** 	{
 3714               		.loc 4 239 4 is_stmt 0 view .LVU796
 3715 0e7c 2F32      		cpi r18,lo8(47)
 3716 0e7e 01F4      		brne .L202
 241:fat.c         **** 	}
 3717               		.loc 4 241 3 is_stmt 1 view .LVU797
 3718 0e80 5C01      		movw r10,r24
 3719               	.L202:
 3720               	.LVL292:
 244:fat.c         **** 	if(*path < ' ')
 3721               		.loc 4 244 2 view .LVU798
 244:fat.c         **** 	if(*path < ' ')
 3722               		.loc 4 244 13 is_stmt 0 view .LVU799
 3723 0e82 F701      		movw r30,r14
 3724 0e84 1482      		std Z+4,__zero_reg__
 3725 0e86 1582      		std Z+5,__zero_reg__
 3726 0e88 1682      		std Z+6,__zero_reg__
 3727 0e8a 1782      		std Z+7,__zero_reg__
 245:fat.c         **** 	{
 3728               		.loc 4 245 2 is_stmt 1 view .LVU800
 245:fat.c         **** 	{
 3729               		.loc 4 245 4 is_stmt 0 view .LVU801
 3730 0e8c F501      		movw r30,r10
 3731 0e8e 8081      		ld r24,Z
 3732 0e90 8032      		cpi r24,lo8(32)
 3733 0e92 00F0      		brlo .+2
 3734 0e94 00C0      		rjmp .L203
 247:fat.c         **** 		dir[0] = 0;
 3735               		.loc 4 247 3 is_stmt 1 view .LVU802
 247:fat.c         **** 		dir[0] = 0;
 3736               		.loc 4 247 9 is_stmt 0 view .LVU803
 3737 0e96 C701      		movw r24,r14
 3738 0e98 0E94 0000 		call dir_rewind
 3739               	.LVL293:
 247:fat.c         **** 		dir[0] = 0;
 3740               		.loc 4 247 9 view .LVU804
 3741 0e9c C82F      		mov r28,r24
 3742               	.LVL294:
 248:fat.c         **** 	}
 3743               		.loc 4 248 3 is_stmt 1 view .LVU805
 248:fat.c         **** 	}
 3744               		.loc 4 248 10 is_stmt 0 view .LVU806
 3745 0e9e F601      		movw r30,r12
 3746 0ea0 1082      		st Z,__zero_reg__
 3747               	.LVL295:
 3748               	.L200:
 280:fat.c         **** 
 3749               		.loc 4 280 1 view .LVU807
 3750 0ea2 8C2F      		mov r24,r28
 3751               	/* epilogue start */
 3752 0ea4 DF91      		pop r29
 3753 0ea6 CF91      		pop r28
 3754 0ea8 1F91      		pop r17
 3755 0eaa 0F91      		pop r16
 3756 0eac FF90      		pop r15
 3757 0eae EF90      		pop r14
 3758               	.LVL296:
 280:fat.c         **** 
 3759               		.loc 4 280 1 view .LVU808
 3760 0eb0 DF90      		pop r13
 3761 0eb2 CF90      		pop r12
 3762               	.LVL297:
 280:fat.c         **** 
 3763               		.loc 4 280 1 view .LVU809
 3764 0eb4 BF90      		pop r11
 3765 0eb6 AF90      		pop r10
 3766               	.LVL298:
 280:fat.c         **** 
 3767               		.loc 4 280 1 view .LVU810
 3768 0eb8 0895      		ret
 3769               	.LVL299:
 3770               	.L206:
 3771               	.LBB120:
 3772               	.LBB121:
 131:fat.c         **** 	sfn[11] = (c <= ' ');
 3773               		.loc 4 131 2 is_stmt 1 view .LVU811
 131:fat.c         **** 	sfn[11] = (c <= ' ');
 3774               		.loc 4 131 10 is_stmt 0 view .LVU812
 3775 0eba A40E      		add r10,r20
 3776 0ebc B11C      		adc r11,__zero_reg__
 3777               	.LVL300:
 132:fat.c         **** 	return 0;
 3778               		.loc 4 132 2 is_stmt 1 view .LVU813
 132:fat.c         **** 	return 0;
 3779               		.loc 4 132 15 is_stmt 0 view .LVU814
 3780 0ebe 91E0      		ldi r25,lo8(1)
 3781               	.LVL301:
 132:fat.c         **** 	return 0;
 3782               		.loc 4 132 15 view .LVU815
 3783 0ec0 8132      		cpi r24,lo8(33)
 3784 0ec2 00F0      		brlo .L210
 132:fat.c         **** 	return 0;
 3785               		.loc 4 132 15 view .LVU816
 3786 0ec4 90E0      		ldi r25,0
 3787               	.L210:
 132:fat.c         **** 	return 0;
 3788               		.loc 4 132 10 view .LVU817
 3789 0ec6 9B87      		std Y+11,r25
 133:fat.c         **** }
 3790               		.loc 4 133 2 is_stmt 1 view .LVU818
 3791               	.LVL302:
 133:fat.c         **** }
 3792               		.loc 4 133 2 is_stmt 0 view .LVU819
 3793               	.LBE121:
 3794               	.LBE120:
 259:fat.c         **** 			{
 3795               		.loc 4 259 4 is_stmt 1 view .LVU820
 3796               	.LBB125:
 3797               	.LBI125:
 200:fat.c         **** {
 3798               		.loc 4 200 16 view .LVU821
 3799               	.LBB126:
 202:fat.c         **** 	if((res = dir_rewind(dj)))
 3800               		.loc 4 202 2 view .LVU822
 203:fat.c         **** 	{
 3801               		.loc 4 203 2 view .LVU823
 203:fat.c         **** 	{
 3802               		.loc 4 203 12 is_stmt 0 view .LVU824
 3803 0ec8 C701      		movw r24,r14
 3804 0eca 0E94 0000 		call dir_rewind
 3805               	.LVL303:
 3806               	.L226:
 203:fat.c         **** 	{
 3807               		.loc 4 203 12 view .LVU825
 3808 0ece C82F      		mov r28,r24
 3809               	.LVL304:
 203:fat.c         **** 	{
 3810               		.loc 4 203 4 view .LVU826
 3811 0ed0 8111      		cpse r24,__zero_reg__
 3812 0ed2 00C0      		rjmp .L200
 208:fat.c         **** 	{
 3813               		.loc 4 208 2 is_stmt 1 view .LVU827
 210:fat.c         **** 		{
 3814               		.loc 4 210 3 view .LVU828
 210:fat.c         **** 		{
 3815               		.loc 4 210 47 is_stmt 0 view .LVU829
 3816 0ed4 F701      		movw r30,r14
 3817 0ed6 2081      		ld r18,Z
 3818 0ed8 3181      		ldd r19,Z+1
 3819 0eda 2F70      		andi r18,15
 3820 0edc 3327      		clr r19
 210:fat.c         **** 		{
 3821               		.loc 4 210 13 view .LVU830
 3822 0ede 45E0      		ldi r20,5
 3823               		1:
 3824 0ee0 220F      		lsl r18
 3825 0ee2 331F      		rol r19
 3826 0ee4 4A95      		dec r20
 3827 0ee6 01F4      		brne 1b
 3828 0ee8 4485      		ldd r20,Z+12
 3829 0eea 5585      		ldd r21,Z+13
 3830 0eec 6685      		ldd r22,Z+14
 3831 0eee 7785      		ldd r23,Z+15
 3832 0ef0 00E2      		ldi r16,lo8(32)
 3833 0ef2 10E0      		ldi r17,0
 3834 0ef4 C601      		movw r24,r12
 3835               	.LVL305:
 210:fat.c         **** 		{
 3836               		.loc 4 210 13 view .LVU831
 3837 0ef6 0E94 0000 		call sd_read
 3838               	.LVL306:
 3839 0efa C82F      		mov r28,r24
 3840               	.LVL307:
 210:fat.c         **** 		{
 3841               		.loc 4 210 5 view .LVU832
 3842 0efc 8111      		cpse r24,__zero_reg__
 3843 0efe 00C0      		rjmp .L200
 215:fat.c         **** 		{
 3844               		.loc 4 215 3 is_stmt 1 view .LVU833
 215:fat.c         **** 		{
 3845               		.loc 4 215 5 is_stmt 0 view .LVU834
 3846 0f00 F601      		movw r30,r12
 3847 0f02 8081      		ld r24,Z
 3848               	.LVL308:
 215:fat.c         **** 		{
 3849               		.loc 4 215 5 view .LVU835
 3850 0f04 8823      		tst r24
 3851 0f06 01F0      		breq .L216
 221:fat.c         **** 		{
 3852               		.loc 4 221 3 is_stmt 1 view .LVU836
 221:fat.c         **** 		{
 3853               		.loc 4 221 11 is_stmt 0 view .LVU837
 3854 0f08 D385      		ldd r29,Z+11
 221:fat.c         **** 		{
 3855               		.loc 4 221 5 view .LVU838
 3856 0f0a CD2F      		mov r28,r29
 3857               	.LVL309:
 221:fat.c         **** 		{
 3858               		.loc 4 221 5 view .LVU839
 3859 0f0c C870      		andi r28,lo8(8)
 3860 0f0e D3FD      		sbrc r29,3
 3861 0f10 00C0      		rjmp .L211
 221:fat.c         **** 		{
 3862               		.loc 4 221 50 view .LVU840
 3863 0f12 F701      		movw r30,r14
 3864 0f14 0281      		ldd r16,Z+2
 3865 0f16 1381      		ldd r17,Z+3
 221:fat.c         **** 		{
 3866               		.loc 4 221 35 view .LVU841
 3867 0f18 4BE0      		ldi r20,lo8(11)
 3868 0f1a 50E0      		ldi r21,0
 3869 0f1c B801      		movw r22,r16
 3870 0f1e C601      		movw r24,r12
 3871 0f20 0E94 0000 		call mem_cmp
 3872               	.LVL310:
 221:fat.c         **** 		{
 3873               		.loc 4 221 32 view .LVU842
 3874 0f24 8111      		cpse r24,__zero_reg__
 3875 0f26 00C0      		rjmp .L212
 3876               	.L211:
 226:fat.c         **** 	} while(!res);
 3877               		.loc 4 226 3 is_stmt 1 view .LVU843
 226:fat.c         **** 	} while(!res);
 3878               		.loc 4 226 9 is_stmt 0 view .LVU844
 3879 0f28 C701      		movw r24,r14
 3880 0f2a 0E94 0000 		call dir_next
 3881               	.LVL311:
 3882 0f2e 00C0      		rjmp .L226
 3883               	.LVL312:
 3884               	.L216:
 217:fat.c         **** 			break;
 3885               		.loc 4 217 8 view .LVU845
 3886 0f30 C1E0      		ldi r28,lo8(1)
 3887               	.LVL313:
 217:fat.c         **** 			break;
 3888               		.loc 4 217 8 view .LVU846
 3889               	.LBE126:
 3890               	.LBE125:
 279:fat.c         **** }
 3891               		.loc 4 279 2 is_stmt 1 view .LVU847
 279:fat.c         **** }
 3892               		.loc 4 279 9 is_stmt 0 view .LVU848
 3893 0f32 00C0      		rjmp .L200
 3894               	.LVL314:
 3895               	.L212:
 264:fat.c         **** 			{
 3896               		.loc 4 264 4 is_stmt 1 view .LVU849
 264:fat.c         **** 			{
 3897               		.loc 4 264 6 is_stmt 0 view .LVU850
 3898 0f34 F801      		movw r30,r16
 3899 0f36 8385      		ldd r24,Z+11
 3900 0f38 8111      		cpse r24,__zero_reg__
 3901 0f3a 00C0      		rjmp .L200
 269:fat.c         **** 			{
 3902               		.loc 4 269 4 is_stmt 1 view .LVU851
 269:fat.c         **** 			{
 3903               		.loc 4 269 6 is_stmt 0 view .LVU852
 3904 0f3c D4FF      		sbrs r29,4
 3905 0f3e 00C0      		rjmp .L216
 275:fat.c         **** 		}
 3906               		.loc 4 275 4 is_stmt 1 view .LVU853
 3907               	.LVL315:
 3908               	.LBB127:
 3909               	.LBI127:
  83:fat.c         **** {
 3910               		.loc 4 83 17 view .LVU854
 3911               	.LBB128:
  85:fat.c         **** 	cluster = ld_u16(dir + DIR_CLUSTER_HI);
 3912               		.loc 4 85 2 view .LVU855
  86:fat.c         **** 	cluster <<= 16;
 3913               		.loc 4 86 2 view .LVU856
 3914               	.LBB129:
 3915               	.LBI129:
   7:util.c        **** {
 3916               		.loc 2 7 17 view .LVU857
 3917               	.LBB130:
   9:util.c        **** }
 3918               		.loc 2 9 2 view .LVU858
   9:util.c        **** }
 3919               		.loc 2 9 2 is_stmt 0 view .LVU859
 3920               	.LBE130:
 3921               	.LBE129:
  86:fat.c         **** 	cluster <<= 16;
 3922               		.loc 4 86 10 view .LVU860
 3923 0f40 F601      		movw r30,r12
 3924 0f42 8489      		ldd r24,Z+20
 3925 0f44 9589      		ldd r25,Z+21
 3926 0f46 B0E0      		ldi r27,0
 3927 0f48 A0E0      		ldi r26,0
 3928               	.LVL316:
  87:fat.c         **** 	cluster |= ld_u16(dir + DIR_CLUSTER_LO);
 3929               		.loc 4 87 2 is_stmt 1 view .LVU861
  87:fat.c         **** 	cluster |= ld_u16(dir + DIR_CLUSTER_LO);
 3930               		.loc 4 87 10 is_stmt 0 view .LVU862
 3931 0f4a DC01      		movw r26,r24
 3932 0f4c 9927      		clr r25
 3933 0f4e 8827      		clr r24
 3934               	.LVL317:
  88:fat.c         **** 	return cluster;
 3935               		.loc 4 88 2 is_stmt 1 view .LVU863
 3936               	.LBB131:
 3937               	.LBI131:
   7:util.c        **** {
 3938               		.loc 2 7 17 view .LVU864
 3939               	.LBB132:
   9:util.c        **** }
 3940               		.loc 2 9 2 view .LVU865
   9:util.c        **** }
 3941               		.loc 2 9 2 is_stmt 0 view .LVU866
 3942               	.LBE132:
 3943               	.LBE131:
  89:fat.c         **** }
 3944               		.loc 4 89 2 is_stmt 1 view .LVU867
  88:fat.c         **** 	return cluster;
 3945               		.loc 4 88 13 is_stmt 0 view .LVU868
 3946 0f50 428D      		ldd r20,Z+26
 3947 0f52 538D      		ldd r21,Z+27
 3948 0f54 70E0      		ldi r23,0
 3949 0f56 60E0      		ldi r22,0
  88:fat.c         **** 	return cluster;
 3950               		.loc 4 88 10 view .LVU869
 3951 0f58 842B      		or r24,r20
 3952 0f5a 952B      		or r25,r21
 3953 0f5c A62B      		or r26,r22
 3954 0f5e B72B      		or r27,r23
 3955               	.LBE128:
 3956               	.LBE127:
 275:fat.c         **** 		}
 3957               		.loc 4 275 15 view .LVU870
 3958 0f60 F701      		movw r30,r14
 3959 0f62 8483      		std Z+4,r24
 3960 0f64 9583      		std Z+5,r25
 3961 0f66 A683      		std Z+6,r26
 3962 0f68 B783      		std Z+7,r27
 252:fat.c         **** 		{
 3963               		.loc 4 252 8 is_stmt 1 view .LVU871
 3964               	.LVL318:
 3965               	.L203:
 252:fat.c         **** 		{
 3966               		.loc 4 252 3 view .LVU872
 254:fat.c         **** 			{
 3967               		.loc 4 254 4 view .LVU873
 3968 0f6a F701      		movw r30,r14
 3969 0f6c C281      		ldd r28,Z+2
 3970 0f6e D381      		ldd r29,Z+3
 3971               	.LVL319:
 3972               	.LBB133:
 3973               	.LBI120:
  92:fat.c         **** {
 3974               		.loc 4 92 16 view .LVU874
 3975               	.LBB124:
  94:fat.c         **** 	const char *p;
 3976               		.loc 4 94 2 view .LVU875
  95:fat.c         **** 	sfn = dj->fn;
 3977               		.loc 4 95 2 view .LVU876
  96:fat.c         **** 	mem_set(sfn, ' ', 11);
 3978               		.loc 4 96 2 view .LVU877
  97:fat.c         **** 	si = 0;
 3979               		.loc 4 97 2 view .LVU878
 3980               	.LBB122:
 3981               	.LBI122:
  12:util.c        **** {
 3982               		.loc 2 12 13 view .LVU879
 3983               	.LBB123:
  16:util.c        **** 	}
 3984               		.loc 2 16 10 is_stmt 0 view .LVU880
 3985 0f70 4BE0      		ldi r20,lo8(11)
 3986 0f72 50E0      		ldi r21,0
 3987 0f74 60E2      		ldi r22,lo8(32)
 3988 0f76 70E0      		ldi r23,0
 3989 0f78 CE01      		movw r24,r28
 3990 0f7a 0E94 0000 		call memset
 3991               	.LVL320:
  16:util.c        **** 	}
 3992               		.loc 2 16 10 view .LVU881
 3993               	.LBE123:
 3994               	.LBE122:
  99:fat.c         **** 	ni = 8;
 3995               		.loc 4 99 4 view .LVU882
 3996 0f7e 20E0      		ldi r18,0
  98:fat.c         **** 	i = 0;
 3997               		.loc 4 98 5 view .LVU883
 3998 0f80 80E0      		ldi r24,0
 100:fat.c         **** 	p = *path;
 3999               		.loc 4 100 5 view .LVU884
 4000 0f82 98E0      		ldi r25,lo8(8)
 4001               	.L205:
 4002               	.LVL321:
 102:fat.c         **** 	{
 4003               		.loc 4 102 2 is_stmt 1 view .LVU885
 104:fat.c         **** 		if(c <= ' ' || c == '/')
 4004               		.loc 4 104 3 view .LVU886
 104:fat.c         **** 		if(c <= ' ' || c == '/')
 4005               		.loc 4 104 11 is_stmt 0 view .LVU887
 4006 0f84 41E0      		ldi r20,lo8(1)
 4007 0f86 480F      		add r20,r24
 4008               	.LVL322:
 104:fat.c         **** 		if(c <= ' ' || c == '/')
 4009               		.loc 4 104 5 view .LVU888
 4010 0f88 F501      		movw r30,r10
 4011 0f8a E80F      		add r30,r24
 4012 0f8c F11D      		adc r31,__zero_reg__
 4013 0f8e 8081      		ld r24,Z
 4014               	.LVL323:
 105:fat.c         **** 		{
 4015               		.loc 4 105 3 is_stmt 1 view .LVU889
 105:fat.c         **** 		{
 4016               		.loc 4 105 5 is_stmt 0 view .LVU890
 4017 0f90 8132      		cpi r24,lo8(33)
 4018 0f92 00F4      		brsh .+2
 4019 0f94 00C0      		rjmp .L206
 105:fat.c         **** 		{
 4020               		.loc 4 105 15 view .LVU891
 4021 0f96 8F32      		cpi r24,lo8(47)
 4022 0f98 01F4      		brne .+2
 4023 0f9a 00C0      		rjmp .L206
 110:fat.c         **** 		{
 4024               		.loc 4 110 3 is_stmt 1 view .LVU892
 110:fat.c         **** 		{
 4025               		.loc 4 110 5 is_stmt 0 view .LVU893
 4026 0f9c 8E32      		cpi r24,lo8(46)
 4027 0f9e 01F0      		breq .L207
 110:fat.c         **** 		{
 4028               		.loc 4 110 15 view .LVU894
 4029 0fa0 2917      		cp r18,r25
 4030 0fa2 00F0      		brlo .+2
 4031 0fa4 00C0      		rjmp .L206
 123:fat.c         **** 		{
 4032               		.loc 4 123 3 is_stmt 1 view .LVU895
 123:fat.c         **** 		{
 4033               		.loc 4 123 15 is_stmt 0 view .LVU896
 4034 0fa6 3FE9      		ldi r19,lo8(-97)
 4035 0fa8 380F      		add r19,r24
 123:fat.c         **** 		{
 4036               		.loc 4 123 5 view .LVU897
 4037 0faa 3A31      		cpi r19,lo8(26)
 4038 0fac 00F4      		brsh .L208
 125:fat.c         **** 		}
 4039               		.loc 4 125 4 is_stmt 1 view .LVU898
 125:fat.c         **** 		}
 4040               		.loc 4 125 6 is_stmt 0 view .LVU899
 4041 0fae 8052      		subi r24,lo8(-(-32))
 4042               	.LVL324:
 4043               	.L208:
 128:fat.c         **** 	}
 4044               		.loc 4 128 3 is_stmt 1 view .LVU900
 128:fat.c         **** 	}
 4045               		.loc 4 128 12 is_stmt 0 view .LVU901
 4046 0fb0 FE01      		movw r30,r28
 4047 0fb2 E20F      		add r30,r18
 4048 0fb4 F11D      		adc r31,__zero_reg__
 4049 0fb6 8083      		st Z,r24
 4050 0fb8 392F      		mov r19,r25
 128:fat.c         **** 	}
 4051               		.loc 4 128 8 view .LVU902
 4052 0fba 91E0      		ldi r25,lo8(1)
 4053               	.LVL325:
 128:fat.c         **** 	}
 4054               		.loc 4 128 8 view .LVU903
 4055 0fbc 920F      		add r25,r18
 4056               	.LVL326:
 4057               	.L209:
 118:fat.c         **** 			continue;
 4058               		.loc 4 118 7 view .LVU904
 4059 0fbe 292F      		mov r18,r25
 104:fat.c         **** 		if(c <= ' ' || c == '/')
 4060               		.loc 4 104 11 view .LVU905
 4061 0fc0 842F      		mov r24,r20
 4062               	.LVL327:
 104:fat.c         **** 		if(c <= ' ' || c == '/')
 4063               		.loc 4 104 11 view .LVU906
 4064 0fc2 932F      		mov r25,r19
 4065 0fc4 00C0      		rjmp .L205
 4066               	.LVL328:
 4067               	.L207:
 112:fat.c         **** 			{
 4068               		.loc 4 112 4 is_stmt 1 view .LVU907
 112:fat.c         **** 			{
 4069               		.loc 4 112 6 is_stmt 0 view .LVU908
 4070 0fc6 9830      		cpi r25,lo8(8)
 4071 0fc8 01F0      		breq .+2
 4072 0fca 00C0      		rjmp .L206
 118:fat.c         **** 			continue;
 4073               		.loc 4 118 7 view .LVU909
 4074 0fcc 3BE0      		ldi r19,lo8(11)
 4075 0fce 00C0      		rjmp .L209
 4076               	.LBE124:
 4077               	.LBE133:
 4078               		.cfi_endproc
 4079               	.LFE82:
 4082               	fat_opendir.constprop.0.isra.0:
 4083               	.LFB92:
 568:fat.c         **** {
 4084               		.loc 4 568 16 is_stmt 1 view -0
 4085               		.cfi_startproc
 4086 0fd0 CF93      		push r28
 4087               	.LCFI133:
 4088               		.cfi_def_cfa_offset 3
 4089               		.cfi_offset 28, -2
 4090 0fd2 DF93      		push r29
 4091               	.LCFI134:
 4092               		.cfi_def_cfa_offset 4
 4093               		.cfi_offset 29, -3
 4094 0fd4 CDB7      		in r28,__SP_L__
 4095 0fd6 DEB7      		in r29,__SP_H__
 4096               	.LCFI135:
 4097               		.cfi_def_cfa_register 28
 4098 0fd8 AC97      		sbiw r28,44
 4099               	.LCFI136:
 4100               		.cfi_def_cfa_offset 48
 4101 0fda 0FB6      		in __tmp_reg__,__SREG__
 4102 0fdc F894      		cli
 4103 0fde DEBF      		out __SP_H__,r29
 4104 0fe0 0FBE      		out __SREG__,__tmp_reg__
 4105 0fe2 CDBF      		out __SP_L__,r28
 4106               	/* prologue: function */
 4107               	/* frame size = 44 */
 4108               	/* stack size = 46 */
 4109               	.L__stack_usage = 46
 4110               	.LVL329:
 570:fat.c         **** 	uint8_t sp[12], dir[32];
 4111               		.loc 4 570 2 view .LVU911
 571:fat.c         **** 	dj->fn = sp;
 4112               		.loc 4 571 2 view .LVU912
 572:fat.c         **** 	if(!(res = follow_path(dj, dir, path)))
 4113               		.loc 4 572 2 view .LVU913
 572:fat.c         **** 	if(!(res = follow_path(dj, dir, path)))
 4114               		.loc 4 572 9 is_stmt 0 view .LVU914
 4115 0fe4 CE01      		movw r24,r28
 4116 0fe6 8196      		adiw r24,33
 4117 0fe8 9093 0000 		sts dir+2+1,r25
 4118 0fec 8093 0000 		sts dir+2,r24
 573:fat.c         **** 	{
 4119               		.loc 4 573 2 is_stmt 1 view .LVU915
 573:fat.c         **** 	{
 4120               		.loc 4 573 13 is_stmt 0 view .LVU916
 4121 0ff0 BE01      		movw r22,r28
 4122 0ff2 6F5F      		subi r22,-1
 4123 0ff4 7F4F      		sbci r23,-1
 4124 0ff6 80E0      		ldi r24,lo8(dir)
 4125 0ff8 90E0      		ldi r25,hi8(dir)
 4126 0ffa 0E94 0000 		call follow_path.constprop.0
 4127               	.LVL330:
 573:fat.c         **** 	{
 4128               		.loc 4 573 4 view .LVU917
 4129 0ffe 8111      		cpse r24,__zero_reg__
 4130 1000 00C0      		rjmp .L227
 575:fat.c         **** 		{
 4131               		.loc 4 575 3 is_stmt 1 view .LVU918
 575:fat.c         **** 		{
 4132               		.loc 4 575 5 is_stmt 0 view .LVU919
 4133 1002 8981      		ldd r24,Y+1
 4134               	.LVL331:
 575:fat.c         **** 		{
 4135               		.loc 4 575 5 view .LVU920
 4136 1004 8823      		tst r24
 4137 1006 01F0      		breq .L229
 577:fat.c         **** 			{
 4138               		.loc 4 577 4 is_stmt 1 view .LVU921
 577:fat.c         **** 			{
 4139               		.loc 4 577 6 is_stmt 0 view .LVU922
 4140 1008 8C85      		ldd r24,Y+12
 4141 100a 84FF      		sbrs r24,4
 4142 100c 00C0      		rjmp .L227
 579:fat.c         **** 			}
 4143               		.loc 4 579 5 is_stmt 1 view .LVU923
 4144               	.LVL332:
 4145               	.LBB140:
 4146               	.LBI140:
  83:fat.c         **** {
 4147               		.loc 4 83 17 view .LVU924
 4148               	.LBB141:
  85:fat.c         **** 	cluster = ld_u16(dir + DIR_CLUSTER_HI);
 4149               		.loc 4 85 2 view .LVU925
  86:fat.c         **** 	cluster <<= 16;
 4150               		.loc 4 86 2 view .LVU926
 4151               	.LBB142:
 4152               	.LBI142:
   7:util.c        **** {
 4153               		.loc 2 7 17 view .LVU927
 4154               	.LBB143:
   9:util.c        **** }
 4155               		.loc 2 9 2 view .LVU928
   9:util.c        **** }
 4156               		.loc 2 9 2 is_stmt 0 view .LVU929
 4157               	.LBE143:
 4158               	.LBE142:
  86:fat.c         **** 	cluster <<= 16;
 4159               		.loc 4 86 10 view .LVU930
 4160 100e 8D89      		ldd r24,Y+21
 4161 1010 9E89      		ldd r25,Y+22
 4162 1012 B0E0      		ldi r27,0
 4163 1014 A0E0      		ldi r26,0
 4164               	.LVL333:
  87:fat.c         **** 	cluster |= ld_u16(dir + DIR_CLUSTER_LO);
 4165               		.loc 4 87 2 is_stmt 1 view .LVU931
  87:fat.c         **** 	cluster |= ld_u16(dir + DIR_CLUSTER_LO);
 4166               		.loc 4 87 10 is_stmt 0 view .LVU932
 4167 1016 DC01      		movw r26,r24
 4168 1018 9927      		clr r25
 4169 101a 8827      		clr r24
 4170               	.LVL334:
  88:fat.c         **** 	return cluster;
 4171               		.loc 4 88 2 is_stmt 1 view .LVU933
 4172               	.LBB144:
 4173               	.LBI144:
   7:util.c        **** {
 4174               		.loc 2 7 17 view .LVU934
 4175               	.LBB145:
   9:util.c        **** }
 4176               		.loc 2 9 2 view .LVU935
   9:util.c        **** }
 4177               		.loc 2 9 2 is_stmt 0 view .LVU936
 4178               	.LBE145:
 4179               	.LBE144:
  89:fat.c         **** }
 4180               		.loc 4 89 2 is_stmt 1 view .LVU937
  88:fat.c         **** 	return cluster;
 4181               		.loc 4 88 13 is_stmt 0 view .LVU938
 4182 101c 4B8D      		ldd r20,Y+27
 4183 101e 5C8D      		ldd r21,Y+28
 4184 1020 70E0      		ldi r23,0
 4185 1022 60E0      		ldi r22,0
  88:fat.c         **** 	return cluster;
 4186               		.loc 4 88 10 view .LVU939
 4187 1024 842B      		or r24,r20
 4188 1026 952B      		or r25,r21
 4189 1028 A62B      		or r26,r22
 4190 102a B72B      		or r27,r23
 4191               	.LBE141:
 4192               	.LBE140:
 579:fat.c         **** 			}
 4193               		.loc 4 579 16 view .LVU940
 4194 102c 8093 0000 		sts dir+4,r24
 4195 1030 9093 0000 		sts dir+4+1,r25
 4196 1034 A093 0000 		sts dir+4+2,r26
 4197 1038 B093 0000 		sts dir+4+3,r27
 4198               	.L229:
 4199               	.LVL335:
 587:fat.c         **** 		{
 4200               		.loc 4 587 3 is_stmt 1 view .LVU941
 589:fat.c         **** 		}
 4201               		.loc 4 589 4 view .LVU942
 589:fat.c         **** 		}
 4202               		.loc 4 589 10 is_stmt 0 view .LVU943
 4203 103c 80E0      		ldi r24,lo8(dir)
 4204 103e 90E0      		ldi r25,hi8(dir)
 4205 1040 0E94 0000 		call dir_rewind
 4206               	.LVL336:
 593:fat.c         **** }
 4207               		.loc 4 593 2 is_stmt 1 view .LVU944
 4208               	.L227:
 4209               	/* epilogue start */
 594:fat.c         **** 
 4210               		.loc 4 594 1 is_stmt 0 view .LVU945
 4211 1044 AC96      		adiw r28,44
 4212 1046 0FB6      		in __tmp_reg__,__SREG__
 4213 1048 F894      		cli
 4214 104a DEBF      		out __SP_H__,r29
 4215 104c 0FBE      		out __SREG__,__tmp_reg__
 4216 104e CDBF      		out __SP_L__,r28
 4217 1050 DF91      		pop r29
 4218 1052 CF91      		pop r28
 4219 1054 0895      		ret
 4220               		.cfi_endproc
 4221               	.LFE92:
 4224               	dir_prepare:
 4225               	.LFB70:
  75:dir.c         **** 
  76:dir.c         **** static void dir_prepare(void)
  77:dir.c         **** {
 4226               		.loc 6 77 1 is_stmt 1 view -0
 4227               		.cfi_startproc
 4228               	/* prologue: function */
 4229               	/* frame size = 0 */
 4230               	/* stack size = 0 */
 4231               	.L__stack_usage = 0
  78:dir.c         **** 	dir_sel = 0;
 4232               		.loc 6 78 2 view .LVU947
 4233               		.loc 6 78 10 is_stmt 0 view .LVU948
 4234 1056 1092 0000 		sts dir_sel,__zero_reg__
  79:dir.c         **** 	fat_opendir(&dir, dir_path);
 4235               		.loc 6 79 2 is_stmt 1 view .LVU949
 4236 105a 0E94 0000 		call fat_opendir.constprop.0.isra.0
 4237               	.LVL337:
  80:dir.c         **** 	if(fat_readdir(&dir, &dirent[0]))
 4238               		.loc 6 80 2 view .LVU950
 4239               		.loc 6 80 5 is_stmt 0 view .LVU951
 4240 105e 80E0      		ldi r24,lo8(dirent)
 4241 1060 90E0      		ldi r25,hi8(dirent)
 4242 1062 0E94 0000 		call fat_readdir.constprop.0
 4243               	.LVL338:
 4244               		.loc 6 80 4 view .LVU952
 4245 1066 8823      		tst r24
 4246 1068 01F0      		breq .L237
 4247               	.LBB149:
 4248               	.LBI149:
  76:dir.c         **** {
 4249               		.loc 6 76 13 is_stmt 1 view .LVU953
 4250               	.LBB150:
  81:dir.c         **** 	{
  82:dir.c         **** 		static const char dir_empty[] PROGMEM = "[ DIR EMPTY ]";
 4251               		.loc 6 82 3 view .LVU954
  83:dir.c         **** 		lcd_clear();
 4252               		.loc 6 83 3 view .LVU955
 4253 106a 0E94 0000 		call lcd_clear
 4254               	.LVL339:
  84:dir.c         **** 		lcd_string_P(dir_empty);
 4255               		.loc 6 84 3 view .LVU956
 4256 106e 80E0      		ldi r24,lo8(dir_empty.0)
 4257 1070 90E0      		ldi r25,hi8(dir_empty.0)
 4258 1072 0E94 0000 		call lcd_string_P
 4259               	.LVL340:
  85:dir.c         **** 		dir_sel = 3;
 4260               		.loc 6 85 3 view .LVU957
 4261               		.loc 6 85 11 is_stmt 0 view .LVU958
 4262 1076 83E0      		ldi r24,lo8(3)
 4263 1078 8093 0000 		sts dir_sel,r24
  86:dir.c         **** 		return;
 4264               		.loc 6 86 3 is_stmt 1 view .LVU959
 4265               	/* epilogue start */
 4266               	.LBE150:
 4267               	.LBE149:
  87:dir.c         **** 	}
  88:dir.c         **** 
  89:dir.c         **** 	if(fat_readdir(&dir, &dirent[1]))
  90:dir.c         **** 	{
  91:dir.c         **** 		dir_sel = 2;
  92:dir.c         **** 	}
  93:dir.c         **** 
  94:dir.c         **** 	dir_render();
  95:dir.c         **** }
 4268               		.loc 6 95 1 is_stmt 0 view .LVU960
 4269 107c 0895      		ret
 4270               	.L237:
  89:dir.c         **** 	{
 4271               		.loc 6 89 2 is_stmt 1 view .LVU961
  89:dir.c         **** 	{
 4272               		.loc 6 89 5 is_stmt 0 view .LVU962
 4273 107e 80E0      		ldi r24,lo8(dirent+18)
 4274 1080 90E0      		ldi r25,hi8(dirent+18)
 4275 1082 0E94 0000 		call fat_readdir.constprop.0
 4276               	.LVL341:
  89:dir.c         **** 	{
 4277               		.loc 6 89 4 view .LVU963
 4278 1086 8823      		tst r24
 4279 1088 01F0      		breq .L239
  91:dir.c         **** 	}
 4280               		.loc 6 91 3 is_stmt 1 view .LVU964
  91:dir.c         **** 	}
 4281               		.loc 6 91 11 is_stmt 0 view .LVU965
 4282 108a 82E0      		ldi r24,lo8(2)
 4283 108c 8093 0000 		sts dir_sel,r24
 4284               	.L239:
  94:dir.c         **** }
 4285               		.loc 6 94 2 is_stmt 1 view .LVU966
 4286 1090 0C94 0000 		jmp dir_render
 4287               	.LVL342:
 4288               		.cfi_endproc
 4289               	.LFE70:
 4291               		.section	.rodata.str1.1
 4292               	.LC1:
 4293 0004 5249 4646 		.string	"RIFF"
 4293      00
 4294               	.LC2:
 4295 0009 5741 5645 		.string	"WAVEfmt "
 4295      666D 7420 
 4295      00
 4296               	.LC3:
 4297 0012 6461 7461 		.string	"data"
 4297      00
 4298               	.LC4:
 4299 0017 2531 643A 		.string	"%1d:%02d:%02d/%1d:%02d:%02d"
 4299      2530 3264 
 4299      3A25 3032 
 4299      642F 2531 
 4299      643A 2530 
 4300               	.LC5:
 4301 0033 2531 643A 		.string	"%1d:%02d:%02d"
 4301      2530 3264 
 4301      3A25 3032 
 4301      6400 
 4302               		.text
 4304               	dir_event:
 4305               	.LVL343:
 4306               	.LFB71:
  96:dir.c         **** 
  97:dir.c         **** static void dir_event(uint8_t button)
  98:dir.c         **** {
 4307               		.loc 6 98 1 view -0
 4308               		.cfi_startproc
 4309               		.loc 6 98 1 is_stmt 0 view .LVU968
 4310 1094 2F92      		push r2
 4311               	.LCFI137:
 4312               		.cfi_def_cfa_offset 3
 4313               		.cfi_offset 2, -2
 4314 1096 3F92      		push r3
 4315               	.LCFI138:
 4316               		.cfi_def_cfa_offset 4
 4317               		.cfi_offset 3, -3
 4318 1098 4F92      		push r4
 4319               	.LCFI139:
 4320               		.cfi_def_cfa_offset 5
 4321               		.cfi_offset 4, -4
 4322 109a 5F92      		push r5
 4323               	.LCFI140:
 4324               		.cfi_def_cfa_offset 6
 4325               		.cfi_offset 5, -5
 4326 109c 6F92      		push r6
 4327               	.LCFI141:
 4328               		.cfi_def_cfa_offset 7
 4329               		.cfi_offset 6, -6
 4330 109e 7F92      		push r7
 4331               	.LCFI142:
 4332               		.cfi_def_cfa_offset 8
 4333               		.cfi_offset 7, -7
 4334 10a0 8F92      		push r8
 4335               	.LCFI143:
 4336               		.cfi_def_cfa_offset 9
 4337               		.cfi_offset 8, -8
 4338 10a2 9F92      		push r9
 4339               	.LCFI144:
 4340               		.cfi_def_cfa_offset 10
 4341               		.cfi_offset 9, -9
 4342 10a4 AF92      		push r10
 4343               	.LCFI145:
 4344               		.cfi_def_cfa_offset 11
 4345               		.cfi_offset 10, -10
 4346 10a6 BF92      		push r11
 4347               	.LCFI146:
 4348               		.cfi_def_cfa_offset 12
 4349               		.cfi_offset 11, -11
 4350 10a8 CF92      		push r12
 4351               	.LCFI147:
 4352               		.cfi_def_cfa_offset 13
 4353               		.cfi_offset 12, -12
 4354 10aa DF92      		push r13
 4355               	.LCFI148:
 4356               		.cfi_def_cfa_offset 14
 4357               		.cfi_offset 13, -13
 4358 10ac EF92      		push r14
 4359               	.LCFI149:
 4360               		.cfi_def_cfa_offset 15
 4361               		.cfi_offset 14, -14
 4362 10ae FF92      		push r15
 4363               	.LCFI150:
 4364               		.cfi_def_cfa_offset 16
 4365               		.cfi_offset 15, -15
 4366 10b0 0F93      		push r16
 4367               	.LCFI151:
 4368               		.cfi_def_cfa_offset 17
 4369               		.cfi_offset 16, -16
 4370 10b2 1F93      		push r17
 4371               	.LCFI152:
 4372               		.cfi_def_cfa_offset 18
 4373               		.cfi_offset 17, -17
 4374 10b4 CF93      		push r28
 4375               	.LCFI153:
 4376               		.cfi_def_cfa_offset 19
 4377               		.cfi_offset 28, -18
 4378 10b6 DF93      		push r29
 4379               	.LCFI154:
 4380               		.cfi_def_cfa_offset 20
 4381               		.cfi_offset 29, -19
 4382 10b8 CDB7      		in r28,__SP_L__
 4383 10ba DEB7      		in r29,__SP_H__
 4384               	.LCFI155:
 4385               		.cfi_def_cfa_register 28
 4386 10bc C854      		subi r28,72
 4387 10be D109      		sbc r29,__zero_reg__
 4388               	.LCFI156:
 4389               		.cfi_def_cfa_offset 92
 4390 10c0 0FB6      		in __tmp_reg__,__SREG__
 4391 10c2 F894      		cli
 4392 10c4 DEBF      		out __SP_H__,r29
 4393 10c6 0FBE      		out __SREG__,__tmp_reg__
 4394 10c8 CDBF      		out __SP_L__,r28
 4395               	/* prologue: function */
 4396               	/* frame size = 72 */
 4397               	/* stack size = 90 */
 4398               	.L__stack_usage = 90
  99:dir.c         **** 	switch(button)
 4399               		.loc 6 99 2 is_stmt 1 view .LVU969
 4400 10ca 8230      		cpi r24,lo8(2)
 4401 10cc 01F4      		brne .+2
 4402 10ce 00C0      		rjmp .L245
 4403 10d0 00F4      		brsh .L246
 4404 10d2 9091 0000 		lds r25,dir_sel
 4405 10d6 8111      		cpse r24,__zero_reg__
 4406 10d8 00C0      		rjmp .L321
 100:dir.c         **** 	{
 101:dir.c         **** 		case 0:
 102:dir.c         **** 			/* Up */
 103:dir.c         **** 			if(dir_sel > 2)
 4407               		.loc 6 103 4 view .LVU970
 4408               		.loc 6 103 15 is_stmt 0 view .LVU971
 4409 10da 192F      		mov r17,r25
 4410               		.loc 6 103 6 view .LVU972
 4411 10dc 9330      		cpi r25,lo8(3)
 4412 10de 00F4      		brsh .L244
 104:dir.c         **** 			{
 105:dir.c         **** 				return;
 106:dir.c         **** 			}
 107:dir.c         **** 
 108:dir.c         **** 			if(dir_sel == 1)
 4413               		.loc 6 108 4 is_stmt 1 view .LVU973
 4414               		.loc 6 108 6 is_stmt 0 view .LVU974
 4415 10e0 9130      		cpi r25,lo8(1)
 4416 10e2 01F4      		brne .L252
 109:dir.c         **** 			{
 110:dir.c         **** 				dir_sel = 0;
 4417               		.loc 6 110 5 is_stmt 1 view .LVU975
 4418               		.loc 6 110 13 is_stmt 0 view .LVU976
 4419 10e4 1092 0000 		sts dir_sel,__zero_reg__
 4420               	.LVL344:
 4421               	.L324:
 4422               	.LBB190:
 111:dir.c         **** 			}
 112:dir.c         **** 			else if(dir_sel == 0)
 113:dir.c         **** 			{
 114:dir.c         **** 				uint8_t flag = 0;
 115:dir.c         **** 				direntry_t de, prev;
 116:dir.c         **** 				fat_opendir(&dir, dir_path);
 117:dir.c         **** 				while(!fat_readdir(&dir, &de))
 118:dir.c         **** 				{
 119:dir.c         **** 					if(strcmp(de.name, dirent[0].name) == 0)
 120:dir.c         **** 					{
 121:dir.c         **** 						++flag;
 122:dir.c         **** 						break;
 123:dir.c         **** 					}
 124:dir.c         **** 
 125:dir.c         **** 					memcpy(&prev, &de, sizeof(direntry_t));
 126:dir.c         **** 					flag = 1;
 127:dir.c         **** 				}
 128:dir.c         **** 
 129:dir.c         **** 				if(flag == 2)
 130:dir.c         **** 				{
 131:dir.c         **** 					memcpy(&dirent[0], &prev, sizeof(direntry_t));
 132:dir.c         **** 					memcpy(&dirent[1], &de, sizeof(direntry_t));
 133:dir.c         **** 				}
 134:dir.c         **** 			}
 135:dir.c         **** 
 136:dir.c         **** 			dir_render();
 137:dir.c         **** 			break;
 138:dir.c         **** 
 139:dir.c         **** 		case 1:
 140:dir.c         **** 			/* Enter */
 141:dir.c         **** 			if(dir_sel > 2)
 142:dir.c         **** 			{
 143:dir.c         **** 				return;
 144:dir.c         **** 			}
 145:dir.c         **** 
 146:dir.c         **** 			{
 147:dir.c         **** 				direntry_t *de = &dirent[dir_sel & 1];
 148:dir.c         **** 				path_append(de->name);
 149:dir.c         **** 				if(de->type & AM_DIR)
 150:dir.c         **** 				{
 151:dir.c         **** 					dir_prepare();
 152:dir.c         **** 				}
 153:dir.c         **** 				else
 154:dir.c         **** 				{
 155:dir.c         **** 					player_audio_play(dir_path);
 156:dir.c         **** 					path_up();
 157:dir.c         **** 					dir_render();
 4423               		.loc 6 157 6 is_stmt 1 view .LVU977
 4424               	/* epilogue start */
 4425               	.LBE190:
 158:dir.c         **** 				}
 159:dir.c         **** 			}
 160:dir.c         **** 			break;
 161:dir.c         **** 
 162:dir.c         **** 		case 2:
 163:dir.c         **** 			/* Down */
 164:dir.c         **** 			if(dir_sel > 2)
 165:dir.c         **** 			{
 166:dir.c         **** 				return;
 167:dir.c         **** 			}
 168:dir.c         **** 
 169:dir.c         **** 			if(dir_sel == 0)
 170:dir.c         **** 			{
 171:dir.c         **** 				dir_sel = 1;
 172:dir.c         **** 			}
 173:dir.c         **** 			else if(dir_sel == 1)
 174:dir.c         **** 			{
 175:dir.c         **** 				direntry_t de;
 176:dir.c         **** 				if(fat_readdir(&dir, &de))
 177:dir.c         **** 				{
 178:dir.c         **** 					break;
 179:dir.c         **** 				}
 180:dir.c         **** 
 181:dir.c         **** 				memcpy(&dirent[0], &dirent[1], sizeof(direntry_t));
 182:dir.c         **** 				memcpy(&dirent[1], &de, sizeof(direntry_t));
 183:dir.c         **** 			}
 184:dir.c         **** 
 185:dir.c         **** 			dir_render();
 186:dir.c         **** 			break;
 187:dir.c         **** 
 188:dir.c         **** 		case 3:
 189:dir.c         **** 			/* Record mode */
 190:dir.c         **** 			break;
 191:dir.c         **** 
 192:dir.c         **** 		case 4:
 193:dir.c         **** 		{
 194:dir.c         **** 			/* Up Dir */
 195:dir.c         **** 			uint8_t prev_len = dir_path_len;
 196:dir.c         **** 			path_up();
 197:dir.c         **** 			if(prev_len > dir_path_len)
 198:dir.c         **** 			{
 199:dir.c         **** 				dir_prepare();
 200:dir.c         **** 			}
 201:dir.c         **** 			break;
 202:dir.c         **** 		}
 203:dir.c         **** 	}
 204:dir.c         **** }
 4426               		.loc 6 204 1 is_stmt 0 view .LVU978
 4427 10e8 C85B      		subi r28,-72
 4428 10ea DF4F      		sbci r29,-1
 4429 10ec 0FB6      		in __tmp_reg__,__SREG__
 4430 10ee F894      		cli
 4431 10f0 DEBF      		out __SP_H__,r29
 4432 10f2 0FBE      		out __SREG__,__tmp_reg__
 4433 10f4 CDBF      		out __SP_L__,r28
 4434 10f6 DF91      		pop r29
 4435 10f8 CF91      		pop r28
 4436 10fa 1F91      		pop r17
 4437 10fc 0F91      		pop r16
 4438 10fe FF90      		pop r15
 4439 1100 EF90      		pop r14
 4440 1102 DF90      		pop r13
 4441 1104 CF90      		pop r12
 4442 1106 BF90      		pop r11
 4443 1108 AF90      		pop r10
 4444 110a 9F90      		pop r9
 4445 110c 8F90      		pop r8
 4446 110e 7F90      		pop r7
 4447 1110 6F90      		pop r6
 4448 1112 5F90      		pop r5
 4449 1114 4F90      		pop r4
 4450 1116 3F90      		pop r3
 4451 1118 2F90      		pop r2
 4452               	.LBB254:
 157:dir.c         **** 				}
 4453               		.loc 6 157 6 view .LVU979
 4454 111a 0C94 0000 		jmp dir_render
 4455               	.LVL345:
 4456               	.L246:
 157:dir.c         **** 				}
 4457               		.loc 6 157 6 view .LVU980
 4458               	.LBE254:
  99:dir.c         **** 	{
 4459               		.loc 6 99 2 view .LVU981
 4460 111e 8430      		cpi r24,lo8(4)
 4461 1120 01F4      		brne .+2
 4462 1122 00C0      		rjmp .L249
 4463               	.LVL346:
 4464               	.L244:
 4465               	/* epilogue start */
 4466               		.loc 6 204 1 view .LVU982
 4467 1124 C85B      		subi r28,-72
 4468 1126 DF4F      		sbci r29,-1
 4469 1128 0FB6      		in __tmp_reg__,__SREG__
 4470 112a F894      		cli
 4471 112c DEBF      		out __SP_H__,r29
 4472 112e 0FBE      		out __SREG__,__tmp_reg__
 4473 1130 CDBF      		out __SP_L__,r28
 4474 1132 DF91      		pop r29
 4475 1134 CF91      		pop r28
 4476 1136 1F91      		pop r17
 4477 1138 0F91      		pop r16
 4478 113a FF90      		pop r15
 4479 113c EF90      		pop r14
 4480 113e DF90      		pop r13
 4481 1140 CF90      		pop r12
 4482 1142 BF90      		pop r11
 4483 1144 AF90      		pop r10
 4484 1146 9F90      		pop r9
 4485 1148 8F90      		pop r8
 4486 114a 7F90      		pop r7
 4487 114c 6F90      		pop r6
 4488 114e 5F90      		pop r5
 4489 1150 4F90      		pop r4
 4490 1152 3F90      		pop r3
 4491 1154 2F90      		pop r2
 4492 1156 0895      		ret
 4493               	.LVL347:
 4494               	.L252:
 112:dir.c         **** 			{
 4495               		.loc 6 112 9 is_stmt 1 view .LVU983
 112:dir.c         **** 			{
 4496               		.loc 6 112 11 is_stmt 0 view .LVU984
 4497 1158 9111      		cpse r25,__zero_reg__
 4498 115a 00C0      		rjmp .L324
 4499               	.LBB255:
 114:dir.c         **** 				direntry_t de, prev;
 4500               		.loc 6 114 5 is_stmt 1 view .LVU985
 4501               	.LVL348:
 115:dir.c         **** 				fat_opendir(&dir, dir_path);
 4502               		.loc 6 115 5 view .LVU986
 116:dir.c         **** 				while(!fat_readdir(&dir, &de))
 4503               		.loc 6 116 5 view .LVU987
 4504 115c 0E94 0000 		call fat_opendir.constprop.0.isra.0
 4505               	.LVL349:
 117:dir.c         **** 				{
 4506               		.loc 6 117 5 view .LVU988
 4507               	.L254:
 117:dir.c         **** 				{
 4508               		.loc 6 117 10 view .LVU989
 117:dir.c         **** 				{
 4509               		.loc 6 117 12 is_stmt 0 view .LVU990
 4510 1160 CE01      		movw r24,r28
 4511 1162 8196      		adiw r24,33
 4512 1164 0E94 0000 		call fat_readdir.constprop.0
 4513               	.LVL350:
 117:dir.c         **** 				{
 4514               		.loc 6 117 10 view .LVU991
 4515 1168 8111      		cpse r24,__zero_reg__
 4516 116a 00C0      		rjmp .L324
 119:dir.c         **** 					{
 4517               		.loc 6 119 6 is_stmt 1 view .LVU992
 119:dir.c         **** 					{
 4518               		.loc 6 119 9 is_stmt 0 view .LVU993
 4519 116c 60E0      		ldi r22,lo8(dirent+5)
 4520 116e 70E0      		ldi r23,hi8(dirent+5)
 4521 1170 CE01      		movw r24,r28
 4522 1172 8696      		adiw r24,38
 4523 1174 0E94 0000 		call strcmp
 4524               	.LVL351:
 119:dir.c         **** 					{
 4525               		.loc 6 119 8 view .LVU994
 4526 1178 892B      		or r24,r25
 4527 117a 01F4      		brne .L255
 121:dir.c         **** 						break;
 4528               		.loc 6 121 7 is_stmt 1 view .LVU995
 4529               	.LVL352:
 122:dir.c         **** 					}
 4530               		.loc 6 122 7 view .LVU996
 129:dir.c         **** 				{
 4531               		.loc 6 129 5 view .LVU997
 129:dir.c         **** 				{
 4532               		.loc 6 129 7 is_stmt 0 view .LVU998
 4533 117c 1130      		cpi r17,lo8(1)
 4534 117e 01F0      		breq .+2
 4535 1180 00C0      		rjmp .L324
 131:dir.c         **** 					memcpy(&dirent[1], &de, sizeof(direntry_t));
 4536               		.loc 6 131 6 is_stmt 1 view .LVU999
 4537 1182 82E1      		ldi r24,lo8(18)
 4538 1184 FE01      		movw r30,r28
 4539 1186 3196      		adiw r30,1
 4540 1188 A0E0      		ldi r26,lo8(dirent)
 4541 118a B0E0      		ldi r27,hi8(dirent)
 4542               		0:
 4543 118c 0190      		ld r0,Z+
 4544 118e 0D92      		st X+,r0
 4545 1190 8A95      		dec r24
 4546 1192 01F4      		brne 0b
 132:dir.c         **** 				}
 4547               		.loc 6 132 6 view .LVU1000
 4548 1194 82E1      		ldi r24,lo8(18)
 4549 1196 FE01      		movw r30,r28
 4550 1198 B196      		adiw r30,33
 4551               	.LVL353:
 4552               	.L322:
 132:dir.c         **** 				}
 4553               		.loc 6 132 6 is_stmt 0 view .LVU1001
 4554 119a A0E0      		ldi r26,lo8(dirent+18)
 4555 119c B0E0      		ldi r27,hi8(dirent+18)
 4556               		0:
 4557 119e 0190      		ld r0,Z+
 4558 11a0 0D92      		st X+,r0
 4559 11a2 8A95      		dec r24
 4560 11a4 01F4      		brne 0b
 4561               	.LBE255:
 136:dir.c         **** 			break;
 4562               		.loc 6 136 4 is_stmt 1 view .LVU1002
 4563 11a6 00C0      		rjmp .L324
 4564               	.LVL354:
 4565               	.L255:
 4566               	.LBB256:
 125:dir.c         **** 					flag = 1;
 4567               		.loc 6 125 6 view .LVU1003
 4568 11a8 82E1      		ldi r24,lo8(18)
 4569 11aa FE01      		movw r30,r28
 4570 11ac B196      		adiw r30,33
 4571 11ae DE01      		movw r26,r28
 4572 11b0 1196      		adiw r26,1
 4573               		0:
 4574 11b2 0190      		ld r0,Z+
 4575 11b4 0D92      		st X+,r0
 4576 11b6 8A95      		dec r24
 4577 11b8 01F4      		brne 0b
 126:dir.c         **** 				}
 4578               		.loc 6 126 6 view .LVU1004
 4579               	.LVL355:
 126:dir.c         **** 				}
 4580               		.loc 6 126 11 is_stmt 0 view .LVU1005
 4581 11ba 11E0      		ldi r17,lo8(1)
 4582 11bc 00C0      		rjmp .L254
 4583               	.LVL356:
 4584               	.L321:
 126:dir.c         **** 				}
 4585               		.loc 6 126 11 view .LVU1006
 4586               	.LBE256:
 141:dir.c         **** 			{
 4587               		.loc 6 141 4 is_stmt 1 view .LVU1007
 141:dir.c         **** 			{
 4588               		.loc 6 141 6 is_stmt 0 view .LVU1008
 4589 11be 9330      		cpi r25,lo8(3)
 4590 11c0 00F0      		brlo .+2
 4591 11c2 00C0      		rjmp .L244
 4592               	.LBB257:
 147:dir.c         **** 				path_append(de->name);
 4593               		.loc 6 147 5 is_stmt 1 view .LVU1009
 4594 11c4 A92F      		mov r26,r25
 4595 11c6 A170      		andi r26,lo8(1)
 147:dir.c         **** 				path_append(de->name);
 4596               		.loc 6 147 38 is_stmt 0 view .LVU1010
 4597 11c8 292F      		mov r18,r25
 4598 11ca 2170      		andi r18,1
 4599 11cc 30E0      		ldi r19,0
 4600               	.LVL357:
 148:dir.c         **** 				if(de->type & AM_DIR)
 4601               		.loc 6 148 5 is_stmt 1 view .LVU1011
 4602               	.LBB191:
 4603               	.LBI191:
   9:dir.c         **** {
 4604               		.loc 6 9 13 view .LVU1012
 4605               	.LBB192:
  11:dir.c         **** 	dir_path[dir_path_len++] = '/';
 4606               		.loc 6 11 2 view .LVU1013
  12:dir.c         **** 	for(; (c = *s); ++s)
 4607               		.loc 6 12 2 view .LVU1014
  12:dir.c         **** 	for(; (c = *s); ++s)
 4608               		.loc 6 12 23 is_stmt 0 view .LVU1015
 4609 11ce E091 0000 		lds r30,dir_path_len
 4610 11d2 81E0      		ldi r24,lo8(1)
 4611               	.LVL358:
  12:dir.c         **** 	for(; (c = *s); ++s)
 4612               		.loc 6 12 23 view .LVU1016
 4613 11d4 8E0F      		add r24,r30
 4614 11d6 F0E0      		ldi r31,0
  12:dir.c         **** 	for(; (c = *s); ++s)
 4615               		.loc 6 12 27 view .LVU1017
 4616 11d8 E050      		subi r30,lo8(-(dir_path))
 4617 11da F040      		sbci r31,hi8(-(dir_path))
 4618 11dc 9FE2      		ldi r25,lo8(47)
 4619 11de 9083      		st Z,r25
  13:dir.c         **** 	{
 4620               		.loc 6 13 2 is_stmt 1 view .LVU1018
 4621               	.LBE192:
 4622               	.LBE191:
 148:dir.c         **** 				if(de->type & AM_DIR)
 4623               		.loc 6 148 19 is_stmt 0 view .LVU1019
 4624 11e0 42E1      		ldi r20,lo8(18)
 4625 11e2 A49F      		mul r26,r20
 4626 11e4 D001      		movw r26,r0
 4627 11e6 1124      		clr __zero_reg__
 4628               	.LVL359:
 148:dir.c         **** 				if(de->type & AM_DIR)
 4629               		.loc 6 148 19 view .LVU1020
 4630 11e8 A050      		subi r26,lo8(-(dirent+5))
 4631 11ea B040      		sbci r27,hi8(-(dirent+5))
 4632               	.LVL360:
 4633               	.L260:
 4634               	.LBB195:
 4635               	.LBB193:
  13:dir.c         **** 	{
 4636               		.loc 6 13 8 is_stmt 1 view .LVU1021
  13:dir.c         **** 	{
 4637               		.loc 6 13 11 is_stmt 0 view .LVU1022
 4638 11ec 9D91      		ld r25,X+
 4639               	.LVL361:
  15:dir.c         **** 	}
 4640               		.loc 6 15 24 view .LVU1023
 4641 11ee E82F      		mov r30,r24
 4642 11f0 F0E0      		ldi r31,0
  13:dir.c         **** 	{
 4643               		.loc 6 13 2 view .LVU1024
 4644 11f2 41E0      		ldi r20,lo8(1)
 4645 11f4 480F      		add r20,r24
 4646 11f6 E050      		subi r30,lo8(-(dir_path))
 4647 11f8 F040      		sbci r31,hi8(-(dir_path))
 4648 11fa 9111      		cpse r25,__zero_reg__
 4649 11fc 00C0      		rjmp .L261
 4650 11fe 8093 0000 		sts dir_path_len,r24
  18:dir.c         **** }
 4651               		.loc 6 18 2 is_stmt 1 view .LVU1025
  18:dir.c         **** }
 4652               		.loc 6 18 25 is_stmt 0 view .LVU1026
 4653 1202 1082      		st Z,__zero_reg__
 4654               	.LVL362:
  18:dir.c         **** }
 4655               		.loc 6 18 25 view .LVU1027
 4656               	.LBE193:
 4657               	.LBE195:
 149:dir.c         **** 				{
 4658               		.loc 6 149 5 is_stmt 1 view .LVU1028
 149:dir.c         **** 				{
 4659               		.loc 6 149 10 is_stmt 0 view .LVU1029
 4660 1204 82E1      		ldi r24,lo8(18)
 4661 1206 829F      		mul r24,r18
 4662 1208 F001      		movw r30,r0
 4663 120a 839F      		mul r24,r19
 4664 120c F00D      		add r31,r0
 4665 120e 1124      		clr __zero_reg__
 4666 1210 E050      		subi r30,lo8(-(dirent))
 4667 1212 F040      		sbci r31,hi8(-(dirent))
 149:dir.c         **** 				{
 4668               		.loc 6 149 7 view .LVU1030
 4669 1214 8481      		ldd r24,Z+4
 4670 1216 84FD      		sbrc r24,4
 4671 1218 00C0      		rjmp .L293
 4672               	.LBB196:
 4673               	.LBB197:
 4674               	.LBB198:
 4675               	.LBB199:
 362:fat.c         **** 
 4676               		.loc 4 362 8 view .LVU1031
 4677 121a 1E01      		movw r2,r28
 4678 121c 53E3      		ldi r21,51
 4679 121e 250E      		add r2,r21
 4680 1220 311C      		adc r3,__zero_reg__
 4681               	.LBE199:
 4682               	.LBE198:
 4683               	.LBB207:
 4684               	.LBB208:
 291:player.c      **** 
 292:player.c      **** static void player_render_timer(void)
 293:player.c      **** {
 294:player.c      **** 	char buf[32];
 295:player.c      **** 	lcd_cursor(1, 1);
 296:player.c      **** 	snprintf(buf, sizeof(buf), "%1d:%02d:%02d/%1d:%02d:%02d",
 297:player.c      **** 			player_wi.ph, player_wi.pm, player_wi.ps,
 298:player.c      **** 			player_wi.lh, player_wi.lm, player_wi.ls);
 299:player.c      **** 	lcd_string(buf);
 300:player.c      **** }
 301:player.c      **** 
 302:player.c      **** static void player_render_timer_partial(void)
 303:player.c      **** {
 304:player.c      **** 	char buf[32];
 305:player.c      **** 	lcd_cursor(1, 1);
 306:player.c      **** 	snprintf(buf, sizeof(buf), "%1d:%02d:%02d",
 307:player.c      **** 			player_wi.ph, player_wi.pm, player_wi.ps);
 308:player.c      **** 	lcd_string(buf);
 309:player.c      **** }
 310:player.c      **** 
 311:player.c      **** static void player_render_init(const char *name)
 312:player.c      **** {
 313:player.c      **** 	uint32_t secs = player_wi.data_len / player_wi.sample_rate / player_wi.num_channels;
 314:player.c      **** 
 315:player.c      **** 	player_wi.ph = 0;
 316:player.c      **** 	player_wi.pm = 0;
 317:player.c      **** 	player_wi.ps = 0;
 318:player.c      **** 
 319:player.c      **** 	player_wi.lh = (secs / 3600) % 24;
 4685               		.loc 5 319 23 view .LVU1032
 4686 1222 40E1      		ldi r20,lo8(16)
 4687 1224 442E      		mov r4,r20
 4688 1226 4EE0      		ldi r20,lo8(14)
 4689 1228 542E      		mov r5,r20
 4690 122a 612C      		mov r6,__zero_reg__
 4691 122c 712C      		mov r7,__zero_reg__
 320:player.c      **** 	player_wi.lm = (secs / 60) % 60;
 4692               		.loc 5 320 23 view .LVU1033
 4693 122e 5CE3      		ldi r21,lo8(60)
 4694 1230 C52E      		mov r12,r21
 4695 1232 D12C      		mov r13,__zero_reg__
 4696 1234 E12C      		mov r14,__zero_reg__
 4697 1236 F12C      		mov r15,__zero_reg__
 4698               	.LVL363:
 4699               	.L262:
 4700               		.loc 5 320 23 view .LVU1034
 4701               	.LBE208:
 4702               	.LBE207:
 321:player.c      **** 	player_wi.ls = secs % 60;
 322:player.c      **** 
 323:player.c      **** 	lcd_clear();
 324:player.c      **** 	player_render_pause();
 325:player.c      **** 	player_render_name(name);
 326:player.c      **** 	player_render_plus_minus();
 327:player.c      **** 	player_render_interval();
 328:player.c      **** 	player_render_timer();
 329:player.c      **** }
 330:player.c      **** 
 331:player.c      **** static void player_audio_play(const char *s)
 332:player.c      **** {
 333:player.c      **** 	uint16_t n;
 4703               		.loc 5 333 2 is_stmt 1 view .LVU1035
 334:player.c      **** 	uint32_t nread, secs;
 4704               		.loc 5 334 2 view .LVU1036
 335:player.c      **** 
 336:player.c      **** rewind:
 337:player.c      **** 	n = 0;
 4705               		.loc 5 337 2 view .LVU1037
 4706               		.loc 5 337 4 is_stmt 0 view .LVU1038
 4707 1238 2196      		adiw r28,63-62
 4708 123a 1FAE      		std Y+63,__zero_reg__
 4709 123c 1EAE      		std Y+62,__zero_reg__
 4710 123e 2197      		sbiw r28,63-62
 338:player.c      **** 	nread = 0;
 4711               		.loc 5 338 2 is_stmt 1 view .LVU1039
 4712               	.LVL364:
 339:player.c      **** 
 340:player.c      **** 	if(fat_fopen(s))
 4713               		.loc 5 340 2 view .LVU1040
 4714               	.LBB222:
 4715               	.LBI198:
 358:fat.c         **** {
 4716               		.loc 4 358 16 view .LVU1041
 4717               	.LBB206:
 360:fat.c         **** 	uint8_t sp[12], dir[32];
 4718               		.loc 4 360 2 view .LVU1042
 361:fat.c         **** 	dj.fn = sp;
 4719               		.loc 4 361 2 view .LVU1043
 362:fat.c         **** 
 4720               		.loc 4 362 2 view .LVU1044
 362:fat.c         **** 
 4721               		.loc 4 362 8 is_stmt 0 view .LVU1045
 4722 1240 3CA2      		std Y+36,r3
 4723 1242 2BA2      		std Y+35,r2
 364:fat.c         **** 		(dir[DIR_ATTR] & AM_DIR))
 4724               		.loc 4 364 2 is_stmt 1 view .LVU1046
 364:fat.c         **** 		(dir[DIR_ATTR] & AM_DIR))
 4725               		.loc 4 364 5 is_stmt 0 view .LVU1047
 4726 1244 BE01      		movw r22,r28
 4727 1246 6F5F      		subi r22,-1
 4728 1248 7F4F      		sbci r23,-1
 4729 124a CE01      		movw r24,r28
 4730 124c 8196      		adiw r24,33
 4731 124e 0E94 0000 		call follow_path.constprop.0
 4732               	.LVL365:
 4733 1252 982F      		mov r25,r24
 364:fat.c         **** 		(dir[DIR_ATTR] & AM_DIR))
 4734               		.loc 4 364 33 view .LVU1048
 4735 1254 8981      		ldd r24,Y+1
 4736 1256 8823      		tst r24
 4737 1258 01F4      		brne .+2
 4738 125a 00C0      		rjmp .L282
 364:fat.c         **** 		(dir[DIR_ATTR] & AM_DIR))
 4739               		.loc 4 364 44 view .LVU1049
 4740 125c 8C85      		ldd r24,Y+12
 4741 125e 8071      		andi r24,lo8(16)
 4742 1260 892B      		or r24,r25
 4743 1262 01F0      		breq .+2
 4744 1264 00C0      		rjmp .L282
 370:fat.c         **** 	fat_fsize = ld_u32(dir + DIR_FILESIZE);
 4745               		.loc 4 370 2 is_stmt 1 view .LVU1050
 4746               	.LVL366:
 4747               	.LBB200:
 4748               	.LBI200:
  83:fat.c         **** {
 4749               		.loc 4 83 17 view .LVU1051
 4750               	.LBB201:
  85:fat.c         **** 	cluster = ld_u16(dir + DIR_CLUSTER_HI);
 4751               		.loc 4 85 2 view .LVU1052
  86:fat.c         **** 	cluster <<= 16;
 4752               		.loc 4 86 2 view .LVU1053
 4753               	.LBB202:
 4754               	.LBI202:
   7:util.c        **** {
 4755               		.loc 2 7 17 view .LVU1054
 4756               	.LBB203:
   9:util.c        **** }
 4757               		.loc 2 9 2 view .LVU1055
   9:util.c        **** }
 4758               		.loc 2 9 2 is_stmt 0 view .LVU1056
 4759               	.LBE203:
 4760               	.LBE202:
  86:fat.c         **** 	cluster <<= 16;
 4761               		.loc 4 86 10 view .LVU1057
 4762 1266 8D89      		ldd r24,Y+21
 4763 1268 9E89      		ldd r25,Y+22
 4764 126a B0E0      		ldi r27,0
 4765 126c A0E0      		ldi r26,0
 4766               	.LVL367:
  87:fat.c         **** 	cluster |= ld_u16(dir + DIR_CLUSTER_LO);
 4767               		.loc 4 87 2 is_stmt 1 view .LVU1058
  87:fat.c         **** 	cluster |= ld_u16(dir + DIR_CLUSTER_LO);
 4768               		.loc 4 87 10 is_stmt 0 view .LVU1059
 4769 126e DC01      		movw r26,r24
 4770 1270 9927      		clr r25
 4771 1272 8827      		clr r24
 4772               	.LVL368:
  88:fat.c         **** 	return cluster;
 4773               		.loc 4 88 2 is_stmt 1 view .LVU1060
 4774               	.LBB204:
 4775               	.LBI204:
   7:util.c        **** {
 4776               		.loc 2 7 17 view .LVU1061
 4777               	.LBB205:
   9:util.c        **** }
 4778               		.loc 2 9 2 view .LVU1062
   9:util.c        **** }
 4779               		.loc 2 9 2 is_stmt 0 view .LVU1063
 4780               	.LBE205:
 4781               	.LBE204:
  89:fat.c         **** }
 4782               		.loc 4 89 2 is_stmt 1 view .LVU1064
  88:fat.c         **** 	return cluster;
 4783               		.loc 4 88 13 is_stmt 0 view .LVU1065
 4784 1274 4B8D      		ldd r20,Y+27
 4785 1276 5C8D      		ldd r21,Y+28
 4786 1278 70E0      		ldi r23,0
 4787 127a 60E0      		ldi r22,0
  88:fat.c         **** 	return cluster;
 4788               		.loc 4 88 10 view .LVU1066
 4789 127c 842B      		or r24,r20
 4790 127e 952B      		or r25,r21
 4791 1280 A62B      		or r26,r22
 4792 1282 B72B      		or r27,r23
 4793               	.LBE201:
 4794               	.LBE200:
 370:fat.c         **** 	fat_fsize = ld_u32(dir + DIR_FILESIZE);
 4795               		.loc 4 370 16 view .LVU1067
 4796 1284 8093 0000 		sts _fs+19,r24
 4797 1288 9093 0000 		sts _fs+19+1,r25
 4798 128c A093 0000 		sts _fs+19+2,r26
 4799 1290 B093 0000 		sts _fs+19+3,r27
 371:fat.c         **** 	fat_ftell = 0;
 4800               		.loc 4 371 2 is_stmt 1 view .LVU1068
 371:fat.c         **** 	fat_ftell = 0;
 4801               		.loc 4 371 14 is_stmt 0 view .LVU1069
 4802 1294 CE01      		movw r24,r28
 4803 1296 4D96      		adiw r24,29
 4804 1298 0E94 0000 		call ld_u32
 4805               	.LVL369:
 4806 129c 6093 0000 		sts fat_fsize,r22
 4807 12a0 7093 0000 		sts fat_fsize+1,r23
 4808 12a4 8093 0000 		sts fat_fsize+2,r24
 4809 12a8 9093 0000 		sts fat_fsize+3,r25
 372:fat.c         **** 	return 0;
 4810               		.loc 4 372 2 is_stmt 1 view .LVU1070
 372:fat.c         **** 	return 0;
 4811               		.loc 4 372 12 is_stmt 0 view .LVU1071
 4812 12ac 1092 0000 		sts fat_ftell,__zero_reg__
 4813 12b0 1092 0000 		sts fat_ftell+1,__zero_reg__
 4814 12b4 1092 0000 		sts fat_ftell+2,__zero_reg__
 4815 12b8 1092 0000 		sts fat_ftell+3,__zero_reg__
 373:fat.c         **** }
 4816               		.loc 4 373 2 is_stmt 1 view .LVU1072
 4817               	.LVL370:
 373:fat.c         **** }
 4818               		.loc 4 373 2 is_stmt 0 view .LVU1073
 4819               	.LBE206:
 4820               	.LBE222:
 341:player.c      **** 	{
 342:player.c      **** 		return;
 343:player.c      **** 	}
 344:player.c      **** 
 345:player.c      **** 	if(player_wav_info())
 4821               		.loc 5 345 2 is_stmt 1 view .LVU1074
 4822               	.LBB223:
 4823               	.LBI223:
  91:player.c      **** {
 4824               		.loc 5 91 16 view .LVU1075
 4825               	.LBB224:
 4826               	.LBB225:
  94:player.c      **** 		if(fat_fread(player_buf, PLAYER_BUFFER_SIZE, &n) || n != PLAYER_BUFFER_SIZE)
 4827               		.loc 5 94 3 view .LVU1076
  95:player.c      **** 		{
 4828               		.loc 5 95 3 view .LVU1077
  95:player.c      **** 		{
 4829               		.loc 5 95 6 is_stmt 0 view .LVU1078
 4830 12bc BE01      		movw r22,r28
 4831 12be 6F5F      		subi r22,-1
 4832 12c0 7F4F      		sbci r23,-1
 4833 12c2 80E0      		ldi r24,lo8(player_buf)
 4834 12c4 90E0      		ldi r25,hi8(player_buf)
 4835 12c6 0E94 0000 		call fat_fread.constprop.0
 4836               	.LVL371:
  95:player.c      **** 		{
 4837               		.loc 5 95 5 view .LVU1079
 4838 12ca 8111      		cpse r24,__zero_reg__
 4839 12cc 00C0      		rjmp .L282
  95:player.c      **** 		{
 4840               		.loc 5 95 52 view .LVU1080
 4841 12ce 8981      		ldd r24,Y+1
 4842 12d0 9A81      		ldd r25,Y+2
 4843 12d2 8115      		cp r24,__zero_reg__
 4844 12d4 9240      		sbci r25,2
 4845 12d6 01F0      		breq .+2
 4846 12d8 00C0      		rjmp .L282
 4847               	.LBE225:
 101:player.c      **** 	{
 4848               		.loc 5 101 2 is_stmt 1 view .LVU1081
 101:player.c      **** 	{
 4849               		.loc 5 101 6 is_stmt 0 view .LVU1082
 4850 12da 44E0      		ldi r20,lo8(4)
 4851 12dc 50E0      		ldi r21,0
 4852 12de 60E0      		ldi r22,lo8(.LC1)
 4853 12e0 70E0      		ldi r23,hi8(.LC1)
 4854 12e2 80E0      		ldi r24,lo8(player_buf)
 4855 12e4 90E0      		ldi r25,hi8(player_buf)
 4856 12e6 0E94 0000 		call mem_cmp
 4857               	.LVL372:
 101:player.c      **** 	{
 4858               		.loc 5 101 4 view .LVU1083
 4859 12ea 8823      		tst r24
 4860 12ec 01F4      		brne .+2
 4861 12ee 00C0      		rjmp .L282
 106:player.c      **** 	{
 4862               		.loc 5 106 2 is_stmt 1 view .LVU1084
 106:player.c      **** 	{
 4863               		.loc 5 106 6 is_stmt 0 view .LVU1085
 4864 12f0 48E0      		ldi r20,lo8(8)
 4865 12f2 50E0      		ldi r21,0
 4866 12f4 60E0      		ldi r22,lo8(.LC2)
 4867 12f6 70E0      		ldi r23,hi8(.LC2)
 4868 12f8 80E0      		ldi r24,lo8(player_buf+8)
 4869 12fa 90E0      		ldi r25,hi8(player_buf+8)
 4870 12fc 0E94 0000 		call mem_cmp
 4871               	.LVL373:
 106:player.c      **** 	{
 4872               		.loc 5 106 4 view .LVU1086
 4873 1300 8823      		tst r24
 4874 1302 01F4      		brne .+2
 4875 1304 00C0      		rjmp .L282
 112:player.c      **** 	{
 4876               		.loc 5 112 2 is_stmt 1 view .LVU1087
 112:player.c      **** 	{
 4877               		.loc 5 112 5 is_stmt 0 view .LVU1088
 4878 1306 80E0      		ldi r24,lo8(player_buf+16)
 4879 1308 90E0      		ldi r25,hi8(player_buf+16)
 4880 130a 0E94 0000 		call ld_u32
 4881               	.LVL374:
 4882 130e 2596      		adiw r28,65-60
 4883 1310 6CAF      		std Y+60,r22
 4884 1312 7DAF      		std Y+61,r23
 4885 1314 8EAF      		std Y+62,r24
 4886 1316 9FAF      		std Y+63,r25
 4887 1318 2597      		sbiw r28,65-60
 112:player.c      **** 	{
 4888               		.loc 5 112 4 view .LVU1089
 4889 131a 6031      		cpi r22,16
 4890 131c 7105      		cpc r23,__zero_reg__
 4891 131e 8105      		cpc r24,__zero_reg__
 4892 1320 9105      		cpc r25,__zero_reg__
 4893 1322 01F0      		breq .+2
 4894 1324 00C0      		rjmp .L282
 118:player.c      **** 	{
 4895               		.loc 5 118 2 is_stmt 1 view .LVU1090
 4896               	.LVL375:
 4897               	.LBB226:
 4898               	.LBI226:
   7:util.c        **** {
 4899               		.loc 2 7 17 view .LVU1091
 4900               	.LBB227:
   9:util.c        **** }
 4901               		.loc 2 9 2 view .LVU1092
   9:util.c        **** }
 4902               		.loc 2 9 2 is_stmt 0 view .LVU1093
 4903               	.LBE227:
 4904               	.LBE226:
 118:player.c      **** 	{
 4905               		.loc 5 118 4 view .LVU1094
 4906 1326 8091 0000 		lds r24,player_buf+20
 4907 132a 9091 0000 		lds r25,player_buf+20+1
 4908 132e 0197      		sbiw r24,1
 4909 1330 01F0      		breq .+2
 4910 1332 00C0      		rjmp .L282
 124:player.c      **** 	if(player_wi.num_channels != 1 && player_wi.num_channels != 2)
 4911               		.loc 5 124 2 is_stmt 1 view .LVU1095
 4912               	.LVL376:
 4913               	.LBB228:
 4914               	.LBI228:
   7:util.c        **** {
 4915               		.loc 2 7 17 view .LVU1096
 4916               	.LBB229:
   9:util.c        **** }
 4917               		.loc 2 9 2 view .LVU1097
   9:util.c        **** }
 4918               		.loc 2 9 2 is_stmt 0 view .LVU1098
 4919               	.LBE229:
 4920               	.LBE228:
 124:player.c      **** 	if(player_wi.num_channels != 1 && player_wi.num_channels != 2)
 4921               		.loc 5 124 25 view .LVU1099
 4922 1334 8091 0000 		lds r24,player_buf+22
 4923 1338 8093 0000 		sts player_wi,r24
 125:player.c      **** 	{
 4924               		.loc 5 125 2 is_stmt 1 view .LVU1100
 125:player.c      **** 	{
 4925               		.loc 5 125 14 is_stmt 0 view .LVU1101
 4926 133c 8091 0000 		lds r24,player_wi
 125:player.c      **** 	{
 4927               		.loc 5 125 4 view .LVU1102
 4928 1340 8130      		cpi r24,lo8(1)
 4929 1342 01F0      		breq .L269
 125:player.c      **** 	{
 4930               		.loc 5 125 45 view .LVU1103
 4931 1344 8091 0000 		lds r24,player_wi
 125:player.c      **** 	{
 4932               		.loc 5 125 33 view .LVU1104
 4933 1348 8230      		cpi r24,lo8(2)
 4934 134a 01F0      		breq .+2
 4935 134c 00C0      		rjmp .L282
 4936               	.L269:
 4937               	.LBB230:
 132:player.c      **** 		uint32_t sample_rate;
 4938               		.loc 5 132 3 is_stmt 1 view .LVU1105
 133:player.c      **** 		sample_rate = ld_u32(player_buf + 24);
 4939               		.loc 5 133 3 view .LVU1106
 134:player.c      **** 		for(i = 0; i < ARRAY_LENGTH(player_sample_rates); ++i)
 4940               		.loc 5 134 3 view .LVU1107
 134:player.c      **** 		for(i = 0; i < ARRAY_LENGTH(player_sample_rates); ++i)
 4941               		.loc 5 134 17 is_stmt 0 view .LVU1108
 4942 134e 80E0      		ldi r24,lo8(player_buf+24)
 4943 1350 90E0      		ldi r25,hi8(player_buf+24)
 4944 1352 0E94 0000 		call ld_u32
 4945               	.LVL377:
 4946 1356 462F      		mov r20,r22
 4947 1358 572F      		mov r21,r23
 4948 135a BC01      		movw r22,r24
 4949               	.LVL378:
 135:player.c      **** 		{
 4950               		.loc 5 135 3 is_stmt 1 view .LVU1109
 135:player.c      **** 		{
 4951               		.loc 5 135 14 view .LVU1110
 4952 135c E0E0      		ldi r30,lo8(player_sample_rates)
 4953 135e F0E0      		ldi r31,hi8(player_sample_rates)
 134:player.c      **** 		for(i = 0; i < ARRAY_LENGTH(player_sample_rates); ++i)
 4954               		.loc 5 134 17 is_stmt 0 view .LVU1111
 4955 1360 90E0      		ldi r25,0
 4956 1362 80E0      		ldi r24,0
 4957               	.LVL379:
 4958               	.L272:
 134:player.c      **** 		for(i = 0; i < ARRAY_LENGTH(player_sample_rates); ++i)
 4959               		.loc 5 134 17 view .LVU1112
 4960 1364 A82F      		mov r26,r24
 4961               	.LVL380:
 137:player.c      **** 			{
 4962               		.loc 5 137 4 is_stmt 1 view .LVU1113
 137:player.c      **** 			{
 4963               		.loc 5 137 6 is_stmt 0 view .LVU1114
 4964 1366 0081      		ld r16,Z
 4965 1368 1181      		ldd r17,Z+1
 4966 136a 2281      		ldd r18,Z+2
 4967 136c 3381      		ldd r19,Z+3
 4968 136e 4017      		cp r20,r16
 4969 1370 5107      		cpc r21,r17
 4970 1372 6207      		cpc r22,r18
 4971 1374 7307      		cpc r23,r19
 4972 1376 01F4      		brne .L270
 139:player.c      **** 				break;
 4973               		.loc 5 139 5 is_stmt 1 view .LVU1115
 139:player.c      **** 				break;
 4974               		.loc 5 139 53 is_stmt 0 view .LVU1116
 4975 1378 E5E0      		ldi r30,lo8(5)
 4976 137a E89F      		mul r30,r24
 4977 137c 9001      		movw r18,r0
 4978 137e E99F      		mul r30,r25
 4979 1380 300D      		add r19,r0
 4980 1382 1124      		clr __zero_reg__
 4981 1384 2050      		subi r18,lo8(-(player_sample_rates))
 4982 1386 3040      		sbci r19,hi8(-(player_sample_rates))
 4983 1388 F901      		movw r30,r18
 4984 138a 8481      		ldd r24,Z+4
 4985               	.LVL381:
 139:player.c      **** 				break;
 4986               		.loc 5 139 29 view .LVU1117
 4987 138c 8093 0000 		sts player_wi+1,r24
 140:player.c      **** 			}
 4988               		.loc 5 140 5 is_stmt 1 view .LVU1118
 4989               	.L271:
 144:player.c      **** 		if(i == ARRAY_LENGTH(player_sample_rates))
 4990               		.loc 5 144 3 view .LVU1119
 144:player.c      **** 		if(i == ARRAY_LENGTH(player_sample_rates))
 4991               		.loc 5 144 25 is_stmt 0 view .LVU1120
 4992 1390 4093 0000 		sts player_wi+14,r20
 4993 1394 5093 0000 		sts player_wi+14+1,r21
 4994 1398 6093 0000 		sts player_wi+14+2,r22
 4995 139c 7093 0000 		sts player_wi+14+3,r23
 145:player.c      **** 		{
 4996               		.loc 5 145 3 is_stmt 1 view .LVU1121
 145:player.c      **** 		{
 4997               		.loc 5 145 5 is_stmt 0 view .LVU1122
 4998 13a0 A830      		cpi r26,lo8(8)
 4999 13a2 01F0      		breq .L282
 145:player.c      **** 		{
 5000               		.loc 5 145 5 view .LVU1123
 5001 13a4 00E0      		ldi r16,lo8(player_buf+36)
 5002 13a6 10E0      		ldi r17,hi8(player_buf+36)
 5003 13a8 20E0      		ldi r18,lo8(player_buf+509)
 5004 13aa A22E      		mov r10,r18
 5005 13ac 20E0      		ldi r18,hi8(player_buf+509)
 5006 13ae B22E      		mov r11,r18
 5007               	.LVL382:
 5008               	.L274:
 145:player.c      **** 		{
 5009               		.loc 5 145 5 view .LVU1124
 5010               	.LBE230:
 5011               	.LBB231:
 5012               	.LBB232:
 5013               	.LBB233:
  27:util.c        **** 
  28:util.c        **** static const uint8_t *mem_mem(
  29:util.c        **** 	const uint8_t *haystack, uint16_t haystack_len,
  30:util.c        **** 	const uint8_t *needle, uint16_t needle_len)
  31:util.c        **** {
  32:util.c        **** 	uint16_t i;
  33:util.c        **** 
  34:util.c        **** 	if(needle_len == 0)
  35:util.c        **** 	{
  36:util.c        **** 		return haystack;
  37:util.c        **** 	}
  38:util.c        **** 
  39:util.c        **** 	if(haystack_len < needle_len)
  40:util.c        **** 	{
  41:util.c        **** 		return 0;
  42:util.c        **** 	}
  43:util.c        **** 
  44:util.c        **** 	for(i = 0; i <= haystack_len - needle_len; ++i)
  45:util.c        **** 	{
  46:util.c        **** 		if(mem_cmp(haystack + i, needle, needle_len))
 5014               		.loc 2 46 3 is_stmt 1 view .LVU1125
 5015               		.loc 2 46 6 is_stmt 0 view .LVU1126
 5016 13b0 44E0      		ldi r20,lo8(4)
 5017 13b2 50E0      		ldi r21,0
 5018 13b4 60E0      		ldi r22,lo8(.LC3)
 5019 13b6 70E0      		ldi r23,hi8(.LC3)
 5020 13b8 C801      		movw r24,r16
 5021 13ba 0E94 0000 		call mem_cmp
 5022               	.LVL383:
 5023               		.loc 2 46 5 view .LVU1127
 5024 13be 8111      		cpse r24,__zero_reg__
 5025 13c0 00C0      		rjmp .L273
  44:util.c        **** 	{
 5026               		.loc 2 44 45 is_stmt 1 view .LVU1128
 5027               	.LVL384:
  44:util.c        **** 	{
 5028               		.loc 2 44 13 view .LVU1129
  44:util.c        **** 	{
 5029               		.loc 2 44 2 is_stmt 0 view .LVU1130
 5030 13c2 0F5F      		subi r16,-1
 5031 13c4 1F4F      		sbci r17,-1
 5032               	.LVL385:
  44:util.c        **** 	{
 5033               		.loc 2 44 2 view .LVU1131
 5034 13c6 A016      		cp r10,r16
 5035 13c8 B106      		cpc r11,r17
 5036 13ca 01F4      		brne .L274
 5037               	.LVL386:
 5038               	.L282:
  44:util.c        **** 	{
 5039               		.loc 2 44 2 view .LVU1132
 5040               	.LBE233:
 5041               	.LBE232:
 5042               	.LBE231:
 5043               	.LBE224:
 5044               	.LBE223:
 5045               	.LBE197:
 5046               	.LBE196:
 156:dir.c         **** 					dir_render();
 5047               		.loc 6 156 6 is_stmt 1 view .LVU1133
 5048 13cc 0E94 0000 		call path_up
 5049               	.LVL387:
 5050 13d0 00C0      		rjmp .L324
 5051               	.LVL388:
 5052               	.L261:
 5053               	.LBB251:
 5054               	.LBB194:
  15:dir.c         **** 	}
 5055               		.loc 6 15 3 view .LVU1134
  15:dir.c         **** 	}
 5056               		.loc 6 15 28 is_stmt 0 view .LVU1135
 5057 13d2 9083      		st Z,r25
  13:dir.c         **** 	{
 5058               		.loc 6 13 18 is_stmt 1 view .LVU1136
 5059               	.LVL389:
  15:dir.c         **** 	}
 5060               		.loc 6 15 28 is_stmt 0 view .LVU1137
 5061 13d4 842F      		mov r24,r20
 5062 13d6 00C0      		rjmp .L260
 5063               	.LVL390:
 5064               	.L270:
  15:dir.c         **** 	}
 5065               		.loc 6 15 28 view .LVU1138
 5066               	.LBE194:
 5067               	.LBE251:
 5068               	.LBB252:
 5069               	.LBB249:
 5070               	.LBB238:
 5071               	.LBB236:
 5072               	.LBB234:
 135:player.c      **** 		{
 5073               		.loc 5 135 53 is_stmt 1 view .LVU1139
 135:player.c      **** 		{
 5074               		.loc 5 135 14 view .LVU1140
 135:player.c      **** 		{
 5075               		.loc 5 135 3 is_stmt 0 view .LVU1141
 5076 13d8 0196      		adiw r24,1
 5077               	.LVL391:
 135:player.c      **** 		{
 5078               		.loc 5 135 3 view .LVU1142
 5079 13da 3596      		adiw r30,5
 5080 13dc 8830      		cpi r24,8
 5081 13de 9105      		cpc r25,__zero_reg__
 5082 13e0 01F0      		breq .+2
 5083 13e2 00C0      		rjmp .L272
 5084 13e4 A8E0      		ldi r26,lo8(8)
 5085 13e6 00C0      		rjmp .L271
 5086               	.LVL392:
 5087               	.L276:
 135:player.c      **** 		{
 5088               		.loc 5 135 3 view .LVU1143
 5089               	.LBE234:
 5090               	.LBE236:
 5091               	.LBE238:
 5092               	.LBB239:
 5093               	.LBB219:
 5094               	.LBB209:
 5095               	.LBB210:
 265:player.c      **** 		{
 5096               		.loc 5 265 3 is_stmt 1 view .LVU1144
 265:player.c      **** 		{
 5097               		.loc 5 265 5 is_stmt 0 view .LVU1145
 5098 13e8 8F32      		cpi r24,lo8(47)
 5099 13ea 01F4      		brne .L294
 5100               	.LVL393:
 5101               	.L323:
 267:player.c      **** 		}
 5102               		.loc 5 267 9 view .LVU1146
 5103 13ec 8F01      		movw r16,r30
 5104               	.LVL394:
 263:player.c      **** 	{
 5105               		.loc 5 263 26 is_stmt 1 view .LVU1147
 5106               	.L294:
 263:player.c      **** 	{
 5107               		.loc 5 263 16 view .LVU1148
 263:player.c      **** 	{
 5108               		.loc 5 263 19 is_stmt 0 view .LVU1149
 5109 13ee 8191      		ld r24,Z+
 5110               	.LVL395:
 263:player.c      **** 	{
 5111               		.loc 5 263 2 view .LVU1150
 5112 13f0 8111      		cpse r24,__zero_reg__
 5113 13f2 00C0      		rjmp .L276
 5114               	.LVL396:
 5115               	.L277:
 271:player.c      **** 	{
 5116               		.loc 5 271 8 is_stmt 1 view .LVU1151
 271:player.c      **** 	{
 5117               		.loc 5 271 11 is_stmt 0 view .LVU1152
 5118 13f4 D801      		movw r26,r16
 5119 13f6 8D91      		ld r24,X+
 5120 13f8 8D01      		movw r16,r26
 5121               	.LVL397:
 271:player.c      **** 	{
 5122               		.loc 5 271 2 view .LVU1153
 5123 13fa 8823      		tst r24
 5124 13fc 01F0      		breq .L278
 271:player.c      **** 	{
 5125               		.loc 5 271 20 view .LVU1154
 5126 13fe 8E32      		cpi r24,lo8(46)
 5127 1400 01F0      		breq .+2
 5128 1402 00C0      		rjmp .L279
 5129               	.L278:
 5130               	.LVL398:
 271:player.c      **** 	{
 5131               		.loc 5 271 20 view .LVU1155
 5132               	.LBE210:
 5133               	.LBE209:
 326:player.c      **** 	player_render_interval();
 5134               		.loc 5 326 2 is_stmt 1 view .LVU1156
 5135               	.LBB213:
 5136               	.LBI213:
 277:player.c      **** {
 5137               		.loc 5 277 13 view .LVU1157
 5138               	.LBB214:
 279:player.c      **** 	lcd_char(LCD_CHAR_PLUS_MINUS);
 5139               		.loc 5 279 2 view .LVU1158
 5140 1404 8CE8      		ldi r24,lo8(-116)
 5141 1406 0E94 0000 		call lcd_command
 5142               	.LVL399:
 280:player.c      **** }
 5143               		.loc 5 280 2 view .LVU1159
 5144 140a 82E0      		ldi r24,lo8(2)
 5145 140c 0E94 0000 		call lcd_data
 5146               	.LVL400:
 5147               	.LBE214:
 5148               	.LBE213:
 327:player.c      **** 	player_render_timer();
 5149               		.loc 5 327 2 view .LVU1160
 5150 1410 0E94 0000 		call player_render_interval
 5151               	.LVL401:
 328:player.c      **** }
 5152               		.loc 5 328 2 view .LVU1161
 5153               	.LBB215:
 5154               	.LBI215:
 292:player.c      **** {
 5155               		.loc 5 292 13 view .LVU1162
 5156               	.LBB216:
 294:player.c      **** 	lcd_cursor(1, 1);
 5157               		.loc 5 294 2 view .LVU1163
 295:player.c      **** 	snprintf(buf, sizeof(buf), "%1d:%02d:%02d/%1d:%02d:%02d",
 5158               		.loc 5 295 2 view .LVU1164
 5159 1414 81EC      		ldi r24,lo8(-63)
 5160 1416 0E94 0000 		call lcd_command
 5161               	.LVL402:
 296:player.c      **** 			player_wi.ph, player_wi.pm, player_wi.ps,
 5162               		.loc 5 296 2 view .LVU1165
 298:player.c      **** 	lcd_string(buf);
 5163               		.loc 5 298 41 is_stmt 0 view .LVU1166
 5164 141a 5091 0000 		lds r21,player_wi+4
 298:player.c      **** 	lcd_string(buf);
 5165               		.loc 5 298 27 view .LVU1167
 5166 141e 4091 0000 		lds r20,player_wi+3
 298:player.c      **** 	lcd_string(buf);
 5167               		.loc 5 298 13 view .LVU1168
 5168 1422 3091 0000 		lds r19,player_wi+2
 297:player.c      **** 			player_wi.lh, player_wi.lm, player_wi.ls);
 5169               		.loc 5 297 41 view .LVU1169
 5170 1426 2091 0000 		lds r18,player_wi+7
 297:player.c      **** 			player_wi.lh, player_wi.lm, player_wi.ls);
 5171               		.loc 5 297 27 view .LVU1170
 5172 142a 9091 0000 		lds r25,player_wi+6
 297:player.c      **** 			player_wi.lh, player_wi.lm, player_wi.ls);
 5173               		.loc 5 297 13 view .LVU1171
 5174 142e 8091 0000 		lds r24,player_wi+5
 296:player.c      **** 			player_wi.ph, player_wi.pm, player_wi.ps,
 5175               		.loc 5 296 2 view .LVU1172
 5176 1432 1F92      		push __zero_reg__
 5177 1434 5F93      		push r21
 5178 1436 1F92      		push __zero_reg__
 5179 1438 4F93      		push r20
 5180 143a 1F92      		push __zero_reg__
 5181 143c 3F93      		push r19
 5182 143e 1F92      		push __zero_reg__
 5183 1440 2F93      		push r18
 5184 1442 1F92      		push __zero_reg__
 5185 1444 9F93      		push r25
 5186 1446 1F92      		push __zero_reg__
 5187 1448 8F93      		push r24
 5188 144a 80E0      		ldi r24,lo8(.LC4)
 5189 144c 90E0      		ldi r25,hi8(.LC4)
 5190 144e 9F93      		push r25
 5191 1450 8F93      		push r24
 5192 1452 1F92      		push __zero_reg__
 5193 1454 80E2      		ldi r24,lo8(32)
 5194 1456 8F93      		push r24
 5195 1458 E1E0      		ldi r30,lo8(1)
 5196 145a F0E0      		ldi r31,0
 5197 145c EC0F      		add r30,r28
 5198 145e FD1F      		adc r31,r29
 5199 1460 FF93      		push r31
 5200 1462 EF93      		push r30
 5201 1464 0E94 0000 		call snprintf
 5202               	.LVL403:
 299:player.c      **** }
 5203               		.loc 5 299 2 is_stmt 1 view .LVU1173
 5204 1468 CE01      		movw r24,r28
 5205 146a 0196      		adiw r24,1
 5206 146c 0E94 0000 		call lcd_string
 5207               	.LVL404:
 299:player.c      **** }
 5208               		.loc 5 299 2 is_stmt 0 view .LVU1174
 5209               	.LBE216:
 5210               	.LBE215:
 5211               	.LBE219:
 5212               	.LBE239:
 346:player.c      **** 	{
 347:player.c      **** 		return;
 348:player.c      **** 	}
 349:player.c      **** 
 350:player.c      **** 	player_flags.Exit = 0;
 351:player.c      **** 	player_flags.Paused = 0;
 352:player.c      **** 	player_flags.Rewind = 0;
 353:player.c      **** 	player_flags.SkipBwd = 0;
 354:player.c      **** 	player_flags.SkipFwd = 0;
 355:player.c      **** 
 356:player.c      **** 	player_read_offset = 0;
 357:player.c      **** 	player_write_offset = PLAYER_BUFFER_SIZE;
 358:player.c      **** 
 359:player.c      **** 	nread = 0;
 360:player.c      **** 	player_buf_idx = player_wi.offset;
 361:player.c      **** 	OCR2A = player_wi.compare_value;
 362:player.c      **** 	player_audio_start();
 363:player.c      **** 	player_render_init(s);
 364:player.c      **** 	while(nread < player_wi.data_len)
 5213               		.loc 5 364 2 is_stmt 1 view .LVU1175
 5214               		.loc 5 364 7 is_stmt 0 view .LVU1176
 5215 1470 0FB6      		in __tmp_reg__,__SREG__
 5216 1472 F894      		cli
 5217 1474 DEBF      		out __SP_H__,r29
 5218 1476 0FBE      		out __SREG__,__tmp_reg__
 5219 1478 CDBF      		out __SP_L__,r28
 359:player.c      **** 	player_buf_idx = player_wi.offset;
 5220               		.loc 5 359 8 view .LVU1177
 5221 147a 812C      		mov r8,__zero_reg__
 5222 147c 912C      		mov r9,__zero_reg__
 5223 147e 5401      		movw r10,r8
 5224               	.LBB240:
 5225               	.LBB241:
 306:player.c      **** 			player_wi.ph, player_wi.pm, player_wi.ps);
 5226               		.loc 5 306 2 view .LVU1178
 5227 1480 00E2      		ldi r16,lo8(32)
 5228               	.LVL405:
 5229               	.L288:
 306:player.c      **** 			player_wi.ph, player_wi.pm, player_wi.ps);
 5230               		.loc 5 306 2 view .LVU1179
 5231               	.LBE241:
 5232               	.LBE240:
 5233               		.loc 5 364 7 is_stmt 1 view .LVU1180
 5234               		.loc 5 364 25 is_stmt 0 view .LVU1181
 5235 1482 8091 0000 		lds r24,player_wi+10
 5236 1486 9091 0000 		lds r25,player_wi+10+1
 5237 148a A091 0000 		lds r26,player_wi+10+2
 5238 148e B091 0000 		lds r27,player_wi+10+3
 5239               		.loc 5 364 7 view .LVU1182
 5240 1492 8816      		cp r8,r24
 5241 1494 9906      		cpc r9,r25
 5242 1496 AA06      		cpc r10,r26
 5243 1498 BB06      		cpc r11,r27
 5244 149a 00F4      		brsh .L289
 365:player.c      **** 	{
 366:player.c      **** 		button_check(player_event);
 5245               		.loc 5 366 3 is_stmt 1 view .LVU1183
 5246 149c 80E0      		ldi r24,lo8(gs(player_event))
 5247 149e 90E0      		ldi r25,hi8(gs(player_event))
 5248 14a0 0E94 0000 		call button_check
 5249               	.LVL406:
 367:player.c      **** 		if(player_flags.Exit)
 5250               		.loc 5 367 3 view .LVU1184
 5251               		.loc 5 367 6 is_stmt 0 view .LVU1185
 5252 14a4 8091 0000 		lds r24,player_flags
 5253               		.loc 5 367 5 view .LVU1186
 5254 14a8 80FF      		sbrs r24,0
 5255 14aa 00C0      		rjmp .L281
 5256               	.L289:
 5257               	.LDL1:
 368:player.c      **** 		{
 369:player.c      **** 			goto exit;
 370:player.c      **** 		}
 371:player.c      **** 
 372:player.c      **** 		if(player_flags.Rewind)
 373:player.c      **** 		{
 374:player.c      **** 			player_audio_stop();
 375:player.c      **** 			goto rewind;
 376:player.c      **** 		}
 377:player.c      **** 
 378:player.c      **** 		if(player_flags.SkipFwd)
 379:player.c      **** 		{
 380:player.c      **** 			int32_t samples = nread + player_skip_amount[player_skip_idx] * player_wi.num_channels * player_
 381:player.c      **** 			if(samples < player_wi.data_len)
 382:player.c      **** 			{
 383:player.c      **** 				player_audio_stop();
 384:player.c      **** 				nread = samples;
 385:player.c      **** 				fat_fseek(samples);
 386:player.c      **** 				player_audio_start();
 387:player.c      **** 			}
 388:player.c      **** 
 389:player.c      **** 			player_flags.SkipFwd = 0;
 390:player.c      **** 		}
 391:player.c      **** 
 392:player.c      **** 		if(player_flags.SkipBwd)
 393:player.c      **** 		{
 394:player.c      **** 			int32_t samples = nread - player_skip_amount[player_skip_idx] * player_wi.num_channels * player_
 395:player.c      **** 			if(samples >= 0)
 396:player.c      **** 			{
 397:player.c      **** 				player_audio_stop();
 398:player.c      **** 				nread = samples;
 399:player.c      **** 				fat_fseek(samples);
 400:player.c      **** 				player_audio_start();
 401:player.c      **** 			}
 402:player.c      **** 
 403:player.c      **** 			player_flags.SkipBwd = 0;
 404:player.c      **** 		}
 405:player.c      **** 
 406:player.c      **** 		if(player_swap_flag)
 407:player.c      **** 		{
 408:player.c      **** 			if(fat_fread(player_buf + player_write_offset, PLAYER_BUFFER_SIZE, &n))
 409:player.c      **** 			{
 410:player.c      **** 				goto exit;
 411:player.c      **** 			}
 412:player.c      **** 
 413:player.c      **** 			if(n < 512)
 414:player.c      **** 			{
 415:player.c      **** 				goto exit;
 416:player.c      **** 			}
 417:player.c      **** 
 418:player.c      **** 			nread += n;
 419:player.c      **** 			player_swap_flag = 0;
 420:player.c      **** 
 421:player.c      **** 			/* Update Timer */
 422:player.c      **** 			secs = nread / player_wi.sample_rate / player_wi.num_channels;
 423:player.c      **** 			player_wi.ph = (secs / 3600) % 24;
 424:player.c      **** 			player_wi.pm = (secs / 60) % 60;
 425:player.c      **** 			player_wi.ps = secs % 60;
 426:player.c      **** 			player_render_timer_partial();
 427:player.c      **** 		}
 428:player.c      **** 	}
 429:player.c      **** 
 430:player.c      **** exit:
 431:player.c      **** 	player_audio_stop();
 5258               		.loc 5 431 2 is_stmt 1 view .LVU1187
 5259 14ac 0E94 0000 		call player_audio_stop
 5260               	.LVL407:
 5261 14b0 00C0      		rjmp .L282
 5262               	.LVL408:
 5263               	.L279:
 5264               	.LBB243:
 5265               	.LBB220:
 5266               	.LBB217:
 5267               	.LBB211:
 273:player.c      **** 	}
 5268               		.loc 5 273 3 view .LVU1188
 5269 14b2 0E94 0000 		call lcd_data
 5270               	.LVL409:
 271:player.c      **** 	{
 5271               		.loc 5 271 33 view .LVU1189
 271:player.c      **** 	{
 5272               		.loc 5 271 33 is_stmt 0 view .LVU1190
 5273 14b6 00C0      		rjmp .L277
 5274               	.LVL410:
 5275               	.L281:
 271:player.c      **** 	{
 5276               		.loc 5 271 33 view .LVU1191
 5277               	.LBE211:
 5278               	.LBE217:
 5279               	.LBE220:
 5280               	.LBE243:
 372:player.c      **** 		{
 5281               		.loc 5 372 3 is_stmt 1 view .LVU1192
 372:player.c      **** 		{
 5282               		.loc 5 372 5 is_stmt 0 view .LVU1193
 5283 14b8 82FF      		sbrs r24,2
 5284 14ba 00C0      		rjmp .L283
 374:player.c      **** 			goto rewind;
 5285               		.loc 5 374 4 is_stmt 1 view .LVU1194
 5286 14bc 0E94 0000 		call player_audio_stop
 5287               	.LVL411:
 375:player.c      **** 		}
 5288               		.loc 5 375 4 view .LVU1195
 5289 14c0 00C0      		rjmp .L262
 5290               	.L283:
 378:player.c      **** 		{
 5291               		.loc 5 378 3 view .LVU1196
 378:player.c      **** 		{
 5292               		.loc 5 378 5 is_stmt 0 view .LVU1197
 5293 14c2 83FF      		sbrs r24,3
 5294 14c4 00C0      		rjmp .L284
 5295               	.LBB244:
 380:player.c      **** 			if(samples < player_wi.data_len)
 5296               		.loc 5 380 4 is_stmt 1 view .LVU1198
 380:player.c      **** 			if(samples < player_wi.data_len)
 5297               		.loc 5 380 77 is_stmt 0 view .LVU1199
 5298 14c6 6091 0000 		lds r22,player_wi
 380:player.c      **** 			if(samples < player_wi.data_len)
 5299               		.loc 5 380 102 view .LVU1200
 5300 14ca 2091 0000 		lds r18,player_wi+14
 5301 14ce 3091 0000 		lds r19,player_wi+14+1
 5302 14d2 4091 0000 		lds r20,player_wi+14+2
 5303 14d6 5091 0000 		lds r21,player_wi+14+3
 380:player.c      **** 			if(samples < player_wi.data_len)
 5304               		.loc 5 380 48 view .LVU1201
 5305 14da E091 0000 		lds r30,player_skip_idx
 5306 14de F0E0      		ldi r31,0
 5307 14e0 EE0F      		lsl r30
 5308 14e2 FF1F      		rol r31
 5309 14e4 E050      		subi r30,lo8(-(player_skip_amount))
 5310 14e6 F040      		sbci r31,hi8(-(player_skip_amount))
 380:player.c      **** 			if(samples < player_wi.data_len)
 5311               		.loc 5 380 66 view .LVU1202
 5312 14e8 8081      		ld r24,Z
 5313 14ea 9181      		ldd r25,Z+1
 5314 14ec 689F      		mul r22,r24
 5315 14ee D001      		movw r26,r0
 5316 14f0 699F      		mul r22,r25
 5317 14f2 B00D      		add r27,r0
 5318 14f4 1124      		clr __zero_reg__
 380:player.c      **** 			if(samples < player_wi.data_len)
 5319               		.loc 5 380 91 view .LVU1203
 5320 14f6 0E94 0000 		call __muluhisi3
 5321 14fa DC01      		movw r26,r24
 5322 14fc CB01      		movw r24,r22
 380:player.c      **** 			if(samples < player_wi.data_len)
 5323               		.loc 5 380 28 view .LVU1204
 5324 14fe 880D      		add r24,r8
 5325 1500 991D      		adc r25,r9
 5326 1502 AA1D      		adc r26,r10
 5327 1504 BB1D      		adc r27,r11
 5328 1506 2596      		adiw r28,65-60
 5329 1508 8CAF      		std Y+60,r24
 5330 150a 9DAF      		std Y+61,r25
 5331 150c AEAF      		std Y+62,r26
 5332 150e BFAF      		std Y+63,r27
 5333 1510 2597      		sbiw r28,65-60
 5334               	.LVL412:
 381:player.c      **** 			{
 5335               		.loc 5 381 4 is_stmt 1 view .LVU1205
 381:player.c      **** 			{
 5336               		.loc 5 381 26 is_stmt 0 view .LVU1206
 5337 1512 8091 0000 		lds r24,player_wi+10
 5338 1516 9091 0000 		lds r25,player_wi+10+1
 5339 151a A091 0000 		lds r26,player_wi+10+2
 5340 151e B091 0000 		lds r27,player_wi+10+3
 5341               	.LVL413:
 381:player.c      **** 			{
 5342               		.loc 5 381 6 view .LVU1207
 5343 1522 2596      		adiw r28,65-60
 5344 1524 2CAD      		ldd r18,Y+60
 5345 1526 3DAD      		ldd r19,Y+61
 5346 1528 4EAD      		ldd r20,Y+62
 5347 152a 5FAD      		ldd r21,Y+63
 5348 152c 2597      		sbiw r28,65-60
 5349 152e 2817      		cp r18,r24
 5350 1530 3907      		cpc r19,r25
 5351 1532 4A07      		cpc r20,r26
 5352 1534 5B07      		cpc r21,r27
 5353 1536 00F4      		brsh .L285
 383:player.c      **** 				nread = samples;
 5354               		.loc 5 383 5 is_stmt 1 view .LVU1208
 5355 1538 0E94 0000 		call player_audio_stop
 5356               	.LVL414:
 384:player.c      **** 				fat_fseek(samples);
 5357               		.loc 5 384 5 view .LVU1209
 385:player.c      **** 				player_audio_start();
 5358               		.loc 5 385 5 view .LVU1210
 5359 153c 2596      		adiw r28,65-60
 5360 153e 6CAD      		ldd r22,Y+60
 5361 1540 7DAD      		ldd r23,Y+61
 5362 1542 8EAD      		ldd r24,Y+62
 5363 1544 9FAD      		ldd r25,Y+63
 5364 1546 2597      		sbiw r28,65-60
 5365 1548 0E94 0000 		call fat_fseek.isra.0
 5366               	.LVL415:
 386:player.c      **** 			}
 5367               		.loc 5 386 5 view .LVU1211
 5368 154c 0E94 0000 		call player_audio_start
 5369               	.LVL416:
 5370 1550 2596      		adiw r28,65-60
 5371 1552 8CAC      		ldd r8,Y+60
 5372 1554 9DAC      		ldd r9,Y+61
 5373 1556 AEAC      		ldd r10,Y+62
 5374 1558 BFAC      		ldd r11,Y+63
 5375 155a 2597      		sbiw r28,65-60
 5376               	.LVL417:
 5377               	.L285:
 389:player.c      **** 		}
 5378               		.loc 5 389 4 view .LVU1212
 389:player.c      **** 		}
 5379               		.loc 5 389 25 is_stmt 0 view .LVU1213
 5380 155c 8091 0000 		lds r24,player_flags
 5381 1560 877F      		andi r24,lo8(~(1<<3))
 5382 1562 8093 0000 		sts player_flags,r24
 5383               	.LVL418:
 5384               	.L284:
 389:player.c      **** 		}
 5385               		.loc 5 389 25 view .LVU1214
 5386               	.LBE244:
 392:player.c      **** 		{
 5387               		.loc 5 392 3 is_stmt 1 view .LVU1215
 392:player.c      **** 		{
 5388               		.loc 5 392 6 is_stmt 0 view .LVU1216
 5389 1566 8091 0000 		lds r24,player_flags
 392:player.c      **** 		{
 5390               		.loc 5 392 5 view .LVU1217
 5391 156a 84FF      		sbrs r24,4
 5392 156c 00C0      		rjmp .L286
 5393               	.LBB245:
 394:player.c      **** 			if(samples >= 0)
 5394               		.loc 5 394 4 is_stmt 1 view .LVU1218
 394:player.c      **** 			if(samples >= 0)
 5395               		.loc 5 394 77 is_stmt 0 view .LVU1219
 5396 156e 6091 0000 		lds r22,player_wi
 394:player.c      **** 			if(samples >= 0)
 5397               		.loc 5 394 102 view .LVU1220
 5398 1572 2091 0000 		lds r18,player_wi+14
 5399 1576 3091 0000 		lds r19,player_wi+14+1
 5400 157a 4091 0000 		lds r20,player_wi+14+2
 5401 157e 5091 0000 		lds r21,player_wi+14+3
 394:player.c      **** 			if(samples >= 0)
 5402               		.loc 5 394 48 view .LVU1221
 5403 1582 E091 0000 		lds r30,player_skip_idx
 5404 1586 F0E0      		ldi r31,0
 5405 1588 EE0F      		lsl r30
 5406 158a FF1F      		rol r31
 5407 158c E050      		subi r30,lo8(-(player_skip_amount))
 5408 158e F040      		sbci r31,hi8(-(player_skip_amount))
 394:player.c      **** 			if(samples >= 0)
 5409               		.loc 5 394 66 view .LVU1222
 5410 1590 8081      		ld r24,Z
 5411 1592 9181      		ldd r25,Z+1
 5412 1594 689F      		mul r22,r24
 5413 1596 D001      		movw r26,r0
 5414 1598 699F      		mul r22,r25
 5415 159a B00D      		add r27,r0
 5416 159c 1124      		clr __zero_reg__
 394:player.c      **** 			if(samples >= 0)
 5417               		.loc 5 394 91 view .LVU1223
 5418 159e 0E94 0000 		call __muluhisi3
 394:player.c      **** 			if(samples >= 0)
 5419               		.loc 5 394 28 view .LVU1224
 5420 15a2 A501      		movw r20,r10
 5421 15a4 9401      		movw r18,r8
 5422 15a6 261B      		sub r18,r22
 5423 15a8 370B      		sbc r19,r23
 5424 15aa 480B      		sbc r20,r24
 5425 15ac 590B      		sbc r21,r25
 5426 15ae 2596      		adiw r28,65-60
 5427 15b0 2CAF      		std Y+60,r18
 5428 15b2 3DAF      		std Y+61,r19
 5429 15b4 4EAF      		std Y+62,r20
 5430 15b6 5FAF      		std Y+63,r21
 5431 15b8 2597      		sbiw r28,65-60
 5432               	.LVL419:
 395:player.c      **** 			{
 5433               		.loc 5 395 4 is_stmt 1 view .LVU1225
 395:player.c      **** 			{
 5434               		.loc 5 395 6 is_stmt 0 view .LVU1226
 5435 15ba 57FD      		sbrc r21,7
 5436 15bc 00C0      		rjmp .L287
 397:player.c      **** 				nread = samples;
 5437               		.loc 5 397 5 is_stmt 1 view .LVU1227
 5438 15be 0E94 0000 		call player_audio_stop
 5439               	.LVL420:
 398:player.c      **** 				fat_fseek(samples);
 5440               		.loc 5 398 5 view .LVU1228
 399:player.c      **** 				player_audio_start();
 5441               		.loc 5 399 5 view .LVU1229
 5442 15c2 2596      		adiw r28,65-60
 5443 15c4 6CAD      		ldd r22,Y+60
 5444 15c6 7DAD      		ldd r23,Y+61
 5445 15c8 8EAD      		ldd r24,Y+62
 5446 15ca 9FAD      		ldd r25,Y+63
 5447 15cc 2597      		sbiw r28,65-60
 5448 15ce 0E94 0000 		call fat_fseek.isra.0
 5449               	.LVL421:
 400:player.c      **** 			}
 5450               		.loc 5 400 5 view .LVU1230
 5451 15d2 0E94 0000 		call player_audio_start
 5452               	.LVL422:
 5453 15d6 2596      		adiw r28,65-60
 5454 15d8 8CAC      		ldd r8,Y+60
 5455 15da 9DAC      		ldd r9,Y+61
 5456 15dc AEAC      		ldd r10,Y+62
 5457 15de BFAC      		ldd r11,Y+63
 5458 15e0 2597      		sbiw r28,65-60
 5459               	.LVL423:
 5460               	.L287:
 403:player.c      **** 		}
 5461               		.loc 5 403 4 view .LVU1231
 403:player.c      **** 		}
 5462               		.loc 5 403 25 is_stmt 0 view .LVU1232
 5463 15e2 8091 0000 		lds r24,player_flags
 5464 15e6 8F7E      		andi r24,lo8(~(1<<4))
 5465 15e8 8093 0000 		sts player_flags,r24
 5466               	.LVL424:
 5467               	.L286:
 403:player.c      **** 		}
 5468               		.loc 5 403 25 view .LVU1233
 5469               	.LBE245:
 406:player.c      **** 		{
 5470               		.loc 5 406 3 is_stmt 1 view .LVU1234
 406:player.c      **** 		{
 5471               		.loc 5 406 6 is_stmt 0 view .LVU1235
 5472 15ec 8091 0000 		lds r24,player_swap_flag
 406:player.c      **** 		{
 5473               		.loc 5 406 5 view .LVU1236
 5474 15f0 8823      		tst r24
 5475 15f2 01F4      		brne .+2
 5476 15f4 00C0      		rjmp .L288
 408:player.c      **** 			{
 5477               		.loc 5 408 4 is_stmt 1 view .LVU1237
 408:player.c      **** 			{
 5478               		.loc 5 408 7 is_stmt 0 view .LVU1238
 5479 15f6 8091 0000 		lds r24,player_write_offset
 5480 15fa 9091 0000 		lds r25,player_write_offset+1
 5481 15fe BE01      		movw r22,r28
 5482 1600 615C      		subi r22,-63
 5483 1602 7F4F      		sbci r23,-1
 5484 1604 8050      		subi r24,lo8(-(player_buf))
 5485 1606 9040      		sbci r25,hi8(-(player_buf))
 5486 1608 0E94 0000 		call fat_fread.constprop.0
 5487               	.LVL425:
 408:player.c      **** 			{
 5488               		.loc 5 408 6 view .LVU1239
 5489 160c 8111      		cpse r24,__zero_reg__
 5490 160e 00C0      		rjmp .L289
 413:player.c      **** 			{
 5491               		.loc 5 413 4 is_stmt 1 view .LVU1240
 413:player.c      **** 			{
 5492               		.loc 5 413 9 is_stmt 0 view .LVU1241
 5493 1610 2196      		adiw r28,63-62
 5494 1612 8EAD      		ldd r24,Y+62
 5495 1614 9FAD      		ldd r25,Y+63
 5496 1616 2197      		sbiw r28,63-62
 413:player.c      **** 			{
 5497               		.loc 5 413 6 view .LVU1242
 5498 1618 8115      		cp r24,__zero_reg__
 5499 161a 32E0      		ldi r19,2
 5500 161c 9307      		cpc r25,r19
 5501 161e 00F4      		brsh .+2
 5502 1620 00C0      		rjmp .L289
 418:player.c      **** 			player_swap_flag = 0;
 5503               		.loc 5 418 4 is_stmt 1 view .LVU1243
 418:player.c      **** 			player_swap_flag = 0;
 5504               		.loc 5 418 10 is_stmt 0 view .LVU1244
 5505 1622 880E      		add r8,r24
 5506 1624 991E      		adc r9,r25
 5507 1626 A11C      		adc r10,__zero_reg__
 5508 1628 B11C      		adc r11,__zero_reg__
 5509               	.LVL426:
 419:player.c      **** 
 5510               		.loc 5 419 4 is_stmt 1 view .LVU1245
 419:player.c      **** 
 5511               		.loc 5 419 21 is_stmt 0 view .LVU1246
 5512 162a 1092 0000 		sts player_swap_flag,__zero_reg__
 422:player.c      **** 			player_wi.ph = (secs / 3600) % 24;
 5513               		.loc 5 422 4 is_stmt 1 view .LVU1247
 422:player.c      **** 			player_wi.ph = (secs / 3600) % 24;
 5514               		.loc 5 422 28 is_stmt 0 view .LVU1248
 5515 162e 2091 0000 		lds r18,player_wi+14
 5516 1632 3091 0000 		lds r19,player_wi+14+1
 5517 1636 4091 0000 		lds r20,player_wi+14+2
 5518 163a 5091 0000 		lds r21,player_wi+14+3
 422:player.c      **** 			player_wi.ph = (secs / 3600) % 24;
 5519               		.loc 5 422 52 view .LVU1249
 5520 163e 1091 0000 		lds r17,player_wi
 422:player.c      **** 			player_wi.ph = (secs / 3600) % 24;
 5521               		.loc 5 422 17 view .LVU1250
 5522 1642 C501      		movw r24,r10
 5523 1644 B401      		movw r22,r8
 5524 1646 0E94 0000 		call __udivmodsi4
 5525 164a 2596      		adiw r28,65-60
 5526 164c 2CAF      		std Y+60,r18
 5527 164e 3DAF      		std Y+61,r19
 5528 1650 4EAF      		std Y+62,r20
 5529 1652 5FAF      		std Y+63,r21
 5530 1654 2597      		sbiw r28,65-60
 422:player.c      **** 			player_wi.ph = (secs / 3600) % 24;
 5531               		.loc 5 422 52 view .LVU1251
 5532 1656 212F      		mov r18,r17
 5533 1658 30E0      		ldi r19,0
 5534 165a 50E0      		ldi r21,0
 5535 165c 40E0      		ldi r20,0
 422:player.c      **** 			player_wi.ph = (secs / 3600) % 24;
 5536               		.loc 5 422 9 view .LVU1252
 5537 165e 2596      		adiw r28,65-60
 5538 1660 6CAD      		ldd r22,Y+60
 5539 1662 7DAD      		ldd r23,Y+61
 5540 1664 8EAD      		ldd r24,Y+62
 5541 1666 9FAD      		ldd r25,Y+63
 5542 1668 2597      		sbiw r28,65-60
 5543 166a 0E94 0000 		call __udivmodsi4
 5544 166e 2596      		adiw r28,65-60
 5545 1670 2CAF      		std Y+60,r18
 5546 1672 3DAF      		std Y+61,r19
 5547 1674 4EAF      		std Y+62,r20
 5548 1676 5FAF      		std Y+63,r21
 5549 1678 2597      		sbiw r28,65-60
 5550               	.LVL427:
 423:player.c      **** 			player_wi.pm = (secs / 60) % 60;
 5551               		.loc 5 423 4 is_stmt 1 view .LVU1253
 423:player.c      **** 			player_wi.pm = (secs / 60) % 60;
 5552               		.loc 5 423 25 is_stmt 0 view .LVU1254
 5553 167a CA01      		movw r24,r20
 5554 167c B901      		movw r22,r18
 5555 167e A301      		movw r20,r6
 5556 1680 9201      		movw r18,r4
 5557               	.LVL428:
 423:player.c      **** 			player_wi.pm = (secs / 60) % 60;
 5558               		.loc 5 423 25 view .LVU1255
 5559 1682 0E94 0000 		call __udivmodsi4
 5560 1686 2996      		adiw r28,69-60
 5561 1688 2CAF      		std Y+60,r18
 5562 168a 3DAF      		std Y+61,r19
 5563 168c 4EAF      		std Y+62,r20
 5564 168e 5FAF      		std Y+63,r21
 5565 1690 2997      		sbiw r28,69-60
 423:player.c      **** 			player_wi.pm = (secs / 60) % 60;
 5566               		.loc 5 423 33 view .LVU1256
 5567 1692 CA01      		movw r24,r20
 5568 1694 B901      		movw r22,r18
 5569 1696 28E1      		ldi r18,lo8(24)
 5570 1698 30E0      		ldi r19,0
 5571 169a 40E0      		ldi r20,0
 5572 169c 50E0      		ldi r21,0
 5573 169e 0E94 0000 		call __udivmodsi4
 423:player.c      **** 			player_wi.pm = (secs / 60) % 60;
 5574               		.loc 5 423 17 view .LVU1257
 5575 16a2 6093 0000 		sts player_wi+5,r22
 424:player.c      **** 			player_wi.ps = secs % 60;
 5576               		.loc 5 424 4 is_stmt 1 view .LVU1258
 424:player.c      **** 			player_wi.ps = secs % 60;
 5577               		.loc 5 424 25 is_stmt 0 view .LVU1259
 5578 16a6 2596      		adiw r28,65-60
 5579 16a8 6CAD      		ldd r22,Y+60
 5580 16aa 7DAD      		ldd r23,Y+61
 5581 16ac 8EAD      		ldd r24,Y+62
 5582 16ae 9FAD      		ldd r25,Y+63
 5583 16b0 2597      		sbiw r28,65-60
 5584 16b2 A701      		movw r20,r14
 5585 16b4 9601      		movw r18,r12
 5586 16b6 0E94 0000 		call __udivmodsi4
 5587 16ba 2596      		adiw r28,65-60
 5588 16bc 2CAF      		std Y+60,r18
 5589 16be 3DAF      		std Y+61,r19
 5590 16c0 4EAF      		std Y+62,r20
 5591 16c2 5FAF      		std Y+63,r21
 5592 16c4 2597      		sbiw r28,65-60
 5593               	.LVL429:
 424:player.c      **** 			player_wi.ps = secs % 60;
 5594               		.loc 5 424 25 view .LVU1260
 5595 16c6 162F      		mov r17,r22
 424:player.c      **** 			player_wi.ps = secs % 60;
 5596               		.loc 5 424 31 view .LVU1261
 5597 16c8 CA01      		movw r24,r20
 5598 16ca B901      		movw r22,r18
 5599 16cc A701      		movw r20,r14
 5600 16ce 9601      		movw r18,r12
 5601 16d0 0E94 0000 		call __udivmodsi4
 424:player.c      **** 			player_wi.ps = secs % 60;
 5602               		.loc 5 424 17 view .LVU1262
 5603 16d4 6093 0000 		sts player_wi+6,r22
 425:player.c      **** 			player_render_timer_partial();
 5604               		.loc 5 425 4 is_stmt 1 view .LVU1263
 425:player.c      **** 			player_render_timer_partial();
 5605               		.loc 5 425 17 is_stmt 0 view .LVU1264
 5606 16d8 1093 0000 		sts player_wi+7,r17
 426:player.c      **** 		}
 5607               		.loc 5 426 4 is_stmt 1 view .LVU1265
 5608               	.LBB246:
 5609               	.LBI240:
 302:player.c      **** {
 5610               		.loc 5 302 13 view .LVU1266
 5611               	.LBB242:
 304:player.c      **** 	lcd_cursor(1, 1);
 5612               		.loc 5 304 2 view .LVU1267
 305:player.c      **** 	snprintf(buf, sizeof(buf), "%1d:%02d:%02d",
 5613               		.loc 5 305 2 view .LVU1268
 5614 16dc 81EC      		ldi r24,lo8(-63)
 5615 16de 0E94 0000 		call lcd_command
 5616               	.LVL430:
 306:player.c      **** 			player_wi.ph, player_wi.pm, player_wi.ps);
 5617               		.loc 5 306 2 view .LVU1269
 307:player.c      **** 	lcd_string(buf);
 5618               		.loc 5 307 41 is_stmt 0 view .LVU1270
 5619 16e2 2091 0000 		lds r18,player_wi+7
 307:player.c      **** 	lcd_string(buf);
 5620               		.loc 5 307 27 view .LVU1271
 5621 16e6 9091 0000 		lds r25,player_wi+6
 307:player.c      **** 	lcd_string(buf);
 5622               		.loc 5 307 13 view .LVU1272
 5623 16ea 8091 0000 		lds r24,player_wi+5
 306:player.c      **** 			player_wi.ph, player_wi.pm, player_wi.ps);
 5624               		.loc 5 306 2 view .LVU1273
 5625 16ee 1F92      		push __zero_reg__
 5626 16f0 2F93      		push r18
 5627 16f2 1F92      		push __zero_reg__
 5628 16f4 9F93      		push r25
 5629 16f6 1F92      		push __zero_reg__
 5630 16f8 8F93      		push r24
 5631 16fa 40E0      		ldi r20,lo8(.LC5)
 5632 16fc 50E0      		ldi r21,hi8(.LC5)
 5633 16fe 5F93      		push r21
 5634 1700 4F93      		push r20
 5635 1702 1F92      		push __zero_reg__
 5636 1704 0F93      		push r16
 5637 1706 A1E0      		ldi r26,lo8(1)
 5638 1708 B0E0      		ldi r27,0
 5639 170a AC0F      		add r26,r28
 5640 170c BD1F      		adc r27,r29
 5641 170e BF93      		push r27
 5642 1710 AF93      		push r26
 5643 1712 0E94 0000 		call snprintf
 5644               	.LVL431:
 308:player.c      **** }
 5645               		.loc 5 308 2 is_stmt 1 view .LVU1274
 5646 1716 CE01      		movw r24,r28
 5647 1718 0196      		adiw r24,1
 5648 171a 0E94 0000 		call lcd_string
 5649               	.LVL432:
 309:player.c      **** 
 5650               		.loc 5 309 1 is_stmt 0 view .LVU1275
 5651 171e 0FB6      		in __tmp_reg__,__SREG__
 5652 1720 F894      		cli
 5653 1722 DEBF      		out __SP_H__,r29
 5654 1724 0FBE      		out __SREG__,__tmp_reg__
 5655 1726 CDBF      		out __SP_L__,r28
 5656 1728 00C0      		rjmp .L288
 5657               	.LVL433:
 5658               	.L245:
 309:player.c      **** 
 5659               		.loc 5 309 1 view .LVU1276
 5660               	.LBE242:
 5661               	.LBE246:
 5662               	.LBE249:
 5663               	.LBE252:
 5664               	.LBE257:
 164:dir.c         **** 			{
 5665               		.loc 6 164 4 is_stmt 1 view .LVU1277
 164:dir.c         **** 			{
 5666               		.loc 6 164 15 is_stmt 0 view .LVU1278
 5667 172a 8091 0000 		lds r24,dir_sel
 5668               	.LVL434:
 164:dir.c         **** 			{
 5669               		.loc 6 164 6 view .LVU1279
 5670 172e 8330      		cpi r24,lo8(3)
 5671 1730 00F0      		brlo .+2
 5672 1732 00C0      		rjmp .L244
 169:dir.c         **** 			{
 5673               		.loc 6 169 4 is_stmt 1 view .LVU1280
 169:dir.c         **** 			{
 5674               		.loc 6 169 6 is_stmt 0 view .LVU1281
 5675 1734 8111      		cpse r24,__zero_reg__
 5676 1736 00C0      		rjmp .L291
 171:dir.c         **** 			}
 5677               		.loc 6 171 5 is_stmt 1 view .LVU1282
 171:dir.c         **** 			}
 5678               		.loc 6 171 13 is_stmt 0 view .LVU1283
 5679 1738 81E0      		ldi r24,lo8(1)
 5680 173a 8093 0000 		sts dir_sel,r24
 5681 173e 00C0      		rjmp .L324
 5682               	.L291:
 173:dir.c         **** 			{
 5683               		.loc 6 173 9 is_stmt 1 view .LVU1284
 173:dir.c         **** 			{
 5684               		.loc 6 173 11 is_stmt 0 view .LVU1285
 5685 1740 8130      		cpi r24,lo8(1)
 5686 1742 01F0      		breq .+2
 5687 1744 00C0      		rjmp .L324
 5688               	.LBB258:
 175:dir.c         **** 				if(fat_readdir(&dir, &de))
 5689               		.loc 6 175 5 is_stmt 1 view .LVU1286
 176:dir.c         **** 				{
 5690               		.loc 6 176 5 view .LVU1287
 176:dir.c         **** 				{
 5691               		.loc 6 176 8 is_stmt 0 view .LVU1288
 5692 1746 CE01      		movw r24,r28
 5693 1748 0196      		adiw r24,1
 5694 174a 0E94 0000 		call fat_readdir.constprop.0
 5695               	.LVL435:
 176:dir.c         **** 				{
 5696               		.loc 6 176 7 view .LVU1289
 5697 174e 8111      		cpse r24,__zero_reg__
 5698 1750 00C0      		rjmp .L244
 181:dir.c         **** 				memcpy(&dirent[1], &de, sizeof(direntry_t));
 5699               		.loc 6 181 5 is_stmt 1 view .LVU1290
 5700 1752 82E1      		ldi r24,lo8(18)
 5701 1754 E0E0      		ldi r30,lo8(dirent+18)
 5702 1756 F0E0      		ldi r31,hi8(dirent+18)
 5703 1758 A0E0      		ldi r26,lo8(dirent)
 5704 175a B0E0      		ldi r27,hi8(dirent)
 5705               		0:
 5706 175c 0190      		ld r0,Z+
 5707 175e 0D92      		st X+,r0
 5708 1760 8A95      		dec r24
 5709 1762 01F4      		brne 0b
 182:dir.c         **** 			}
 5710               		.loc 6 182 5 view .LVU1291
 5711 1764 82E1      		ldi r24,lo8(18)
 5712 1766 FE01      		movw r30,r28
 5713 1768 3196      		adiw r30,1
 5714 176a 00C0      		rjmp .L322
 5715               	.LVL436:
 5716               	.L249:
 182:dir.c         **** 			}
 5717               		.loc 6 182 5 is_stmt 0 view .LVU1292
 5718               	.LBE258:
 5719               	.LBB259:
 195:dir.c         **** 			path_up();
 5720               		.loc 6 195 4 is_stmt 1 view .LVU1293
 195:dir.c         **** 			path_up();
 5721               		.loc 6 195 12 is_stmt 0 view .LVU1294
 5722 176c 1091 0000 		lds r17,dir_path_len
 5723               	.LVL437:
 196:dir.c         **** 			if(prev_len > dir_path_len)
 5724               		.loc 6 196 4 is_stmt 1 view .LVU1295
 5725 1770 0E94 0000 		call path_up
 5726               	.LVL438:
 197:dir.c         **** 			{
 5727               		.loc 6 197 4 view .LVU1296
 197:dir.c         **** 			{
 5728               		.loc 6 197 6 is_stmt 0 view .LVU1297
 5729 1774 8091 0000 		lds r24,dir_path_len
 5730 1778 8117      		cp r24,r17
 5731 177a 00F0      		brlo .+2
 5732 177c 00C0      		rjmp .L244
 5733               	.LVL439:
 5734               	.L293:
 197:dir.c         **** 			{
 5735               		.loc 6 197 6 view .LVU1298
 5736               	.LBE259:
 5737               	.LBB260:
 151:dir.c         **** 				}
 5738               		.loc 6 151 6 is_stmt 1 view .LVU1299
 5739               	/* epilogue start */
 5740               	.LBE260:
 5741               		.loc 6 204 1 is_stmt 0 view .LVU1300
 5742 177e C85B      		subi r28,-72
 5743 1780 DF4F      		sbci r29,-1
 5744 1782 0FB6      		in __tmp_reg__,__SREG__
 5745 1784 F894      		cli
 5746 1786 DEBF      		out __SP_H__,r29
 5747 1788 0FBE      		out __SREG__,__tmp_reg__
 5748 178a CDBF      		out __SP_L__,r28
 5749 178c DF91      		pop r29
 5750 178e CF91      		pop r28
 5751 1790 1F91      		pop r17
 5752 1792 0F91      		pop r16
 5753 1794 FF90      		pop r15
 5754 1796 EF90      		pop r14
 5755 1798 DF90      		pop r13
 5756 179a CF90      		pop r12
 5757 179c BF90      		pop r11
 5758 179e AF90      		pop r10
 5759 17a0 9F90      		pop r9
 5760 17a2 8F90      		pop r8
 5761 17a4 7F90      		pop r7
 5762 17a6 6F90      		pop r6
 5763 17a8 5F90      		pop r5
 5764 17aa 4F90      		pop r4
 5765 17ac 3F90      		pop r3
 5766 17ae 2F90      		pop r2
 5767               	.LBB261:
 151:dir.c         **** 				}
 5768               		.loc 6 151 6 view .LVU1301
 5769 17b0 0C94 0000 		jmp dir_prepare
 5770               	.LVL440:
 5771               	.L273:
 5772               	.LBB253:
 5773               	.LBB250:
 5774               	.LBB247:
 5775               	.LBB237:
 5776               	.LBB235:
 158:player.c      **** 		player_wi.data_len = ld_u32(data_ptr + 4);
 5777               		.loc 5 158 3 is_stmt 1 view .LVU1302
 158:player.c      **** 		player_wi.data_len = ld_u32(data_ptr + 4);
 5778               		.loc 5 158 44 is_stmt 0 view .LVU1303
 5779 17b4 C801      		movw r24,r16
 5780 17b6 8050      		subi r24,lo8(player_buf-8)
 5781 17b8 9040      		sbci r25,hi8(player_buf-8)
 158:player.c      **** 		player_wi.data_len = ld_u32(data_ptr + 4);
 5782               		.loc 5 158 20 view .LVU1304
 5783 17ba 9093 0000 		sts player_wi+8+1,r25
 5784 17be 8093 0000 		sts player_wi+8,r24
 159:player.c      **** 	}
 5785               		.loc 5 159 3 is_stmt 1 view .LVU1305
 159:player.c      **** 	}
 5786               		.loc 5 159 24 is_stmt 0 view .LVU1306
 5787 17c2 C801      		movw r24,r16
 5788 17c4 0496      		adiw r24,4
 5789 17c6 0E94 0000 		call ld_u32
 5790               	.LVL441:
 5791 17ca 462F      		mov r20,r22
 5792 17cc 572F      		mov r21,r23
 5793 17ce BC01      		movw r22,r24
 159:player.c      **** 	}
 5794               		.loc 5 159 22 view .LVU1307
 5795 17d0 4093 0000 		sts player_wi+10,r20
 5796 17d4 5093 0000 		sts player_wi+10+1,r21
 5797 17d8 6093 0000 		sts player_wi+10+2,r22
 5798 17dc 7093 0000 		sts player_wi+10+3,r23
 5799               	.LBE235:
 162:player.c      **** }
 5800               		.loc 5 162 2 is_stmt 1 view .LVU1308
 5801               	.LVL442:
 162:player.c      **** }
 5802               		.loc 5 162 2 is_stmt 0 view .LVU1309
 5803               	.LBE237:
 5804               	.LBE247:
 350:player.c      **** 	player_flags.Paused = 0;
 5805               		.loc 5 350 2 is_stmt 1 view .LVU1310
 351:player.c      **** 	player_flags.Rewind = 0;
 5806               		.loc 5 351 2 view .LVU1311
 352:player.c      **** 	player_flags.SkipBwd = 0;
 5807               		.loc 5 352 2 view .LVU1312
 353:player.c      **** 	player_flags.SkipFwd = 0;
 5808               		.loc 5 353 2 view .LVU1313
 354:player.c      **** 
 5809               		.loc 5 354 2 view .LVU1314
 350:player.c      **** 	player_flags.Paused = 0;
 5810               		.loc 5 350 20 is_stmt 0 view .LVU1315
 5811 17e0 8091 0000 		lds r24,player_flags
 5812 17e4 807E      		andi r24,lo8(-32)
 5813 17e6 8093 0000 		sts player_flags,r24
 356:player.c      **** 	player_write_offset = PLAYER_BUFFER_SIZE;
 5814               		.loc 5 356 2 is_stmt 1 view .LVU1316
 356:player.c      **** 	player_write_offset = PLAYER_BUFFER_SIZE;
 5815               		.loc 5 356 21 is_stmt 0 view .LVU1317
 5816 17ea 1092 0000 		sts player_read_offset+1,__zero_reg__
 5817 17ee 1092 0000 		sts player_read_offset,__zero_reg__
 357:player.c      **** 
 5818               		.loc 5 357 2 is_stmt 1 view .LVU1318
 357:player.c      **** 
 5819               		.loc 5 357 22 is_stmt 0 view .LVU1319
 5820 17f2 80E0      		ldi r24,0
 5821 17f4 92E0      		ldi r25,lo8(2)
 5822 17f6 9093 0000 		sts player_write_offset+1,r25
 5823 17fa 8093 0000 		sts player_write_offset,r24
 359:player.c      **** 	player_buf_idx = player_wi.offset;
 5824               		.loc 5 359 2 is_stmt 1 view .LVU1320
 360:player.c      **** 	OCR2A = player_wi.compare_value;
 5825               		.loc 5 360 2 view .LVU1321
 360:player.c      **** 	OCR2A = player_wi.compare_value;
 5826               		.loc 5 360 28 is_stmt 0 view .LVU1322
 5827 17fe 8091 0000 		lds r24,player_wi+8
 5828 1802 9091 0000 		lds r25,player_wi+8+1
 360:player.c      **** 	OCR2A = player_wi.compare_value;
 5829               		.loc 5 360 17 view .LVU1323
 5830 1806 9093 0000 		sts player_buf_idx+1,r25
 5831 180a 8093 0000 		sts player_buf_idx,r24
 361:player.c      **** 	player_audio_start();
 5832               		.loc 5 361 2 is_stmt 1 view .LVU1324
 361:player.c      **** 	player_audio_start();
 5833               		.loc 5 361 19 is_stmt 0 view .LVU1325
 5834 180e 8091 0000 		lds r24,player_wi+1
 361:player.c      **** 	player_audio_start();
 5835               		.loc 5 361 8 view .LVU1326
 5836 1812 8093 B300 		sts 179,r24
 362:player.c      **** 	player_render_init(s);
 5837               		.loc 5 362 2 is_stmt 1 view .LVU1327
 5838 1816 0E94 0000 		call player_audio_start
 5839               	.LVL443:
 363:player.c      **** 	while(nread < player_wi.data_len)
 5840               		.loc 5 363 2 view .LVU1328
 5841               	.LBB248:
 5842               	.LBI207:
 311:player.c      **** {
 5843               		.loc 5 311 13 view .LVU1329
 5844               	.LBB221:
 313:player.c      **** 
 5845               		.loc 5 313 2 view .LVU1330
 313:player.c      **** 
 5846               		.loc 5 313 27 is_stmt 0 view .LVU1331
 5847 181a 2091 0000 		lds r18,player_wi+10
 5848 181e 3091 0000 		lds r19,player_wi+10+1
 5849 1822 4091 0000 		lds r20,player_wi+10+2
 5850 1826 5091 0000 		lds r21,player_wi+10+3
 5851 182a 2596      		adiw r28,65-60
 5852 182c 2CAF      		std Y+60,r18
 5853 182e 3DAF      		std Y+61,r19
 5854 1830 4EAF      		std Y+62,r20
 5855 1832 5FAF      		std Y+63,r21
 5856 1834 2597      		sbiw r28,65-60
 313:player.c      **** 
 5857               		.loc 5 313 48 view .LVU1332
 5858 1836 2091 0000 		lds r18,player_wi+14
 5859 183a 3091 0000 		lds r19,player_wi+14+1
 5860 183e 4091 0000 		lds r20,player_wi+14+2
 5861 1842 5091 0000 		lds r21,player_wi+14+3
 313:player.c      **** 
 5862               		.loc 5 313 72 view .LVU1333
 5863 1846 1091 0000 		lds r17,player_wi
 313:player.c      **** 
 5864               		.loc 5 313 37 view .LVU1334
 5865 184a 2596      		adiw r28,65-60
 5866 184c 6CAD      		ldd r22,Y+60
 5867 184e 7DAD      		ldd r23,Y+61
 5868 1850 8EAD      		ldd r24,Y+62
 5869 1852 9FAD      		ldd r25,Y+63
 5870 1854 2597      		sbiw r28,65-60
 5871 1856 0E94 0000 		call __udivmodsi4
 5872 185a 2596      		adiw r28,65-60
 5873 185c 2CAF      		std Y+60,r18
 5874 185e 3DAF      		std Y+61,r19
 5875 1860 4EAF      		std Y+62,r20
 5876 1862 5FAF      		std Y+63,r21
 5877 1864 2597      		sbiw r28,65-60
 313:player.c      **** 
 5878               		.loc 5 313 72 view .LVU1335
 5879 1866 212F      		mov r18,r17
 5880 1868 30E0      		ldi r19,0
 5881 186a 50E0      		ldi r21,0
 5882 186c 40E0      		ldi r20,0
 313:player.c      **** 
 5883               		.loc 5 313 11 view .LVU1336
 5884 186e 2596      		adiw r28,65-60
 5885 1870 6CAD      		ldd r22,Y+60
 5886 1872 7DAD      		ldd r23,Y+61
 5887 1874 8EAD      		ldd r24,Y+62
 5888 1876 9FAD      		ldd r25,Y+63
 5889 1878 2597      		sbiw r28,65-60
 5890 187a 0E94 0000 		call __udivmodsi4
 5891 187e 2596      		adiw r28,65-60
 5892 1880 2CAF      		std Y+60,r18
 5893 1882 3DAF      		std Y+61,r19
 5894 1884 4EAF      		std Y+62,r20
 5895 1886 5FAF      		std Y+63,r21
 5896 1888 2597      		sbiw r28,65-60
 5897               	.LVL444:
 315:player.c      **** 	player_wi.pm = 0;
 5898               		.loc 5 315 2 is_stmt 1 view .LVU1337
 315:player.c      **** 	player_wi.pm = 0;
 5899               		.loc 5 315 15 is_stmt 0 view .LVU1338
 5900 188a 1092 0000 		sts player_wi+5,__zero_reg__
 316:player.c      **** 	player_wi.ps = 0;
 5901               		.loc 5 316 2 is_stmt 1 view .LVU1339
 316:player.c      **** 	player_wi.ps = 0;
 5902               		.loc 5 316 15 is_stmt 0 view .LVU1340
 5903 188e 1092 0000 		sts player_wi+6,__zero_reg__
 317:player.c      **** 
 5904               		.loc 5 317 2 is_stmt 1 view .LVU1341
 317:player.c      **** 
 5905               		.loc 5 317 15 is_stmt 0 view .LVU1342
 5906 1892 1092 0000 		sts player_wi+7,__zero_reg__
 319:player.c      **** 	player_wi.lm = (secs / 60) % 60;
 5907               		.loc 5 319 2 is_stmt 1 view .LVU1343
 319:player.c      **** 	player_wi.lm = (secs / 60) % 60;
 5908               		.loc 5 319 23 is_stmt 0 view .LVU1344
 5909 1896 CA01      		movw r24,r20
 5910 1898 B901      		movw r22,r18
 5911 189a A301      		movw r20,r6
 5912 189c 9201      		movw r18,r4
 5913               	.LVL445:
 319:player.c      **** 	player_wi.lm = (secs / 60) % 60;
 5914               		.loc 5 319 23 view .LVU1345
 5915 189e 0E94 0000 		call __udivmodsi4
 5916 18a2 2996      		adiw r28,69-60
 5917 18a4 2CAF      		std Y+60,r18
 5918 18a6 3DAF      		std Y+61,r19
 5919 18a8 4EAF      		std Y+62,r20
 5920 18aa 5FAF      		std Y+63,r21
 5921 18ac 2997      		sbiw r28,69-60
 319:player.c      **** 	player_wi.lm = (secs / 60) % 60;
 5922               		.loc 5 319 31 view .LVU1346
 5923 18ae CA01      		movw r24,r20
 5924 18b0 B901      		movw r22,r18
 5925 18b2 28E1      		ldi r18,lo8(24)
 5926 18b4 30E0      		ldi r19,0
 5927 18b6 40E0      		ldi r20,0
 5928 18b8 50E0      		ldi r21,0
 5929 18ba 0E94 0000 		call __udivmodsi4
 319:player.c      **** 	player_wi.lm = (secs / 60) % 60;
 5930               		.loc 5 319 15 view .LVU1347
 5931 18be 6093 0000 		sts player_wi+2,r22
 320:player.c      **** 	player_wi.ls = secs % 60;
 5932               		.loc 5 320 2 is_stmt 1 view .LVU1348
 320:player.c      **** 	player_wi.ls = secs % 60;
 5933               		.loc 5 320 23 is_stmt 0 view .LVU1349
 5934 18c2 2596      		adiw r28,65-60
 5935 18c4 6CAD      		ldd r22,Y+60
 5936 18c6 7DAD      		ldd r23,Y+61
 5937 18c8 8EAD      		ldd r24,Y+62
 5938 18ca 9FAD      		ldd r25,Y+63
 5939 18cc 2597      		sbiw r28,65-60
 5940 18ce A701      		movw r20,r14
 5941 18d0 9601      		movw r18,r12
 5942 18d2 0E94 0000 		call __udivmodsi4
 5943 18d6 2596      		adiw r28,65-60
 5944 18d8 2CAF      		std Y+60,r18
 5945 18da 3DAF      		std Y+61,r19
 5946 18dc 4EAF      		std Y+62,r20
 5947 18de 5FAF      		std Y+63,r21
 5948 18e0 2597      		sbiw r28,65-60
 5949               	.LVL446:
 320:player.c      **** 	player_wi.ls = secs % 60;
 5950               		.loc 5 320 23 view .LVU1350
 5951 18e2 162F      		mov r17,r22
 320:player.c      **** 	player_wi.ls = secs % 60;
 5952               		.loc 5 320 29 view .LVU1351
 5953 18e4 CA01      		movw r24,r20
 5954 18e6 B901      		movw r22,r18
 5955 18e8 A701      		movw r20,r14
 5956 18ea 9601      		movw r18,r12
 5957 18ec 0E94 0000 		call __udivmodsi4
 320:player.c      **** 	player_wi.ls = secs % 60;
 5958               		.loc 5 320 15 view .LVU1352
 5959 18f0 6093 0000 		sts player_wi+3,r22
 321:player.c      **** 
 5960               		.loc 5 321 2 is_stmt 1 view .LVU1353
 321:player.c      **** 
 5961               		.loc 5 321 15 is_stmt 0 view .LVU1354
 5962 18f4 1093 0000 		sts player_wi+4,r17
 323:player.c      **** 	player_render_pause();
 5963               		.loc 5 323 2 is_stmt 1 view .LVU1355
 5964 18f8 0E94 0000 		call lcd_clear
 5965               	.LVL447:
 324:player.c      **** 	player_render_name(name);
 5966               		.loc 5 324 2 view .LVU1356
 5967 18fc 0E94 0000 		call player_render_pause
 5968               	.LVL448:
 325:player.c      **** 	player_render_plus_minus();
 5969               		.loc 5 325 2 view .LVU1357
 5970               	.LBB218:
 5971               	.LBI209:
 257:player.c      **** {
 5972               		.loc 5 257 13 view .LVU1358
 5973               	.LBB212:
 259:player.c      **** 	char c;
 5974               		.loc 5 259 2 view .LVU1359
 260:player.c      **** 	lcd_cursor(2, 0);
 5975               		.loc 5 260 2 view .LVU1360
 261:player.c      **** 
 5976               		.loc 5 261 2 view .LVU1361
 5977 1900 82E8      		ldi r24,lo8(-126)
 5978 1902 0E94 0000 		call lcd_command
 5979               	.LVL449:
 263:player.c      **** 	{
 5980               		.loc 5 263 2 view .LVU1362
 263:player.c      **** 	{
 5981               		.loc 5 263 2 is_stmt 0 view .LVU1363
 5982 1906 E0E0      		ldi r30,lo8(dir_path)
 5983 1908 F0E0      		ldi r31,hi8(dir_path)
 5984 190a 00C0      		rjmp .L323
 5985               	.LBE212:
 5986               	.LBE218:
 5987               	.LBE221:
 5988               	.LBE248:
 5989               	.LBE250:
 5990               	.LBE253:
 5991               	.LBE261:
 5992               		.cfi_endproc
 5993               	.LFE71:
 5995               	.global	__vector_7
 5997               	__vector_7:
 5998               	.LFB64:
 432:player.c      **** }
 433:player.c      **** 
 434:player.c      **** static void player_isr_mono(void)
 435:player.c      **** {
 436:player.c      **** 	uint8_t sample = player_buf[player_read_offset + player_buf_idx++];
 437:player.c      **** 	OCR0A = sample;
 438:player.c      **** 	OCR0B = sample;
 439:player.c      **** 	if(player_buf_idx == PLAYER_BUFFER_SIZE)
 440:player.c      **** 	{
 441:player.c      **** 		uint16_t tmp;
 442:player.c      **** 		player_buf_idx = 0;
 443:player.c      **** 
 444:player.c      **** 		/* Swap */
 445:player.c      **** 		tmp = player_read_offset;
 446:player.c      **** 		player_read_offset = player_write_offset;
 447:player.c      **** 		player_write_offset = tmp;
 448:player.c      **** 
 449:player.c      **** 		player_swap_flag = 1;
 450:player.c      **** 	}
 451:player.c      **** }
 452:player.c      **** 
 453:player.c      **** static void player_isr_stereo(void)
 454:player.c      **** {
 455:player.c      **** 	OCR0A = player_buf[player_read_offset + player_buf_idx++];
 456:player.c      **** 	OCR0B = player_buf[player_read_offset + player_buf_idx++];
 457:player.c      **** 	if(player_buf_idx == PLAYER_BUFFER_SIZE)
 458:player.c      **** 	{
 459:player.c      **** 		uint16_t tmp;
 460:player.c      **** 		player_buf_idx = 0;
 461:player.c      **** 
 462:player.c      **** 		/* Swap */
 463:player.c      **** 		tmp = player_read_offset;
 464:player.c      **** 		player_read_offset = player_write_offset;
 465:player.c      **** 		player_write_offset = tmp;
 466:player.c      **** 
 467:player.c      **** 		player_swap_flag = 1;
 468:player.c      **** 	}
 469:player.c      **** }
 470:player.c      **** 
 471:player.c      **** /* Audio Interrupt */
 472:player.c      **** ISR(TIMER2_COMPA_vect)
 473:player.c      **** {
 5999               		.loc 5 473 1 is_stmt 1 view -0
 6000               		.cfi_startproc
 6001 190c 1F92 1FB6 		__gcc_isr 1
 6001      1F92 1124 
 6001      2F93 
 6002 1916 3F93      		push r19
 6003               	.LCFI157:
 6004               		.cfi_def_cfa_offset 3
 6005               		.cfi_offset 19, -2
 6006 1918 4F93      		push r20
 6007               	.LCFI158:
 6008               		.cfi_def_cfa_offset 4
 6009               		.cfi_offset 20, -3
 6010 191a 8F93      		push r24
 6011               	.LCFI159:
 6012               		.cfi_def_cfa_offset 5
 6013               		.cfi_offset 24, -4
 6014 191c 9F93      		push r25
 6015               	.LCFI160:
 6016               		.cfi_def_cfa_offset 6
 6017               		.cfi_offset 25, -5
 6018 191e EF93      		push r30
 6019               	.LCFI161:
 6020               		.cfi_def_cfa_offset 7
 6021               		.cfi_offset 30, -6
 6022 1920 FF93      		push r31
 6023               	.LCFI162:
 6024               		.cfi_def_cfa_offset 8
 6025               		.cfi_offset 31, -7
 6026               	/* prologue: Signal */
 6027               	/* frame size = 0 */
 6028               	/* stack size = 6...10 */
 6029               	.L__stack_usage = 6 + __gcc_isr.n_pushed
 474:player.c      **** 	if(player_wi.num_channels == 1)
 6030               		.loc 5 474 2 view .LVU1365
 6031               		.loc 5 474 14 is_stmt 0 view .LVU1366
 6032 1922 4091 0000 		lds r20,player_wi
 6033               	.LBB268:
 6034               	.LBB269:
 436:player.c      **** 	OCR0A = sample;
 6035               		.loc 5 436 65 view .LVU1367
 6036 1926 8091 0000 		lds r24,player_buf_idx
 6037 192a 9091 0000 		lds r25,player_buf_idx+1
 6038 192e 9C01      		movw r18,r24
 6039 1930 2F5F      		subi r18,-1
 6040 1932 3F4F      		sbci r19,-1
 6041 1934 3093 0000 		sts player_buf_idx+1,r19
 6042 1938 2093 0000 		sts player_buf_idx,r18
 436:player.c      **** 	OCR0A = sample;
 6043               		.loc 5 436 49 view .LVU1368
 6044 193c E091 0000 		lds r30,player_read_offset
 6045 1940 F091 0000 		lds r31,player_read_offset+1
 436:player.c      **** 	OCR0A = sample;
 6046               		.loc 5 436 10 view .LVU1369
 6047 1944 E050      		subi r30,lo8(-(player_buf))
 6048 1946 F040      		sbci r31,hi8(-(player_buf))
 6049 1948 E80F      		add r30,r24
 6050 194a F91F      		adc r31,r25
 6051 194c 8081      		ld r24,Z
 6052               	.LVL450:
 437:player.c      **** 	OCR0B = sample;
 6053               		.loc 5 437 2 is_stmt 1 view .LVU1370
 437:player.c      **** 	OCR0B = sample;
 6054               		.loc 5 437 8 is_stmt 0 view .LVU1371
 6055 194e 87BD      		out 0x27,r24
 6056               	.LBE269:
 6057               	.LBE268:
 6058               		.loc 5 474 4 view .LVU1372
 6059 1950 4130      		cpi r20,lo8(1)
 6060 1952 01F4      		brne .L326
 475:player.c      **** 	{
 476:player.c      **** 		player_isr_mono();
 6061               		.loc 5 476 3 is_stmt 1 view .LVU1373
 6062               	.LBB272:
 6063               	.LBI268:
 434:player.c      **** {
 6064               		.loc 5 434 13 view .LVU1374
 6065               	.LBB271:
 436:player.c      **** 	OCR0A = sample;
 6066               		.loc 5 436 2 view .LVU1375
 438:player.c      **** 	if(player_buf_idx == PLAYER_BUFFER_SIZE)
 6067               		.loc 5 438 2 view .LVU1376
 438:player.c      **** 	if(player_buf_idx == PLAYER_BUFFER_SIZE)
 6068               		.loc 5 438 8 is_stmt 0 view .LVU1377
 6069 1954 88BD      		out 0x28,r24
 439:player.c      **** 	{
 6070               		.loc 5 439 2 is_stmt 1 view .LVU1378
 439:player.c      **** 	{
 6071               		.loc 5 439 4 is_stmt 0 view .LVU1379
 6072 1956 8091 0000 		lds r24,player_buf_idx
 6073 195a 9091 0000 		lds r25,player_buf_idx+1
 6074               	.LVL451:
 439:player.c      **** 	{
 6075               		.loc 5 439 4 view .LVU1380
 6076 195e 8115      		cp r24,__zero_reg__
 6077 1960 9240      		sbci r25,2
 6078 1962 01F4      		brne .L325
 6079               	.LBB270:
 441:player.c      **** 		player_buf_idx = 0;
 6080               		.loc 5 441 3 is_stmt 1 view .LVU1381
 442:player.c      **** 
 6081               		.loc 5 442 3 view .LVU1382
 442:player.c      **** 
 6082               		.loc 5 442 18 is_stmt 0 view .LVU1383
 6083 1964 1092 0000 		sts player_buf_idx+1,__zero_reg__
 6084 1968 1092 0000 		sts player_buf_idx,__zero_reg__
 6085               	.LVL452:
 445:player.c      **** 		player_read_offset = player_write_offset;
 6086               		.loc 5 445 3 is_stmt 1 view .LVU1384
 445:player.c      **** 		player_read_offset = player_write_offset;
 6087               		.loc 5 445 7 is_stmt 0 view .LVU1385
 6088 196c 8091 0000 		lds r24,player_read_offset
 6089 1970 9091 0000 		lds r25,player_read_offset+1
 6090               	.LVL453:
 446:player.c      **** 		player_write_offset = tmp;
 6091               		.loc 5 446 3 is_stmt 1 view .LVU1386
 446:player.c      **** 		player_write_offset = tmp;
 6092               		.loc 5 446 22 is_stmt 0 view .LVU1387
 6093 1974 2091 0000 		lds r18,player_write_offset
 6094 1978 3091 0000 		lds r19,player_write_offset+1
 6095 197c 3093 0000 		sts player_read_offset+1,r19
 6096 1980 2093 0000 		sts player_read_offset,r18
 447:player.c      **** 
 6097               		.loc 5 447 3 is_stmt 1 view .LVU1388
 447:player.c      **** 
 6098               		.loc 5 447 23 is_stmt 0 view .LVU1389
 6099 1984 9093 0000 		sts player_write_offset+1,r25
 6100 1988 8093 0000 		sts player_write_offset,r24
 449:player.c      **** 	}
 6101               		.loc 5 449 3 is_stmt 1 view .LVU1390
 449:player.c      **** 	}
 6102               		.loc 5 449 20 is_stmt 0 view .LVU1391
 6103 198c 4093 0000 		sts player_swap_flag,r20
 6104               	.LVL454:
 6105               	.L325:
 6106               	/* epilogue start */
 449:player.c      **** 	}
 6107               		.loc 5 449 20 view .LVU1392
 6108               	.LBE270:
 6109               	.LBE271:
 6110               	.LBE272:
 477:player.c      **** 	}
 478:player.c      **** 	else
 479:player.c      **** 	{
 480:player.c      **** 		player_isr_stereo();
 481:player.c      **** 	}
 482:player.c      **** }
 6111               		.loc 5 482 1 view .LVU1393
 6112 1990 FF91      		pop r31
 6113 1992 EF91      		pop r30
 6114 1994 9F91      		pop r25
 6115 1996 8F91      		pop r24
 6116 1998 4F91      		pop r20
 6117 199a 3F91      		pop r19
 6118 199c 2F91 1F90 		__gcc_isr 2
 6118      1FBE 1F90 
 6119 19a4 1895      		reti
 6120               	.LVL455:
 6121               	.L326:
 480:player.c      **** 	}
 6122               		.loc 5 480 3 is_stmt 1 view .LVU1394
 6123               	.LBB273:
 6124               	.LBI273:
 453:player.c      **** {
 6125               		.loc 5 453 13 view .LVU1395
 6126               	.LBB274:
 455:player.c      **** 	OCR0B = player_buf[player_read_offset + player_buf_idx++];
 6127               		.loc 5 455 2 view .LVU1396
 456:player.c      **** 	if(player_buf_idx == PLAYER_BUFFER_SIZE)
 6128               		.loc 5 456 2 view .LVU1397
 456:player.c      **** 	if(player_buf_idx == PLAYER_BUFFER_SIZE)
 6129               		.loc 5 456 56 is_stmt 0 view .LVU1398
 6130 19a6 8091 0000 		lds r24,player_buf_idx
 6131 19aa 9091 0000 		lds r25,player_buf_idx+1
 6132               	.LVL456:
 456:player.c      **** 	if(player_buf_idx == PLAYER_BUFFER_SIZE)
 6133               		.loc 5 456 56 view .LVU1399
 6134 19ae 9C01      		movw r18,r24
 6135 19b0 2F5F      		subi r18,-1
 6136 19b2 3F4F      		sbci r19,-1
 6137 19b4 3093 0000 		sts player_buf_idx+1,r19
 6138 19b8 2093 0000 		sts player_buf_idx,r18
 6139               	.LVL457:
 456:player.c      **** 	if(player_buf_idx == PLAYER_BUFFER_SIZE)
 6140               		.loc 5 456 40 view .LVU1400
 6141 19bc E091 0000 		lds r30,player_read_offset
 6142 19c0 F091 0000 		lds r31,player_read_offset+1
 456:player.c      **** 	if(player_buf_idx == PLAYER_BUFFER_SIZE)
 6143               		.loc 5 456 20 view .LVU1401
 6144 19c4 8050      		subi r24,lo8(-(player_buf))
 6145 19c6 9040      		sbci r25,hi8(-(player_buf))
 6146 19c8 E80F      		add r30,r24
 6147 19ca F91F      		adc r31,r25
 6148 19cc 8081      		ld r24,Z
 456:player.c      **** 	if(player_buf_idx == PLAYER_BUFFER_SIZE)
 6149               		.loc 5 456 8 view .LVU1402
 6150 19ce 88BD      		out 0x28,r24
 457:player.c      **** 	{
 6151               		.loc 5 457 2 is_stmt 1 view .LVU1403
 457:player.c      **** 	{
 6152               		.loc 5 457 4 is_stmt 0 view .LVU1404
 6153 19d0 8091 0000 		lds r24,player_buf_idx
 6154 19d4 9091 0000 		lds r25,player_buf_idx+1
 6155 19d8 8115      		cp r24,__zero_reg__
 6156 19da 9240      		sbci r25,2
 6157 19dc 01F4      		brne .L325
 6158               	.LBB275:
 459:player.c      **** 		player_buf_idx = 0;
 6159               		.loc 5 459 3 is_stmt 1 view .LVU1405
 460:player.c      **** 
 6160               		.loc 5 460 3 view .LVU1406
 460:player.c      **** 
 6161               		.loc 5 460 18 is_stmt 0 view .LVU1407
 6162 19de 1092 0000 		sts player_buf_idx+1,__zero_reg__
 6163 19e2 1092 0000 		sts player_buf_idx,__zero_reg__
 463:player.c      **** 		player_read_offset = player_write_offset;
 6164               		.loc 5 463 3 is_stmt 1 view .LVU1408
 463:player.c      **** 		player_read_offset = player_write_offset;
 6165               		.loc 5 463 7 is_stmt 0 view .LVU1409
 6166 19e6 8091 0000 		lds r24,player_read_offset
 6167 19ea 9091 0000 		lds r25,player_read_offset+1
 6168               	.LVL458:
 464:player.c      **** 		player_write_offset = tmp;
 6169               		.loc 5 464 3 is_stmt 1 view .LVU1410
 464:player.c      **** 		player_write_offset = tmp;
 6170               		.loc 5 464 22 is_stmt 0 view .LVU1411
 6171 19ee 2091 0000 		lds r18,player_write_offset
 6172 19f2 3091 0000 		lds r19,player_write_offset+1
 6173 19f6 3093 0000 		sts player_read_offset+1,r19
 6174 19fa 2093 0000 		sts player_read_offset,r18
 465:player.c      **** 
 6175               		.loc 5 465 3 is_stmt 1 view .LVU1412
 465:player.c      **** 
 6176               		.loc 5 465 23 is_stmt 0 view .LVU1413
 6177 19fe 9093 0000 		sts player_write_offset+1,r25
 6178 1a02 8093 0000 		sts player_write_offset,r24
 467:player.c      **** 	}
 6179               		.loc 5 467 3 is_stmt 1 view .LVU1414
 467:player.c      **** 	}
 6180               		.loc 5 467 20 is_stmt 0 view .LVU1415
 6181 1a06 81E0      		ldi r24,lo8(1)
 6182               	.LVL459:
 467:player.c      **** 	}
 6183               		.loc 5 467 20 view .LVU1416
 6184 1a08 8093 0000 		sts player_swap_flag,r24
 6185               	.LVL460:
 467:player.c      **** 	}
 6186               		.loc 5 467 20 view .LVU1417
 6187               	.LBE275:
 6188               	.LBE274:
 6189               	.LBE273:
 6190               		.loc 5 482 1 view .LVU1418
 6191 1a0c 00C0      		rjmp .L325
 6192               		__gcc_isr 0,r18
 6193               		.cfi_endproc
 6194               	.LFE64:
 6196               		.section	.text.startup,"ax",@progbits
 6197               	.global	main
 6199               	main:
 6200               	.LFB73:
 6201               		.file 10 "main.c"
   1:main.c        **** /* AVR Audio Player/Recorder
   2:main.c        ****  * Channels: 1 (Mono), 2 (Stereo)
   3:main.c        ****  * Bit resolutions: 8 bit
   4:main.c        ****  * PWM Timer0 Frequency: 16 000 000 Hz (F_CPU) / 256 = 62 500 Hz (MAX)
   5:main.c        ****  */
   6:main.c        **** 
   7:main.c        **** #include <stdint.h>
   8:main.c        **** 
   9:main.c        **** #include <avr/io.h>
  10:main.c        **** #include <avr/power.h>
  11:main.c        **** #include <avr/sleep.h>
  12:main.c        **** #include <avr/pgmspace.h>
  13:main.c        **** #include <avr/interrupt.h>
  14:main.c        **** #include <util/delay.h>
  15:main.c        **** 
  16:main.c        **** #define ARRAY_LENGTH(a)        (sizeof(a) / sizeof(*a))
  17:main.c        **** 
  18:main.c        **** #include "lcd.c"
  19:main.c        **** #include "button.c"
  20:main.c        **** #include "util.c"
  21:main.c        **** #include "sd.c"
  22:main.c        **** #include "fat.c"
  23:main.c        **** #include "chars.c"
  24:main.c        **** 
  25:main.c        **** #include "player.c"
  26:main.c        **** #include "error.c"
  27:main.c        **** /* #include "recorder.c" */
  28:main.c        **** #include "dir.c"
  29:main.c        **** 
  30:main.c        **** int main(void)
  31:main.c        **** {
 6202               		.loc 10 31 1 is_stmt 1 view -0
 6203               		.cfi_startproc
 6204 0000 CDB7      		in r28,__SP_L__
 6205 0002 DEB7      		in r29,__SP_H__
 6206               	.LCFI163:
 6207               		.cfi_def_cfa_register 28
 6208 0004 AC97      		sbiw r28,44
 6209               	.LCFI164:
 6210               		.cfi_def_cfa_offset 46
 6211 0006 0FB6      		in __tmp_reg__,__SREG__
 6212 0008 F894      		cli
 6213 000a DEBF      		out __SP_H__,r29
 6214 000c 0FBE      		out __SREG__,__tmp_reg__
 6215 000e CDBF      		out __SP_L__,r28
 6216               	/* prologue: function */
 6217               	/* frame size = 44 */
 6218               	/* stack size = 44 */
 6219               	.L__stack_usage = 44
  32:main.c        **** 	lcd_init();
 6220               		.loc 10 32 2 view .LVU1420
 6221               	.LBB310:
 6222               	.LBI310:
 102:lcd.c         **** {
 6223               		.loc 7 102 13 view .LVU1421
 6224               	.LBB311:
 104:lcd.c         **** 	LCD_DIR |= pins;
 6225               		.loc 7 104 2 view .LVU1422
 6226               	.LVL461:
 105:lcd.c         **** 	LCD_OUT &= ~pins;
 6227               		.loc 7 105 2 view .LVU1423
 105:lcd.c         **** 	LCD_OUT &= ~pins;
 6228               		.loc 7 105 10 is_stmt 0 view .LVU1424
 6229 0010 8AB1      		in r24,0xa
 6230 0012 8F69      		ori r24,lo8(-97)
 6231 0014 8AB9      		out 0xa,r24
 106:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_BOOTUP);
 6232               		.loc 7 106 2 is_stmt 1 view .LVU1425
 106:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_BOOTUP);
 6233               		.loc 7 106 10 is_stmt 0 view .LVU1426
 6234 0016 8BB1      		in r24,0xb
 6235 0018 8076      		andi r24,lo8(96)
 6236 001a 8BB9      		out 0xb,r24
 107:lcd.c         **** 	lcd_out(LCD_SOFT_RESET);
 6237               		.loc 7 107 2 is_stmt 1 view .LVU1427
 6238               	.LVL462:
 6239               	.LBB312:
 6240               	.LBI312:
 166:/usr/avr/include/util/delay.h **** {
 6241               		.loc 8 166 1 view .LVU1428
 6242               	.LBB313:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 6243               		.loc 8 168 2 view .LVU1429
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 6244               		.loc 8 172 2 view .LVU1430
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 6245               		.loc 8 173 2 view .LVU1431
 174:/usr/avr/include/util/delay.h **** 
 6246               		.loc 8 174 2 view .LVU1432
 184:/usr/avr/include/util/delay.h **** 	#endif
 6247               		.loc 8 184 3 view .LVU1433
 187:/usr/avr/include/util/delay.h **** 
 6248               		.loc 8 187 2 view .LVU1434
 6249 001c 8FE5      		ldi r24,lo8(-5537)
 6250 001e 9AEE      		ldi r25,hi8(-5537)
 6251 0020 0197      	1:	sbiw r24,1
 6252 0022 01F4      		brne 1b
 6253 0024 00C0      		rjmp .
 6254 0026 0000      		nop
 6255               	.LVL463:
 187:/usr/avr/include/util/delay.h **** 
 6256               		.loc 8 187 2 is_stmt 0 view .LVU1435
 6257               	.LBE313:
 6258               	.LBE312:
 108:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_RESET_1);
 6259               		.loc 7 108 2 is_stmt 1 view .LVU1436
 6260 0028 80E3      		ldi r24,lo8(48)
 6261 002a 0E94 0000 		call lcd_out
 6262               	.LVL464:
 109:lcd.c         **** 	lcd_enable();
 6263               		.loc 7 109 2 view .LVU1437
 6264               	.LBB314:
 6265               	.LBI314:
 166:/usr/avr/include/util/delay.h **** {
 6266               		.loc 8 166 1 view .LVU1438
 6267               	.LBB315:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 6268               		.loc 8 168 2 view .LVU1439
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 6269               		.loc 8 172 2 view .LVU1440
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 6270               		.loc 8 173 2 view .LVU1441
 174:/usr/avr/include/util/delay.h **** 
 6271               		.loc 8 174 2 view .LVU1442
 184:/usr/avr/include/util/delay.h **** 	#endif
 6272               		.loc 8 184 3 view .LVU1443
 187:/usr/avr/include/util/delay.h **** 
 6273               		.loc 8 187 2 view .LVU1444
 6274 002e AFE1      		ldi r26,lo8(19999)
 6275 0030 BEE4      		ldi r27,hi8(19999)
 6276 0032 1197      	1:	sbiw r26,1
 6277 0034 01F4      		brne 1b
 6278 0036 00C0      		rjmp .
 6279 0038 0000      		nop
 6280               	.LVL465:
 187:/usr/avr/include/util/delay.h **** 
 6281               		.loc 8 187 2 is_stmt 0 view .LVU1445
 6282               	.LBE315:
 6283               	.LBE314:
 110:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_RESET_2);
 6284               		.loc 7 110 2 is_stmt 1 view .LVU1446
 6285 003a 0E94 0000 		call lcd_enable
 6286               	.LVL466:
 111:lcd.c         **** 	lcd_enable();
 6287               		.loc 7 111 2 view .LVU1447
 6288               	.LBB316:
 6289               	.LBI316:
 166:/usr/avr/include/util/delay.h **** {
 6290               		.loc 8 166 1 view .LVU1448
 6291               	.LBB317:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 6292               		.loc 8 168 2 view .LVU1449
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 6293               		.loc 8 172 2 view .LVU1450
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 6294               		.loc 8 173 2 view .LVU1451
 174:/usr/avr/include/util/delay.h **** 
 6295               		.loc 8 174 2 view .LVU1452
 184:/usr/avr/include/util/delay.h **** 	#endif
 6296               		.loc 8 184 3 view .LVU1453
 187:/usr/avr/include/util/delay.h **** 
 6297               		.loc 8 187 2 view .LVU1454
 6298 003e 8FE9      		ldi r24,lo8(3999)
 6299 0040 9FE0      		ldi r25,hi8(3999)
 6300 0042 0197      	1:	sbiw r24,1
 6301 0044 01F4      		brne 1b
 6302 0046 00C0      		rjmp .
 6303 0048 0000      		nop
 6304               	.LVL467:
 187:/usr/avr/include/util/delay.h **** 
 6305               		.loc 8 187 2 is_stmt 0 view .LVU1455
 6306               	.LBE317:
 6307               	.LBE316:
 112:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_RESET_3);
 6308               		.loc 7 112 2 is_stmt 1 view .LVU1456
 6309 004a 0E94 0000 		call lcd_enable
 6310               	.LVL468:
 113:lcd.c         **** 	lcd_out(LCD_SET_FUNCTION | LCD_FUNCTION_4BIT);
 6311               		.loc 7 113 2 view .LVU1457
 6312               	.LBB318:
 6313               	.LBI318:
 166:/usr/avr/include/util/delay.h **** {
 6314               		.loc 8 166 1 view .LVU1458
 6315               	.LBB319:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 6316               		.loc 8 168 2 view .LVU1459
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 6317               		.loc 8 172 2 view .LVU1460
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 6318               		.loc 8 173 2 view .LVU1461
 174:/usr/avr/include/util/delay.h **** 
 6319               		.loc 8 174 2 view .LVU1462
 184:/usr/avr/include/util/delay.h **** 	#endif
 6320               		.loc 8 184 3 view .LVU1463
 187:/usr/avr/include/util/delay.h **** 
 6321               		.loc 8 187 2 view .LVU1464
 6322 004e AFE9      		ldi r26,lo8(3999)
 6323 0050 BFE0      		ldi r27,hi8(3999)
 6324 0052 1197      	1:	sbiw r26,1
 6325 0054 01F4      		brne 1b
 6326 0056 00C0      		rjmp .
 6327 0058 0000      		nop
 6328               	.LVL469:
 187:/usr/avr/include/util/delay.h **** 
 6329               		.loc 8 187 2 is_stmt 0 view .LVU1465
 6330               	.LBE319:
 6331               	.LBE318:
 114:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_4BIT);
 6332               		.loc 7 114 2 is_stmt 1 view .LVU1466
 6333 005a 80E2      		ldi r24,lo8(32)
 6334 005c 0E94 0000 		call lcd_out
 6335               	.LVL470:
 115:lcd.c         **** 	lcd_command(LCD_SET_FUNCTION | LCD_FUNCTION_4BIT |
 6336               		.loc 7 115 2 view .LVU1467
 6337               	.LBB320:
 6338               	.LBI320:
 166:/usr/avr/include/util/delay.h **** {
 6339               		.loc 8 166 1 view .LVU1468
 6340               	.LBB321:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 6341               		.loc 8 168 2 view .LVU1469
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 6342               		.loc 8 172 2 view .LVU1470
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 6343               		.loc 8 173 2 view .LVU1471
 174:/usr/avr/include/util/delay.h **** 
 6344               		.loc 8 174 2 view .LVU1472
 184:/usr/avr/include/util/delay.h **** 	#endif
 6345               		.loc 8 184 3 view .LVU1473
 187:/usr/avr/include/util/delay.h **** 
 6346               		.loc 8 187 2 view .LVU1474
 6347 0060 8FE1      		ldi r24,lo8(19999)
 6348 0062 9EE4      		ldi r25,hi8(19999)
 6349 0064 0197      	1:	sbiw r24,1
 6350 0066 01F4      		brne 1b
 6351 0068 00C0      		rjmp .
 6352 006a 0000      		nop
 6353               	.LVL471:
 187:/usr/avr/include/util/delay.h **** 
 6354               		.loc 8 187 2 is_stmt 0 view .LVU1475
 6355               	.LBE321:
 6356               	.LBE320:
 116:lcd.c         **** 		LCD_FUNCTION_2LINE | LCD_FUNCTION_5X7);
 6357               		.loc 7 116 2 is_stmt 1 view .LVU1476
 6358 006c 88E2      		ldi r24,lo8(40)
 6359 006e 0E94 0000 		call lcd_command
 6360               	.LVL472:
 118:lcd.c         **** 		LCD_CURSOR_OFF | LCD_BLINKING_OFF);
 6361               		.loc 7 118 2 view .LVU1477
 6362 0072 8CE0      		ldi r24,lo8(12)
 6363 0074 0E94 0000 		call lcd_command
 6364               	.LVL473:
 120:lcd.c         **** 		LCD_ENTRY_NOSHIFT);
 6365               		.loc 7 120 2 view .LVU1478
 6366 0078 86E0      		ldi r24,lo8(6)
 6367 007a 0E94 0000 		call lcd_command
 6368               	.LVL474:
 122:lcd.c         **** }
 6369               		.loc 7 122 2 view .LVU1479
 6370 007e 0E94 0000 		call lcd_clear
 6371               	.LVL475:
 6372               	.LBE311:
 6373               	.LBE310:
  33:main.c        **** 	gchar_init();
 6374               		.loc 10 33 2 view .LVU1480
 6375               	.LBB322:
 6376               	.LBI322:
 6377               		.file 11 "chars.c"
   1:chars.c       **** /* LCD Custom Characters */
   2:chars.c       **** #define LCD_CHAR_PLAY       0
   3:chars.c       **** #define LCD_CHAR_PAUSE      1
   4:chars.c       **** #define LCD_CHAR_PLUS_MINUS 2
   5:chars.c       **** 
   6:chars.c       **** const uint8_t chr_play[] =
   7:chars.c       **** {
   8:chars.c       **** 	0x08,
   9:chars.c       **** 	0x0C,
  10:chars.c       **** 	0x0E,
  11:chars.c       **** 	0x0F,
  12:chars.c       **** 	0x0E,
  13:chars.c       **** 	0x0C,
  14:chars.c       **** 	0x08,
  15:chars.c       **** 	0x00
  16:chars.c       **** };
  17:chars.c       **** 
  18:chars.c       **** const uint8_t chr_pause[] =
  19:chars.c       **** {
  20:chars.c       **** 	0x00,
  21:chars.c       **** 	0x1B,
  22:chars.c       **** 	0x1B,
  23:chars.c       **** 	0x1B,
  24:chars.c       **** 	0x1B,
  25:chars.c       **** 	0x1B,
  26:chars.c       **** 	0x00,
  27:chars.c       **** 	0x00
  28:chars.c       **** };
  29:chars.c       **** 
  30:chars.c       **** const uint8_t chr_plus_minus[] =
  31:chars.c       **** {
  32:chars.c       **** 	0x04,
  33:chars.c       **** 	0x04,
  34:chars.c       **** 	0x1F,
  35:chars.c       **** 	0x04,
  36:chars.c       **** 	0x04,
  37:chars.c       **** 	0x00,
  38:chars.c       **** 	0x1F,
  39:chars.c       **** 	0x00
  40:chars.c       **** };
  41:chars.c       **** 
  42:chars.c       **** static void gchar_init(void)
 6378               		.loc 11 42 13 view .LVU1481
 6379               	.LBB323:
  43:chars.c       **** {
  44:chars.c       **** 	lcd_gchar(LCD_CHAR_PLAY, chr_play);
 6380               		.loc 11 44 2 view .LVU1482
 6381 0082 60E0      		ldi r22,lo8(chr_play)
 6382 0084 70E0      		ldi r23,hi8(chr_play)
 6383 0086 80E0      		ldi r24,0
 6384 0088 0E94 0000 		call lcd_gchar
 6385               	.LVL476:
  45:chars.c       **** 	lcd_gchar(LCD_CHAR_PAUSE, chr_pause);
 6386               		.loc 11 45 2 view .LVU1483
 6387 008c 60E0      		ldi r22,lo8(chr_pause)
 6388 008e 70E0      		ldi r23,hi8(chr_pause)
 6389 0090 81E0      		ldi r24,lo8(1)
 6390 0092 0E94 0000 		call lcd_gchar
 6391               	.LVL477:
  46:chars.c       **** 	lcd_gchar(LCD_CHAR_PLUS_MINUS, chr_plus_minus);
 6392               		.loc 11 46 2 view .LVU1484
 6393 0096 60E0      		ldi r22,lo8(chr_plus_minus)
 6394 0098 70E0      		ldi r23,hi8(chr_plus_minus)
 6395 009a 82E0      		ldi r24,lo8(2)
 6396 009c 0E94 0000 		call lcd_gchar
 6397               	.LVL478:
 6398               	.LBE323:
 6399               	.LBE322:
  34:main.c        **** 	button_init();
 6400               		.loc 10 34 2 view .LVU1485
 6401               	.LBB324:
 6402               	.LBI324:
   8:button.c      **** {
 6403               		.loc 1 8 13 view .LVU1486
 6404               	.LBB325:
  10:button.c      **** 	PORTC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3) | (1 << PC4);
 6405               		.loc 1 10 2 view .LVU1487
  10:button.c      **** 	PORTC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3) | (1 << PC4);
 6406               		.loc 1 10 8 is_stmt 0 view .LVU1488
 6407 00a0 85B1      		in r24,0x5
 6408 00a2 8360      		ori r24,lo8(3)
 6409 00a4 85B9      		out 0x5,r24
  11:button.c      **** }
 6410               		.loc 1 11 2 is_stmt 1 view .LVU1489
  11:button.c      **** }
 6411               		.loc 1 11 8 is_stmt 0 view .LVU1490
 6412 00a6 88B1      		in r24,0x8
 6413 00a8 8F61      		ori r24,lo8(31)
 6414 00aa 88B9      		out 0x8,r24
 6415               	.LBE325:
 6416               	.LBE324:
  35:main.c        **** 	player_audio_init();
 6417               		.loc 10 35 2 is_stmt 1 view .LVU1491
 6418               	.LBB326:
 6419               	.LBI326:
  86:player.c      **** {
 6420               		.loc 5 86 13 view .LVU1492
 6421               	.LBB327:
  88:player.c      **** }
 6422               		.loc 5 88 2 view .LVU1493
  88:player.c      **** }
 6423               		.loc 5 88 7 is_stmt 0 view .LVU1494
 6424 00ac 8AB1      		in r24,0xa
 6425 00ae 8066      		ori r24,lo8(96)
 6426 00b0 8AB9      		out 0xa,r24
 6427               	.LBE327:
 6428               	.LBE326:
  36:main.c        **** 
  37:main.c        **** 	if(sd_init())
 6429               		.loc 10 37 2 is_stmt 1 view .LVU1495
 6430               	.LBB328:
 6431               	.LBI328:
 106:sd.c          **** {
 6432               		.loc 3 106 16 view .LVU1496
 6433               	.LBB329:
 108:sd.c          **** 	uint16_t i;
 6434               		.loc 3 108 2 view .LVU1497
 109:sd.c          **** 	uint32_t arg;
 6435               		.loc 3 109 2 view .LVU1498
 110:sd.c          **** 
 6436               		.loc 3 110 2 view .LVU1499
 112:sd.c          **** 	DESELECT();
 6437               		.loc 3 112 2 view .LVU1500
 6438 00b2 84B1      		in r24,0x4
 6439 00b4 8C62      		ori r24,lo8(44)
 6440 00b6 84B9      		out 0x4,r24
 112:sd.c          **** 	DESELECT();
 6441               		.loc 3 112 2 view .LVU1501
 6442 00b8 2498      		cbi 0x4,4
 112:sd.c          **** 	DESELECT();
 6443               		.loc 3 112 12 view .LVU1502
 113:sd.c          **** 	SPCR = (0 << SPIE) | (1 << SPE)  | (0 << DORD) | (1 << MSTR) |
 6444               		.loc 3 113 2 view .LVU1503
 6445 00ba 2A9A      		sbi 0x5,2
 114:sd.c          **** 		(0 << CPOL) | (0 << CPHA) | (1 << SPR1) | (1 << SPR0);
 6446               		.loc 3 114 2 view .LVU1504
 114:sd.c          **** 		(0 << CPOL) | (0 << CPHA) | (1 << SPR1) | (1 << SPR0);
 6447               		.loc 3 114 7 is_stmt 0 view .LVU1505
 6448 00bc 83E5      		ldi r24,lo8(83)
 6449 00be 8CBD      		out 0x2c,r24
 116:sd.c          **** 	_card_type = 0;
 6450               		.loc 3 116 2 is_stmt 1 view .LVU1506
 116:sd.c          **** 	_card_type = 0;
 6451               		.loc 3 116 7 is_stmt 0 view .LVU1507
 6452 00c0 8DB5      		in r24,0x2d
 6453 00c2 8E7F      		andi r24,lo8(-2)
 6454 00c4 8DBD      		out 0x2d,r24
 117:sd.c          **** 	for(i = 0; i < 10; ++i)
 6455               		.loc 3 117 2 is_stmt 1 view .LVU1508
 117:sd.c          **** 	for(i = 0; i < 10; ++i)
 6456               		.loc 3 117 13 is_stmt 0 view .LVU1509
 6457 00c6 1092 0000 		sts _card_type,__zero_reg__
 118:sd.c          **** 	{
 6458               		.loc 3 118 2 is_stmt 1 view .LVU1510
 6459               	.LVL479:
 118:sd.c          **** 	{
 6460               		.loc 3 118 13 view .LVU1511
 117:sd.c          **** 	for(i = 0; i < 10; ++i)
 6461               		.loc 3 117 13 is_stmt 0 view .LVU1512
 6462 00ca 0AE0      		ldi r16,lo8(10)
 6463 00cc 10E0      		ldi r17,0
 6464               	.LVL480:
 6465               	.L331:
 120:sd.c          **** 	}
 6466               		.loc 3 120 3 is_stmt 1 view .LVU1513
 6467 00ce 8FEF      		ldi r24,lo8(-1)
 6468 00d0 0E94 0000 		call _spi_xchg
 6469               	.LVL481:
 118:sd.c          **** 	{
 6470               		.loc 3 118 21 view .LVU1514
 118:sd.c          **** 	{
 6471               		.loc 3 118 13 view .LVU1515
 118:sd.c          **** 	{
 6472               		.loc 3 118 2 is_stmt 0 view .LVU1516
 6473 00d4 0150      		subi r16,1
 6474 00d6 1109      		sbc r17,__zero_reg__
 6475               	.LVL482:
 118:sd.c          **** 	{
 6476               		.loc 3 118 2 view .LVU1517
 6477 00d8 01F4      		brne .L331
 123:sd.c          **** 	for(i = 0; ; ++i)
 6478               		.loc 3 123 2 is_stmt 1 view .LVU1518
 6479 00da 2A98      		cbi 0x5,2
 124:sd.c          **** 	{
 6480               		.loc 3 124 2 view .LVU1519
 6481               	.LVL483:
 123:sd.c          **** 	for(i = 0; ; ++i)
 6482               		.loc 3 123 2 is_stmt 0 view .LVU1520
 6483 00dc 00E0      		ldi r16,0
 6484 00de 12E0      		ldi r17,lo8(2)
 6485               	.LVL484:
 6486               	.L333:
 126:sd.c          **** 		{
 6487               		.loc 3 126 3 is_stmt 1 view .LVU1521
 126:sd.c          **** 		{
 6488               		.loc 3 126 6 is_stmt 0 view .LVU1522
 6489 00e0 40E0      		ldi r20,0
 6490 00e2 50E0      		ldi r21,0
 6491 00e4 BA01      		movw r22,r20
 6492 00e6 80E0      		ldi r24,0
 6493 00e8 0E94 0000 		call _command
 6494               	.LVL485:
 126:sd.c          **** 		{
 6495               		.loc 3 126 5 view .LVU1523
 6496 00ec 8130      		cpi r24,lo8(1)
 6497 00ee 01F0      		breq .L332
 131:sd.c          **** 		{
 6498               		.loc 3 131 3 is_stmt 1 view .LVU1524
 131:sd.c          **** 		{
 6499               		.loc 3 131 5 is_stmt 0 view .LVU1525
 6500 00f0 0150      		subi r16,1
 6501 00f2 1109      		sbc r17,__zero_reg__
 6502               	.LVL486:
 131:sd.c          **** 		{
 6503               		.loc 3 131 5 view .LVU1526
 6504 00f4 01F4      		brne .L333
 6505               	.LVL487:
 6506               	.L372:
 193:sd.c          **** 			return 1;
 6507               		.loc 3 193 4 is_stmt 1 view .LVU1527
 6508 00f6 2A9A      		sbi 0x5,2
 194:sd.c          **** 		}
 6509               		.loc 3 194 4 view .LVU1528
 6510               	.L334:
 6511               	.LBE329:
 6512               	.LBE328:
  38:main.c        **** 	{
  39:main.c        **** 		mode_error(error_sd);
 6513               		.loc 10 39 3 view .LVU1529
 6514 00f8 80E0      		ldi r24,lo8(error_sd)
 6515 00fa 90E0      		ldi r25,hi8(error_sd)
 6516               	.L373:
  40:main.c        **** 	}
  41:main.c        **** 
  42:main.c        **** 	if(fat_mount())
  43:main.c        **** 	{
  44:main.c        **** 		mode_error(error_fat);
 6517               		.loc 10 44 3 is_stmt 0 view .LVU1530
 6518 00fc 0E94 0000 		call mode_error
 6519               	.LVL488:
 6520               	.L332:
 6521               	.LBB333:
 6522               	.LBB332:
 138:sd.c          **** 	{
 6523               		.loc 3 138 2 is_stmt 1 view .LVU1531
 138:sd.c          **** 	{
 6524               		.loc 3 138 6 is_stmt 0 view .LVU1532
 6525 0100 4AEA      		ldi r20,lo8(-86)
 6526 0102 51E0      		ldi r21,lo8(1)
 6527 0104 60E0      		ldi r22,0
 6528 0106 70E0      		ldi r23,0
 6529 0108 88E0      		ldi r24,lo8(8)
 6530 010a 0E94 0000 		call _command
 6531               	.LVL489:
 138:sd.c          **** 	{
 6532               		.loc 3 138 4 view .LVU1533
 6533 010e 82FD      		sbrc r24,2
 6534 0110 00C0      		rjmp .L335
 140:sd.c          **** 		_spi_xchg(0xFF);
 6535               		.loc 3 140 3 is_stmt 1 view .LVU1534
 6536 0112 8FEF      		ldi r24,lo8(-1)
 6537 0114 0E94 0000 		call _spi_xchg
 6538               	.LVL490:
 141:sd.c          **** 		if(((_spi_xchg(0xFF) & 0x01) == 0) ||
 6539               		.loc 3 141 3 view .LVU1535
 6540 0118 8FEF      		ldi r24,lo8(-1)
 6541 011a 0E94 0000 		call _spi_xchg
 6542               	.LVL491:
 142:sd.c          **** 			(_spi_xchg(0xFF) != 0xAA))
 6543               		.loc 3 142 3 view .LVU1536
 142:sd.c          **** 			(_spi_xchg(0xFF) != 0xAA))
 6544               		.loc 3 142 8 is_stmt 0 view .LVU1537
 6545 011e 8FEF      		ldi r24,lo8(-1)
 6546 0120 0E94 0000 		call _spi_xchg
 6547               	.LVL492:
 142:sd.c          **** 			(_spi_xchg(0xFF) != 0xAA))
 6548               		.loc 3 142 5 view .LVU1538
 6549 0124 80FF      		sbrs r24,0
 6550 0126 00C0      		rjmp .L334
 143:sd.c          **** 		{
 6551               		.loc 3 143 5 view .LVU1539
 6552 0128 8FEF      		ldi r24,lo8(-1)
 6553 012a 0E94 0000 		call _spi_xchg
 6554               	.LVL493:
 142:sd.c          **** 			(_spi_xchg(0xFF) != 0xAA))
 6555               		.loc 3 142 38 view .LVU1540
 6556 012e 8A3A      		cpi r24,lo8(-86)
 6557 0130 01F4      		brne .L334
 148:sd.c          **** 	}
 6558               		.loc 3 148 3 is_stmt 1 view .LVU1541
 148:sd.c          **** 	}
 6559               		.loc 3 148 14 is_stmt 0 view .LVU1542
 6560 0132 8091 0000 		lds r24,_card_type
 6561 0136 8260      		ori r24,lo8(2)
 6562               	.L370:
 6563 0138 8093 0000 		sts _card_type,r24
 6564               	.L338:
 123:sd.c          **** 	for(i = 0; ; ++i)
 6565               		.loc 3 123 2 view .LVU1543
 6566 013c E12C      		mov r14,__zero_reg__
 6567 013e 90E8      		ldi r25,lo8(-128)
 6568 0140 F92E      		mov r15,r25
 6569               	.LVL494:
 6570               	.L337:
 161:sd.c          **** 		{
 6571               		.loc 3 161 3 is_stmt 1 view .LVU1544
 161:sd.c          **** 		{
 6572               		.loc 3 161 17 is_stmt 0 view .LVU1545
 6573 0142 1091 0000 		lds r17,_card_type
 161:sd.c          **** 		{
 6574               		.loc 3 161 5 view .LVU1546
 6575 0146 812F      		mov r24,r17
 6576 0148 8370      		andi r24,lo8(3)
 6577 014a 01F0      		breq .L339
 163:sd.c          **** 			if(_card_type & SD_2)
 6578               		.loc 3 163 4 is_stmt 1 view .LVU1547
 6579               	.LVL495:
 164:sd.c          **** 			{
 6580               		.loc 3 164 4 view .LVU1548
 166:sd.c          **** 			}
 6581               		.loc 3 166 9 is_stmt 0 view .LVU1549
 6582 014c B12C      		mov r11,__zero_reg__
 6583 014e C12C      		mov r12,__zero_reg__
 6584 0150 D12C      		mov r13,__zero_reg__
 6585 0152 00E4      		ldi r16,lo8(64)
 164:sd.c          **** 			{
 6586               		.loc 3 164 6 view .LVU1550
 6587 0154 11FF      		sbrs r17,1
 163:sd.c          **** 			if(_card_type & SD_2)
 6588               		.loc 3 163 8 view .LVU1551
 6589 0156 00E0      		ldi r16,0
 6590               	.L340:
 6591               	.LVL496:
 169:sd.c          **** 			response = _command(CMD_SD_SEND_OP_COND, arg);
 6592               		.loc 3 169 4 is_stmt 1 view .LVU1552
 6593 0158 40E0      		ldi r20,0
 6594 015a 50E0      		ldi r21,0
 6595 015c BA01      		movw r22,r20
 6596 015e 87E3      		ldi r24,lo8(55)
 6597 0160 0E94 0000 		call _command
 6598               	.LVL497:
 170:sd.c          **** 		}
 6599               		.loc 3 170 4 view .LVU1553
 170:sd.c          **** 		}
 6600               		.loc 3 170 15 is_stmt 0 view .LVU1554
 6601 0164 4B2D      		mov r20,r11
 6602 0166 5C2D      		mov r21,r12
 6603 0168 6D2D      		mov r22,r13
 6604 016a 702F      		mov r23,r16
 6605 016c 89E2      		ldi r24,lo8(41)
 6606               	.LVL498:
 6607               	.L371:
 174:sd.c          **** 		}
 6608               		.loc 3 174 15 view .LVU1555
 6609 016e 0E94 0000 		call _command
 6610               	.LVL499:
 177:sd.c          **** 		{
 6611               		.loc 3 177 3 is_stmt 1 view .LVU1556
 177:sd.c          **** 		{
 6612               		.loc 3 177 5 is_stmt 0 view .LVU1557
 6613 0172 80FF      		sbrs r24,0
 6614 0174 00C0      		rjmp .L342
 182:sd.c          **** 		{
 6615               		.loc 3 182 3 is_stmt 1 view .LVU1558
 182:sd.c          **** 		{
 6616               		.loc 3 182 5 is_stmt 0 view .LVU1559
 6617 0176 91E0      		ldi r25,1
 6618 0178 E91A      		sub r14,r25
 6619 017a F108      		sbc r15,__zero_reg__
 6620               	.LVL500:
 182:sd.c          **** 		{
 6621               		.loc 3 182 5 view .LVU1560
 6622 017c 01F4      		brne .L337
 6623 017e 00C0      		rjmp .L372
 6624               	.LVL501:
 6625               	.L335:
 152:sd.c          **** 		if((_command(CMD_SD_SEND_OP_COND, 0) & ILLEGAL_CMD) == 0)
 6626               		.loc 3 152 3 is_stmt 1 view .LVU1561
 6627 0180 40E0      		ldi r20,0
 6628 0182 50E0      		ldi r21,0
 6629 0184 BA01      		movw r22,r20
 6630 0186 87E3      		ldi r24,lo8(55)
 6631 0188 0E94 0000 		call _command
 6632               	.LVL502:
 153:sd.c          **** 		{
 6633               		.loc 3 153 3 view .LVU1562
 153:sd.c          **** 		{
 6634               		.loc 3 153 7 is_stmt 0 view .LVU1563
 6635 018c 40E0      		ldi r20,0
 6636 018e 50E0      		ldi r21,0
 6637 0190 BA01      		movw r22,r20
 6638 0192 89E2      		ldi r24,lo8(41)
 6639 0194 0E94 0000 		call _command
 6640               	.LVL503:
 153:sd.c          **** 		{
 6641               		.loc 3 153 5 view .LVU1564
 6642 0198 82FD      		sbrc r24,2
 6643 019a 00C0      		rjmp .L338
 155:sd.c          **** 		}
 6644               		.loc 3 155 4 is_stmt 1 view .LVU1565
 155:sd.c          **** 		}
 6645               		.loc 3 155 15 is_stmt 0 view .LVU1566
 6646 019c 8091 0000 		lds r24,_card_type
 6647 01a0 8160      		ori r24,lo8(1)
 6648 01a2 00C0      		rjmp .L370
 6649               	.LVL504:
 6650               	.L339:
 174:sd.c          **** 		}
 6651               		.loc 3 174 4 is_stmt 1 view .LVU1567
 174:sd.c          **** 		}
 6652               		.loc 3 174 15 is_stmt 0 view .LVU1568
 6653 01a4 40E0      		ldi r20,0
 6654 01a6 50E0      		ldi r21,0
 6655 01a8 BA01      		movw r22,r20
 6656 01aa 81E0      		ldi r24,lo8(1)
 6657 01ac 00C0      		rjmp .L371
 6658               	.LVL505:
 6659               	.L342:
 189:sd.c          **** 	{
 6660               		.loc 3 189 2 is_stmt 1 view .LVU1569
 189:sd.c          **** 	{
 6661               		.loc 3 189 4 is_stmt 0 view .LVU1570
 6662 01ae 11FF      		sbrs r17,1
 6663 01b0 00C0      		rjmp .L343
 191:sd.c          **** 		{
 6664               		.loc 3 191 3 is_stmt 1 view .LVU1571
 191:sd.c          **** 		{
 6665               		.loc 3 191 6 is_stmt 0 view .LVU1572
 6666 01b2 40E0      		ldi r20,0
 6667 01b4 50E0      		ldi r21,0
 6668 01b6 BA01      		movw r22,r20
 6669 01b8 8AE3      		ldi r24,lo8(58)
 6670               	.LVL506:
 191:sd.c          **** 		{
 6671               		.loc 3 191 6 view .LVU1573
 6672 01ba 0E94 0000 		call _command
 6673               	.LVL507:
 191:sd.c          **** 		{
 6674               		.loc 3 191 5 view .LVU1574
 6675 01be 8111      		cpse r24,__zero_reg__
 6676 01c0 00C0      		rjmp .L372
 197:sd.c          **** 		{
 6677               		.loc 3 197 3 is_stmt 1 view .LVU1575
 197:sd.c          **** 		{
 6678               		.loc 3 197 6 is_stmt 0 view .LVU1576
 6679 01c2 8FEF      		ldi r24,lo8(-1)
 6680 01c4 0E94 0000 		call _spi_xchg
 6681               	.LVL508:
 197:sd.c          **** 		{
 6682               		.loc 3 197 5 view .LVU1577
 6683 01c8 86FF      		sbrs r24,6
 6684 01ca 00C0      		rjmp .L345
 199:sd.c          **** 		}
 6685               		.loc 3 199 4 is_stmt 1 view .LVU1578
 199:sd.c          **** 		}
 6686               		.loc 3 199 15 is_stmt 0 view .LVU1579
 6687 01cc 1460      		ori r17,lo8(4)
 6688 01ce 1093 0000 		sts _card_type,r17
 6689               	.L345:
 202:sd.c          **** 		_spi_xchg(0xFF);
 6690               		.loc 3 202 3 is_stmt 1 view .LVU1580
 6691 01d2 8FEF      		ldi r24,lo8(-1)
 6692 01d4 0E94 0000 		call _spi_xchg
 6693               	.LVL509:
 203:sd.c          **** 		_spi_xchg(0xFF);
 6694               		.loc 3 203 3 view .LVU1581
 6695 01d8 8FEF      		ldi r24,lo8(-1)
 6696 01da 0E94 0000 		call _spi_xchg
 6697               	.LVL510:
 204:sd.c          **** 	}
 6698               		.loc 3 204 3 view .LVU1582
 6699 01de 8FEF      		ldi r24,lo8(-1)
 6700 01e0 0E94 0000 		call _spi_xchg
 6701               	.LVL511:
 6702               	.L343:
 207:sd.c          **** 	{
 6703               		.loc 3 207 2 view .LVU1583
 207:sd.c          **** 	{
 6704               		.loc 3 207 5 is_stmt 0 view .LVU1584
 6705 01e4 40E0      		ldi r20,0
 6706 01e6 52E0      		ldi r21,lo8(2)
 6707 01e8 60E0      		ldi r22,0
 6708 01ea 70E0      		ldi r23,0
 6709 01ec 80E1      		ldi r24,lo8(16)
 6710 01ee 0E94 0000 		call _command
 6711               	.LVL512:
 209:sd.c          **** 		return 1;
 6712               		.loc 3 209 3 view .LVU1585
 6713 01f2 2A9A      		sbi 0x5,2
 207:sd.c          **** 	{
 6714               		.loc 3 207 4 view .LVU1586
 6715 01f4 8111      		cpse r24,__zero_reg__
 6716 01f6 00C0      		rjmp .L334
 213:sd.c          **** 	SPCR &= ~((1 << SPR1) | (1 << SPR0));
 6717               		.loc 3 213 2 is_stmt 1 view .LVU1587
 214:sd.c          **** 	SPSR |= (1 << SPI2X);
 6718               		.loc 3 214 2 view .LVU1588
 214:sd.c          **** 	SPSR |= (1 << SPI2X);
 6719               		.loc 3 214 7 is_stmt 0 view .LVU1589
 6720 01f8 8CB5      		in r24,0x2c
 6721 01fa 8C7F      		andi r24,lo8(-4)
 6722 01fc 8CBD      		out 0x2c,r24
 215:sd.c          **** 	_delay_ms(20);
 6723               		.loc 3 215 2 is_stmt 1 view .LVU1590
 215:sd.c          **** 	_delay_ms(20);
 6724               		.loc 3 215 7 is_stmt 0 view .LVU1591
 6725 01fe 8DB5      		in r24,0x2d
 6726 0200 8160      		ori r24,lo8(1)
 6727 0202 8DBD      		out 0x2d,r24
 216:sd.c          **** 	return 0;
 6728               		.loc 3 216 2 is_stmt 1 view .LVU1592
 6729               	.LVL513:
 6730               	.LBB330:
 6731               	.LBI330:
 166:/usr/avr/include/util/delay.h **** {
 6732               		.loc 8 166 1 view .LVU1593
 6733               	.LBB331:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 6734               		.loc 8 168 2 view .LVU1594
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 6735               		.loc 8 172 2 view .LVU1595
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 6736               		.loc 8 173 2 view .LVU1596
 174:/usr/avr/include/util/delay.h **** 
 6737               		.loc 8 174 2 view .LVU1597
 184:/usr/avr/include/util/delay.h **** 	#endif
 6738               		.loc 8 184 3 view .LVU1598
 187:/usr/avr/include/util/delay.h **** 
 6739               		.loc 8 187 2 view .LVU1599
 6740 0204 AFEF      		ldi r26,lo8(63999)
 6741 0206 B9EF      		ldi r27,hi8(63999)
 6742 0208 20E0      		ldi r18,hlo8(63999)
 6743 020a A150      	1:	subi r26,1
 6744 020c B040      		sbci r27,0
 6745 020e 2040      		sbci r18,0
 6746 0210 01F4      		brne 1b
 6747 0212 00C0      		rjmp .
 6748 0214 0000      		nop
 6749               	.LVL514:
 187:/usr/avr/include/util/delay.h **** 
 6750               		.loc 8 187 2 is_stmt 0 view .LVU1600
 6751               	.LBE331:
 6752               	.LBE330:
 217:sd.c          **** }
 6753               		.loc 3 217 2 is_stmt 1 view .LVU1601
 217:sd.c          **** }
 6754               		.loc 3 217 2 is_stmt 0 view .LVU1602
 6755               	.LBE332:
 6756               	.LBE333:
  42:main.c        **** 	{
 6757               		.loc 10 42 2 is_stmt 1 view .LVU1603
 6758               	.LBB334:
 6759               	.LBI334:
 303:fat.c         **** {
 6760               		.loc 4 303 16 view .LVU1604
 6761               	.LBB335:
 305:fat.c         **** 	uint32_t bsect, fsize, tsect, mclst;
 6762               		.loc 4 305 2 view .LVU1605
 306:fat.c         **** 	bsect = 0;
 6763               		.loc 4 306 2 view .LVU1606
 307:fat.c         **** 	if((fmt = check_fs(buf, bsect)))
 6764               		.loc 4 307 2 view .LVU1607
 308:fat.c         **** 	{
 6765               		.loc 4 308 2 view .LVU1608
 308:fat.c         **** 	{
 6766               		.loc 4 308 12 is_stmt 0 view .LVU1609
 6767 0216 40E0      		ldi r20,0
 6768 0218 50E0      		ldi r21,0
 6769 021a BA01      		movw r22,r20
 6770 021c CE01      		movw r24,r28
 6771 021e 0196      		adiw r24,1
 6772 0220 5C01      		movw r10,r24
 6773 0222 0E94 0000 		call check_fs
 6774               	.LVL515:
 308:fat.c         **** 	{
 6775               		.loc 4 308 12 view .LVU1610
 6776 0226 4501      		movw r8,r10
 307:fat.c         **** 	if((fmt = check_fs(buf, bsect)))
 6777               		.loc 4 307 8 view .LVU1611
 6778 0228 C12C      		mov r12,__zero_reg__
 6779 022a D12C      		mov r13,__zero_reg__
 6780 022c 7601      		movw r14,r12
 308:fat.c         **** 	{
 6781               		.loc 4 308 4 view .LVU1612
 6782 022e 8823      		tst r24
 6783 0230 01F0      		breq .L348
 310:fat.c         **** 		{
 6784               		.loc 4 310 3 is_stmt 1 view .LVU1613
 310:fat.c         **** 		{
 6785               		.loc 4 310 7 is_stmt 0 view .LVU1614
 6786 0232 00E1      		ldi r16,lo8(16)
 6787 0234 10E0      		ldi r17,0
 6788 0236 2EEB      		ldi r18,lo8(-66)
 6789 0238 31E0      		ldi r19,lo8(1)
 6790 023a 40E0      		ldi r20,0
 6791 023c 50E0      		ldi r21,0
 6792 023e BA01      		movw r22,r20
 6793 0240 C501      		movw r24,r10
 6794               	.LVL516:
 310:fat.c         **** 		{
 6795               		.loc 4 310 7 view .LVU1615
 6796 0242 0E94 0000 		call sd_read
 6797               	.LVL517:
 310:fat.c         **** 		{
 6798               		.loc 4 310 5 view .LVU1616
 6799 0246 8111      		cpse r24,__zero_reg__
 6800 0248 00C0      		rjmp .L350
 312:fat.c         **** 			{
 6801               		.loc 4 312 4 is_stmt 1 view .LVU1617
 312:fat.c         **** 			{
 6802               		.loc 4 312 6 is_stmt 0 view .LVU1618
 6803 024a 8D81      		ldd r24,Y+5
 6804 024c 8823      		tst r24
 6805 024e 01F4      		brne .+2
 6806 0250 00C0      		rjmp .L350
 314:fat.c         **** 				fmt = check_fs(buf, bsect);
 6807               		.loc 4 314 5 is_stmt 1 view .LVU1619
 314:fat.c         **** 				fmt = check_fs(buf, bsect);
 6808               		.loc 4 314 13 is_stmt 0 view .LVU1620
 6809 0252 CE01      		movw r24,r28
 6810 0254 0996      		adiw r24,9
 6811 0256 0E94 0000 		call ld_u32
 6812               	.LVL518:
 6813 025a 6B01      		movw r12,r22
 6814 025c 7C01      		movw r14,r24
 6815               	.LVL519:
 315:fat.c         **** 			}
 6816               		.loc 4 315 5 is_stmt 1 view .LVU1621
 315:fat.c         **** 			}
 6817               		.loc 4 315 11 is_stmt 0 view .LVU1622
 6818 025e BC01      		movw r22,r24
 6819 0260 A601      		movw r20,r12
 6820 0262 C501      		movw r24,r10
 6821 0264 0E94 0000 		call check_fs
 6822               	.LVL520:
 320:fat.c         **** 	{
 6823               		.loc 4 320 2 is_stmt 1 view .LVU1623
 320:fat.c         **** 	{
 6824               		.loc 4 320 4 is_stmt 0 view .LVU1624
 6825 0268 8111      		cpse r24,__zero_reg__
 6826 026a 00C0      		rjmp .L350
 6827               	.LVL521:
 6828               	.L348:
 325:fat.c         **** 	{
 6829               		.loc 4 325 2 is_stmt 1 view .LVU1625
 325:fat.c         **** 	{
 6830               		.loc 4 325 5 is_stmt 0 view .LVU1626
 6831 026c 04E2      		ldi r16,lo8(36)
 6832 026e 10E0      		ldi r17,0
 6833 0270 2DE0      		ldi r18,lo8(13)
 6834 0272 30E0      		ldi r19,0
 6835 0274 B701      		movw r22,r14
 6836 0276 A601      		movw r20,r12
 6837 0278 C401      		movw r24,r8
 6838 027a 0E94 0000 		call sd_read
 6839               	.LVL522:
 325:fat.c         **** 	{
 6840               		.loc 4 325 4 view .LVU1627
 6841 027e 8111      		cpse r24,__zero_reg__
 6842 0280 00C0      		rjmp .L350
 330:fat.c         **** 	{
 6843               		.loc 4 330 2 is_stmt 1 view .LVU1628
 6844               	.LVL523:
 6845               	.LBB336:
 6846               	.LBI336:
   7:util.c        **** {
 6847               		.loc 2 7 17 view .LVU1629
 6848               	.LBB337:
   9:util.c        **** }
 6849               		.loc 2 9 2 view .LVU1630
   9:util.c        **** }
 6850               		.loc 2 9 2 is_stmt 0 view .LVU1631
 6851               	.LBE337:
 6852               	.LBE336:
 330:fat.c         **** 	{
 6853               		.loc 4 330 13 view .LVU1632
 6854 0282 8A85      		ldd r24,Y+10
 6855 0284 9B85      		ldd r25,Y+11
 6856 0286 9C01      		movw r18,r24
 6857 0288 50E0      		ldi r21,0
 6858 028a 40E0      		ldi r20,0
 6859               	.LVL524:
 330:fat.c         **** 	{
 6860               		.loc 4 330 4 view .LVU1633
 6861 028c 892B      		or r24,r25
 6862 028e 01F4      		brne .L351
 332:fat.c         **** 	}
 6863               		.loc 4 332 3 is_stmt 1 view .LVU1634
 332:fat.c         **** 	}
 6864               		.loc 4 332 11 is_stmt 0 view .LVU1635
 6865 0290 CE01      		movw r24,r28
 6866 0292 4896      		adiw r24,24
 6867 0294 0E94 0000 		call ld_u32
 6868               	.LVL525:
 332:fat.c         **** 	}
 6869               		.loc 4 332 11 view .LVU1636
 6870 0298 9B01      		movw r18,r22
 6871 029a AC01      		movw r20,r24
 6872               	.LVL526:
 6873               	.L351:
 335:fat.c         **** 	_fs.fatbase = bsect + ld_u16(buf + BPB_RESERVED_SECTOR_COUNT - 13);
 6874               		.loc 4 335 2 is_stmt 1 view .LVU1637
 335:fat.c         **** 	_fs.fatbase = bsect + ld_u16(buf + BPB_RESERVED_SECTOR_COUNT - 13);
 6875               		.loc 4 335 14 is_stmt 0 view .LVU1638
 6876 029c AC81      		ldd r26,Y+4
 335:fat.c         **** 	_fs.fatbase = bsect + ld_u16(buf + BPB_RESERVED_SECTOR_COUNT - 13);
 6877               		.loc 4 335 8 view .LVU1639
 6878 029e B0E0      		ldi r27,0
 6879 02a0 0E94 0000 		call __muluhisi3
 6880 02a4 69A7      		std Y+41,r22
 6881 02a6 7AA7      		std Y+42,r23
 6882 02a8 8BA7      		std Y+43,r24
 6883 02aa 9CA7      		std Y+44,r25
 6884               	.LVL527:
 336:fat.c         **** 	_fs.csize = buf[BPB_SECTORS_PER_CLUSTER - 13];
 6885               		.loc 4 336 2 is_stmt 1 view .LVU1640
 6886               	.LBB338:
 6887               	.LBI338:
   7:util.c        **** {
 6888               		.loc 2 7 17 view .LVU1641
 6889               	.LBB339:
   9:util.c        **** }
 6890               		.loc 2 9 2 view .LVU1642
   9:util.c        **** }
 6891               		.loc 2 9 2 is_stmt 0 view .LVU1643
 6892               	.LBE339:
 6893               	.LBE338:
 336:fat.c         **** 	_fs.csize = buf[BPB_SECTORS_PER_CLUSTER - 13];
 6894               		.loc 4 336 24 view .LVU1644
 6895 02ac 8A80      		ldd r8,Y+2
 6896 02ae 9B80      		ldd r9,Y+3
 6897 02b0 B12C      		mov r11,__zero_reg__
 6898 02b2 A12C      		mov r10,__zero_reg__
 336:fat.c         **** 	_fs.csize = buf[BPB_SECTORS_PER_CLUSTER - 13];
 6899               		.loc 4 336 22 view .LVU1645
 6900 02b4 C80C      		add r12,r8
 6901 02b6 D91C      		adc r13,r9
 6902 02b8 EA1C      		adc r14,r10
 6903 02ba FB1C      		adc r15,r11
 6904               	.LVL528:
 336:fat.c         **** 	_fs.csize = buf[BPB_SECTORS_PER_CLUSTER - 13];
 6905               		.loc 4 336 14 view .LVU1646
 6906 02bc C092 0000 		sts _fs+7,r12
 6907 02c0 D092 0000 		sts _fs+7+1,r13
 6908 02c4 E092 0000 		sts _fs+7+2,r14
 6909 02c8 F092 0000 		sts _fs+7+3,r15
 337:fat.c         **** 	_fs.n_rootdir = ld_u16(buf + PBP_ROOT_ENTRY_COUNT - 13);
 6910               		.loc 4 337 2 is_stmt 1 view .LVU1647
 337:fat.c         **** 	_fs.n_rootdir = ld_u16(buf + PBP_ROOT_ENTRY_COUNT - 13);
 6911               		.loc 4 337 17 is_stmt 0 view .LVU1648
 6912 02cc 3980      		ldd r3,Y+1
 337:fat.c         **** 	_fs.n_rootdir = ld_u16(buf + PBP_ROOT_ENTRY_COUNT - 13);
 6913               		.loc 4 337 12 view .LVU1649
 6914 02ce 3092 0000 		sts _fs,r3
 338:fat.c         **** 	if(!(tsect = ld_u16(buf + BPB_TOTAL_SECTORS_16 - 13)))
 6915               		.loc 4 338 2 is_stmt 1 view .LVU1650
 6916               	.LVL529:
 6917               	.LBB340:
 6918               	.LBI340:
   7:util.c        **** {
 6919               		.loc 2 7 17 view .LVU1651
 6920               	.LBB341:
   9:util.c        **** }
 6921               		.loc 2 9 2 view .LVU1652
   9:util.c        **** }
 6922               		.loc 2 9 26 is_stmt 0 view .LVU1653
 6923 02d2 0D81      		ldd r16,Y+5
 6924 02d4 1E81      		ldd r17,Y+6
 6925               	.LVL530:
   9:util.c        **** }
 6926               		.loc 2 9 26 view .LVU1654
 6927               	.LBE341:
 6928               	.LBE340:
 338:fat.c         **** 	if(!(tsect = ld_u16(buf + BPB_TOTAL_SECTORS_16 - 13)))
 6929               		.loc 4 338 16 view .LVU1655
 6930 02d6 1093 0000 		sts _fs+1+1,r17
 6931 02da 0093 0000 		sts _fs+1,r16
 339:fat.c         **** 	{
 6932               		.loc 4 339 2 is_stmt 1 view .LVU1656
 6933               	.LVL531:
 6934               	.LBB342:
 6935               	.LBI342:
   7:util.c        **** {
 6936               		.loc 2 7 17 view .LVU1657
 6937               	.LBB343:
   9:util.c        **** }
 6938               		.loc 2 9 2 view .LVU1658
   9:util.c        **** }
 6939               		.loc 2 9 2 is_stmt 0 view .LVU1659
 6940               	.LBE343:
 6941               	.LBE342:
 339:fat.c         **** 	{
 6942               		.loc 4 339 13 view .LVU1660
 6943 02de 8F81      		ldd r24,Y+7
 6944 02e0 9885      		ldd r25,Y+8
 6945 02e2 AC01      		movw r20,r24
 6946 02e4 70E0      		ldi r23,0
 6947 02e6 60E0      		ldi r22,0
 6948               	.LVL532:
 339:fat.c         **** 	{
 6949               		.loc 4 339 4 view .LVU1661
 6950 02e8 892B      		or r24,r25
 6951 02ea 01F4      		brne .L352
 341:fat.c         **** 	}
 6952               		.loc 4 341 3 is_stmt 1 view .LVU1662
 341:fat.c         **** 	}
 6953               		.loc 4 341 11 is_stmt 0 view .LVU1663
 6954 02ec CE01      		movw r24,r28
 6955 02ee 4496      		adiw r24,20
 6956 02f0 0E94 0000 		call ld_u32
 6957               	.LVL533:
 341:fat.c         **** 	}
 6958               		.loc 4 341 11 view .LVU1664
 6959 02f4 462F      		mov r20,r22
 6960 02f6 572F      		mov r21,r23
 6961 02f8 BC01      		movw r22,r24
 6962               	.LVL534:
 6963               	.L352:
 344:fat.c         **** 		fsize - _fs.n_rootdir / 16) / _fs.csize + 2;
 6964               		.loc 4 344 2 is_stmt 1 view .LVU1665
 6965               	.LBE335:
 6966               	.LBE334:
   9:util.c        **** }
 6967               		.loc 2 9 2 view .LVU1666
 6968               	.LBB345:
 6969               	.LBB344:
 345:fat.c         **** 
 6970               		.loc 4 345 25 is_stmt 0 view .LVU1667
 6971 02fa 84E0      		ldi r24,4
 6972               		1:
 6973 02fc 1695      		lsr r17
 6974 02fe 0795      		ror r16
 6975 0300 8A95      		dec r24
 6976 0302 01F4      		brne 1b
 6977 0304 2801      		movw r4,r16
 6978 0306 712C      		mov r7,__zero_reg__
 6979 0308 612C      		mov r6,__zero_reg__
 345:fat.c         **** 
 6980               		.loc 4 345 9 view .LVU1668
 6981 030a 840C      		add r8,r4
 6982 030c 951C      		adc r9,r5
 6983 030e A61C      		adc r10,r6
 6984 0310 B71C      		adc r11,r7
 6985 0312 89A5      		ldd r24,Y+41
 6986 0314 9AA5      		ldd r25,Y+42
 6987 0316 ABA5      		ldd r26,Y+43
 6988 0318 BCA5      		ldd r27,Y+44
 6989 031a 880E      		add r8,r24
 6990 031c 991E      		adc r9,r25
 6991 031e AA1E      		adc r10,r26
 6992 0320 BB1E      		adc r11,r27
 6993 0322 DB01      		movw r26,r22
 6994 0324 CA01      		movw r24,r20
 6995 0326 8819      		sub r24,r8
 6996 0328 9909      		sbc r25,r9
 6997 032a AA09      		sbc r26,r10
 6998 032c BB09      		sbc r27,r11
 345:fat.c         **** 
 6999               		.loc 4 345 36 view .LVU1669
 7000 032e 232D      		mov r18,r3
 7001 0330 30E0      		ldi r19,0
 7002 0332 50E0      		ldi r21,0
 7003 0334 40E0      		ldi r20,0
 7004               	.LVL535:
 345:fat.c         **** 
 7005               		.loc 4 345 31 view .LVU1670
 7006 0336 BC01      		movw r22,r24
 7007 0338 CD01      		movw r24,r26
 7008 033a 0E94 0000 		call __udivmodsi4
 344:fat.c         **** 		fsize - _fs.n_rootdir / 16) / _fs.csize + 2;
 7009               		.loc 4 344 8 view .LVU1671
 7010 033e DA01      		movw r26,r20
 7011 0340 C901      		movw r24,r18
 7012 0342 0296      		adiw r24,2
 7013 0344 A11D      		adc r26,__zero_reg__
 7014 0346 B11D      		adc r27,__zero_reg__
 7015               	.LVL536:
 347:fat.c         **** 	if(!(mclst >= 0xFFF7))
 7016               		.loc 4 347 2 is_stmt 1 view .LVU1672
 347:fat.c         **** 	if(!(mclst >= 0xFFF7))
 7017               		.loc 4 347 15 is_stmt 0 view .LVU1673
 7018 0348 8093 0000 		sts _fs+3,r24
 7019 034c 9093 0000 		sts _fs+3+1,r25
 7020 0350 A093 0000 		sts _fs+3+2,r26
 7021 0354 B093 0000 		sts _fs+3+3,r27
 348:fat.c         **** 	{
 7022               		.loc 4 348 2 is_stmt 1 view .LVU1674
 348:fat.c         **** 	{
 7023               		.loc 4 348 4 is_stmt 0 view .LVU1675
 7024 0358 873F      		cpi r24,-9
 7025 035a 9F4F      		sbci r25,-1
 7026 035c A105      		cpc r26,__zero_reg__
 7027 035e B105      		cpc r27,__zero_reg__
 7028 0360 00F0      		brlo .L350
 353:fat.c         **** 	_fs.database = _fs.fatbase + fsize + _fs.n_rootdir / 16;
 7029               		.loc 4 353 2 is_stmt 1 view .LVU1676
 353:fat.c         **** 	_fs.database = _fs.fatbase + fsize + _fs.n_rootdir / 16;
 7030               		.loc 4 353 16 is_stmt 0 view .LVU1677
 7031 0362 CE01      		movw r24,r28
 7032               	.LVL537:
 353:fat.c         **** 	_fs.database = _fs.fatbase + fsize + _fs.n_rootdir / 16;
 7033               		.loc 4 353 16 view .LVU1678
 7034 0364 8096      		adiw r24,32
 7035 0366 0E94 0000 		call ld_u32
 7036               	.LVL538:
 353:fat.c         **** 	_fs.database = _fs.fatbase + fsize + _fs.n_rootdir / 16;
 7037               		.loc 4 353 16 view .LVU1679
 7038 036a 6093 0000 		sts _fs+11,r22
 7039 036e 7093 0000 		sts _fs+11+1,r23
 7040 0372 8093 0000 		sts _fs+11+2,r24
 7041 0376 9093 0000 		sts _fs+11+3,r25
 354:fat.c         **** 	return 0;
 7042               		.loc 4 354 2 is_stmt 1 view .LVU1680
 354:fat.c         **** 	return 0;
 7043               		.loc 4 354 37 is_stmt 0 view .LVU1681
 7044 037a C40C      		add r12,r4
 7045 037c D51C      		adc r13,r5
 7046 037e E61C      		adc r14,r6
 7047 0380 F71C      		adc r15,r7
 7048 0382 89A5      		ldd r24,Y+41
 7049 0384 9AA5      		ldd r25,Y+42
 7050 0386 ABA5      		ldd r26,Y+43
 7051 0388 BCA5      		ldd r27,Y+44
 7052 038a C80E      		add r12,r24
 7053 038c D91E      		adc r13,r25
 7054 038e EA1E      		adc r14,r26
 7055 0390 FB1E      		adc r15,r27
 354:fat.c         **** 	return 0;
 7056               		.loc 4 354 15 view .LVU1682
 7057 0392 C092 0000 		sts _fs+15,r12
 7058 0396 D092 0000 		sts _fs+15+1,r13
 7059 039a E092 0000 		sts _fs+15+2,r14
 7060 039e F092 0000 		sts _fs+15+3,r15
 355:fat.c         **** }
 7061               		.loc 4 355 2 is_stmt 1 view .LVU1683
 7062               	.LVL539:
 355:fat.c         **** }
 7063               		.loc 4 355 2 is_stmt 0 view .LVU1684
 7064               	.LBE344:
 7065               	.LBE345:
  45:main.c        **** 	}
  46:main.c        **** 
  47:main.c        **** 	dir_open();
 7066               		.loc 10 47 2 is_stmt 1 view .LVU1685
 7067               	.LBB346:
 7068               	.LBI346:
 205:dir.c         **** 
 206:dir.c         **** static void dir_open(void)
 7069               		.loc 6 206 13 view .LVU1686
 7070               	.LBB347:
 207:dir.c         **** {
 208:dir.c         **** 	dir_prepare();
 7071               		.loc 6 208 2 view .LVU1687
 7072 03a2 0E94 0000 		call dir_prepare
 7073               	.LVL540:
 7074               	.L353:
 209:dir.c         **** 	for(;;)
 7075               		.loc 6 209 2 view .LVU1688
 210:dir.c         **** 	{
 211:dir.c         **** 		button_check(dir_event);
 7076               		.loc 6 211 3 view .LVU1689
 7077 03a6 80E0      		ldi r24,lo8(gs(dir_event))
 7078 03a8 90E0      		ldi r25,hi8(gs(dir_event))
 7079 03aa 0E94 0000 		call button_check
 7080               	.LVL541:
 209:dir.c         **** 	for(;;)
 7081               		.loc 6 209 7 view .LVU1690
 7082 03ae 00C0      		rjmp .L353
 7083               	.L350:
 7084               	.LBE347:
 7085               	.LBE346:
  44:main.c        **** 	}
 7086               		.loc 10 44 3 view .LVU1691
 7087 03b0 80E0      		ldi r24,lo8(error_fat)
 7088 03b2 90E0      		ldi r25,hi8(error_fat)
 7089 03b4 00C0      		rjmp .L373
 7090               		.cfi_endproc
 7091               	.LFE73:
 7093               		.section	.progmem.data,"a",@progbits
 7096               	dir_empty.0:
 7097 0000 5B20 4449 		.string	"[ DIR EMPTY ]"
 7097      5220 454D 
 7097      5054 5920 
 7097      5D00 
 7100               	notice.1:
 7101 000e 5265 7365 		.string	"Reset required"
 7101      7420 7265 
 7101      7175 6972 
 7101      6564 00
 7102               		.local	dir_path_len
 7103               		.comm	dir_path_len,1,1
 7104               		.local	dir_sel
 7105               		.comm	dir_sel,1,1
 7106               		.local	dirent
 7107               		.comm	dirent,36,1
 7108               		.local	dir
 7109               		.comm	dir,16,1
 7110               		.data
 7113               	dir_path:
 7114 0000 2F00      		.string	"/"
 7115 0002 0000 0000 		.zero	254
 7115      0000 0000 
 7115      0000 0000 
 7115      0000 0000 
 7115      0000 0000 
 7116               		.section	.progmem.data,"a",@progbits
 7119               	error_fat:
 7120 001d 4641 5433 		.string	"FAT32 Error"
 7120      3220 4572 
 7120      726F 7200 
 7123               	error_sd:
 7124 0029 5344 2D43 		.string	"SD-Card Error"
 7124      6172 6420 
 7124      4572 726F 
 7124      7200 
 7125               		.section	.rodata
 7128               	player_skip_amount:
 7129 0000 0500      		.word	5
 7130 0002 0A00      		.word	10
 7131 0004 1E00      		.word	30
 7132 0006 2C01      		.word	300
 7133 0008 5802      		.word	600
 7134 000a 0807      		.word	1800
 7135               		.section	.progmem.data,"a",@progbits
 7138               	player_skip_interval_str:
 7139 0037 3035 7331 		.string	"05s10s30s05m10m30m"
 7139      3073 3330 
 7139      7330 356D 
 7139      3130 6D33 
 7139      306D 00
 7140               		.local	player_write_offset
 7141               		.comm	player_write_offset,2,1
 7142               		.local	player_read_offset
 7143               		.comm	player_read_offset,2,1
 7144               		.local	player_swap_flag
 7145               		.comm	player_swap_flag,1,1
 7146               		.local	player_buf_idx
 7147               		.comm	player_buf_idx,2,1
 7148               		.local	player_buf
 7149               		.comm	player_buf,1024,1
 7150               		.local	player_skip_idx
 7151               		.comm	player_skip_idx,1,1
 7152               		.local	player_flags
 7153               		.comm	player_flags,1,1
 7154               		.local	player_wi
 7155               		.comm	player_wi,18,1
 7156               		.section	.rodata
 7159               	player_sample_rates:
 7160 000c 40        		.byte	64
 7161 000d 1F        		.byte	31
 7162 000e 00        		.byte	0
 7163 000f 00        		.byte	0
 7164 0010 FA        		.byte	-6
 7165 0011 11        		.byte	17
 7166 0012 2B        		.byte	43
 7167 0013 00        		.byte	0
 7168 0014 00        		.byte	0
 7169 0015 B5        		.byte	-75
 7170 0016 80        		.byte	-128
 7171 0017 3E        		.byte	62
 7172 0018 00        		.byte	0
 7173 0019 00        		.byte	0
 7174 001a 7D        		.byte	125
 7175 001b 22        		.byte	34
 7176 001c 56        		.byte	86
 7177 001d 00        		.byte	0
 7178 001e 00        		.byte	0
 7179 001f 5B        		.byte	91
 7180 0020 C0        		.byte	-64
 7181 0021 5D        		.byte	93
 7182 0022 00        		.byte	0
 7183 0023 00        		.byte	0
 7184 0024 53        		.byte	83
 7185 0025 00        		.byte	0
 7186 0026 7D        		.byte	125
 7187 0027 00        		.byte	0
 7188 0028 00        		.byte	0
 7189 0029 3F        		.byte	63
 7190 002a 44        		.byte	68
 7191 002b AC        		.byte	-84
 7192 002c 00        		.byte	0
 7193 002d 00        		.byte	0
 7194 002e 2D        		.byte	45
 7195 002f 80        		.byte	-128
 7196 0030 BB        		.byte	-69
 7197 0031 00        		.byte	0
 7198 0032 00        		.byte	0
 7199 0033 2A        		.byte	42
 7200               	.global	chr_plus_minus
 7203               	chr_plus_minus:
 7204 0034 0404 1F04 		.string	"\004\004\037\004\004"
 7204      0400 
 7205 003a 1F00      		.string	"\037"
 7206               	.global	chr_pause
 7209               	chr_pause:
 7210 003c 00        		.string	""
 7211 003d 1B1B 1B1B 		.string	"\033\033\033\033\033"
 7211      1B00 
 7212 0043 00        		.string	""
 7213               	.global	chr_play
 7216               	chr_play:
 7217 0044 080C 0E0F 		.string	"\b\f\016\017\016\f\b"
 7217      0E0C 0800 
 7218               		.local	_fs
 7219               		.comm	_fs,31,1
 7220               		.local	fat_ftell
 7221               		.comm	fat_ftell,4,1
 7222               		.local	fat_fsize
 7223               		.comm	fat_fsize,4,1
 7224               		.local	_card_type
 7225               		.comm	_card_type,1,1
 7226               		.local	_buttons
 7227               		.comm	_buttons,7,1
 7230               	_button_pins:
 7231 004c 0110 0804 		.ascii	"\001\020\b\004\002\001\002"
 7231      0201 02
 7234               	_button_ports:
 7235 0053 2300      		.word	35
 7236 0055 2600      		.word	38
 7237 0057 2600      		.word	38
 7238 0059 2600      		.word	38
 7239 005b 2600      		.word	38
 7240 005d 2600      		.word	38
 7241 005f 2300      		.word	35
 7242               		.text
 7243               	.Letext0:
 7244               		.file 12 "/usr/avr/include/stdint.h"
 7245               		.file 13 "/usr/avr/include/string.h"
 7246               		.file 14 "/usr/avr/include/stdio.h"
 7247               		.file 15 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccrx7e4w.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccrx7e4w.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccrx7e4w.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccrx7e4w.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccrx7e4w.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccrx7e4w.s:11     .text:0000000000000000 button_check
     /tmp/ccrx7e4w.s:7234   .rodata:0000000000000053 _button_ports
     /tmp/ccrx7e4w.s:7230   .rodata:000000000000004c _button_pins
     /tmp/ccrx7e4w.s:7225   .bss:0000000000000479 _buttons
     /tmp/ccrx7e4w.s:160    .text:000000000000007c ld_u32
     /tmp/ccrx7e4w.s:211    .text:00000000000000a4 mem_cmp
     /tmp/ccrx7e4w.s:276    .text:00000000000000ca _spi_xchg
     /tmp/ccrx7e4w.s:314    .text:00000000000000dc _command
     /tmp/ccrx7e4w.s:429    .text:0000000000000144 clust2sect
     /tmp/ccrx7e4w.s:7155   .bss:0000000000000451 _fs
     /tmp/ccrx7e4w.s:535    .text:00000000000001d6 dir_rewind
     /tmp/ccrx7e4w.s:645    .text:000000000000024e player_audio_start
     /tmp/ccrx7e4w.s:691    .text:000000000000026c player_audio_stop
     /tmp/ccrx7e4w.s:733    .text:0000000000000284 path_up
                             .bss:0000000000000000 dir_path_len
     /tmp/ccrx7e4w.s:7113   .data:0000000000000000 dir_path
     /tmp/ccrx7e4w.s:788    .text:00000000000002ac lcd_enable
     /tmp/ccrx7e4w.s:831    .text:00000000000002ba lcd_out
     /tmp/ccrx7e4w.s:862    .text:00000000000002ce lcd_data
     /tmp/ccrx7e4w.s:918    .text:00000000000002ee lcd_string
     /tmp/ccrx7e4w.s:967    .text:0000000000000306 lcd_string_P
     /tmp/ccrx7e4w.s:1030   .text:0000000000000322 lcd_command
     /tmp/ccrx7e4w.s:1085   .text:0000000000000340 lcd_gchar
     /tmp/ccrx7e4w.s:1161   .text:0000000000000378 player_render_pause
     /tmp/ccrx7e4w.s:7151   .bss:000000000000043e player_flags
     /tmp/ccrx7e4w.s:1183   .text:000000000000038a player_render_interval
     /tmp/ccrx7e4w.s:7149   .bss:000000000000043d player_skip_idx
     /tmp/ccrx7e4w.s:7138   .progmem.data:0000000000000037 player_skip_interval_str
     /tmp/ccrx7e4w.s:1282   .text:00000000000003c4 player_event
     /tmp/ccrx7e4w.s:1418   .text:000000000000043c dir_out_file
     /tmp/ccrx7e4w.s:7105   .bss:0000000000000002 dirent
     /tmp/ccrx7e4w.s:1591   .text:00000000000004d8 lcd_clear
     /tmp/ccrx7e4w.s:1631   .text:00000000000004ec mode_error
     /tmp/ccrx7e4w.s:7100   .progmem.data:000000000000000e notice.1
     /tmp/ccrx7e4w.s:1674   .text:0000000000000510 dir_render
     /tmp/ccrx7e4w.s:7103   .bss:0000000000000001 dir_sel
     /tmp/ccrx7e4w.s:1720   .text:0000000000000544 sd_read
     /tmp/ccrx7e4w.s:7223   .bss:0000000000000478 _card_type
     /tmp/ccrx7e4w.s:1965   .text:000000000000061e get_fat
     /tmp/ccrx7e4w.s:2116   .text:00000000000006e4 dir_next
     /tmp/ccrx7e4w.s:2349   .text:0000000000000806 check_fs
     /tmp/ccrx7e4w.s:2497   .text:0000000000000874 fat_readdir.constprop.0
     /tmp/ccrx7e4w.s:7107   .bss:0000000000000026 dir
     /tmp/ccrx7e4w.s:2867   .text:00000000000009d8 fat_fread.constprop.0
     /tmp/ccrx7e4w.s:7221   .bss:0000000000000474 fat_fsize
     /tmp/ccrx7e4w.s:7219   .bss:0000000000000470 fat_ftell
     /tmp/ccrx7e4w.s:3248   .text:0000000000000be2 fat_fseek.isra.0
     /tmp/ccrx7e4w.s:3642   .text:0000000000000e54 follow_path.constprop.0
     /tmp/ccrx7e4w.s:4082   .text:0000000000000fd0 fat_opendir.constprop.0.isra.0
     /tmp/ccrx7e4w.s:4224   .text:0000000000001056 dir_prepare
     /tmp/ccrx7e4w.s:7096   .progmem.data:0000000000000000 dir_empty.0
     /tmp/ccrx7e4w.s:4304   .text:0000000000001094 dir_event
     /tmp/ccrx7e4w.s:7147   .bss:000000000000003d player_buf
     /tmp/ccrx7e4w.s:7153   .bss:000000000000043f player_wi
     /tmp/ccrx7e4w.s:7159   .rodata:000000000000000c player_sample_rates
     /tmp/ccrx7e4w.s:7128   .rodata:0000000000000000 player_skip_amount
     /tmp/ccrx7e4w.s:7143   .bss:000000000000003a player_swap_flag
     /tmp/ccrx7e4w.s:7109   .bss:0000000000000036 player_write_offset
     /tmp/ccrx7e4w.s:7141   .bss:0000000000000038 player_read_offset
     /tmp/ccrx7e4w.s:7145   .bss:000000000000003b player_buf_idx
     /tmp/ccrx7e4w.s:5997   .text:000000000000190c __vector_7
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001
     /tmp/ccrx7e4w.s:6199   .text.startup:0000000000000000 main
     /tmp/ccrx7e4w.s:7216   .rodata:0000000000000044 chr_play
     /tmp/ccrx7e4w.s:7209   .rodata:000000000000003c chr_pause
     /tmp/ccrx7e4w.s:7203   .rodata:0000000000000034 chr_plus_minus
     /tmp/ccrx7e4w.s:7123   .progmem.data:0000000000000029 error_sd
     /tmp/ccrx7e4w.s:7119   .progmem.data:000000000000001d error_fat

UNDEFINED SYMBOLS
__muluhisi3
__tablejump2__
__udivmodsi4
memset
strcmp
snprintf
__do_copy_data
__do_clear_bss
